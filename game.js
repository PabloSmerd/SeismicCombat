// ====== –°–ò–°–¢–ï–ú–ê –ü–ï–†–°–û–ù–ê–ñ–ï–ô ======
// ====== –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–†–¢–ò–ù–û–ö –ü–ï–†–°–û–ù–ê–ñ–ê ======
// --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê: –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
// ==== –ö–û–ù–§–ò–ì –ö–ê–†–¢–ò–ù–û–ö –î–õ–Ø –ü–ï–†–°–û–ù–ê–ñ–ï–ô ====
// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas
function resizeCanvas() {
    const canvas = document.getElementById('gameCanvas');
    if (canvas) {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        if (player) {
            player.y = canvas.height - player.height - 20;
        }
        if (bot) {
            bot.y = canvas.height - bot.height - 20;
            bot.x = canvas.width - 150; // –ë–æ—Ç —Å–ø—Ä–∞–≤–∞
        }
    }
}

// –í—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
window.addEventListener('load', resizeCanvas);
window.addEventListener('resize', resizeCanvas);
const CHARACTERS = [
  {
    key: "Tom.J",
    name: "Tom.j", 
    color: "#FFD700",
     description: "The Great Warrior with AI Demons",
    images: {
      idle: "assets/TOM.png",
      attack: "assets/TOMFIGHT.png",
      portrait: "assets/TOM.png"  ,
      shield: "assets/Tom.jBkock.png"  // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û
    }
  },
  {
    key: "lyron",
    name: "Lyron",
    color: "#00BFFF", 
    description: "The Lord of All Magnitudes",
    images: {
      idle: "assets/Lyron.png",
      attack: "assets/LyronFight.png", 
      portrait: "assets/Lyron.png"  ,
      shield: "assets/lyronBlock.png"  // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û
    }
  },
  {
    key: "noxx",
    name: "Noxx",
    color: "#ffa502",
    description: "He is everywhere, omnipresent, upholding order in the realm of magnitudes.",
    element: "electric",
    images: {
      idle: "/assets/NOXX.png",
      attack: "/assets/NOXX_FIGHTER.png",
      portrait: "/assets/NOXX.png",
      shield: "assets/Noxx_block.png"
    }
  },
   {
    key: "Burhan.IP",
    name: "Burhan",
    color: "#ffa502",
    description: "Quintessence of Power GIF",
    element: "electric",
    images: {
      idle: "/assets/Burhanf.png",
      attack: "/assets/Burhanatack.png",
      portrait: "/assets/Burhanf.png",
      shield: "assets/burhanblock.png"
    }
  },
  {
    key: "XEALIST",
    name: "Xealist",
    color: "#ffa502",
    description: "Mind and Knowledge of Magnitudes.",
    element: "electric",
    images: {
      idle: "/assets/XEALIST.png",
      attack: "/assets/XEALISTAAA.png",
      portrait: "/assets/XEALIST.png",
      shield: "assets/Xeakistblock.png"
    }
  },
  {
    key: "DeFi.NinJa_Elijah",
    name: "DeFi.NinJa_Elijah",
    color: "#ffa502",
    description: "He is everywhere and nowhere.",
    element: "electric",
    images: {
      idle: "/assets/DeFi.NinJa_Elijah.png",
      attack: "/assets/DeFi.NinjaAttack.png",
      portrait: "/assets/DeFi.NinJa_Elijah.png",
      shield: "assets/Defi.Ninja.block.png"
    }
  },
  {
    key: "vludblet",
    name: "vludblet",
    color: "#ffa502",
    description: "Just a nice guy",
    element: "electric",
    images: {
      idle: "/assets/vludblet.png",
      attack: "/assets/vludbletattack.png",
      portrait: "/assets/vludblet.png",
      shield: "assets/vludbock.png"
    }
  },
   {
    key: "Aashi",
    name: "Aashi",
    color: "#ffa502",
    description: "Heart of Magnitude.",
    element: "electric",
    images: {
      idle: "/assets/Aashi.png",
      attack: "/assets/AashiAttack.png",
      portrait: "/assets/Aashi.png",
      shield: "assets/Aashiblock.png"
    }
  },
   {
    key: "Heathcliff",
    name: "Heathcliff",
    color: "#ffa502",
    description: "The Gray Cardinal of This World",
    element: "electric",
    images: {
      idle: "/assets/Heathcliff.png",
      attack: "/assets/heatcif.png",
      portrait: "/assets/Heathcliff.png",
      shield: "assets/healblock.png"
    }
  },
  {
    key: "Matt",
    name: "Matt",
    color: "#ffa502",
    description: "This isn‚Äôt just a shark; it‚Äôs MATT.",
    element: "electric",
    images: {
      idle: "/assets/Matt.png",
      attack: "/assets/mattatack.png",
      portrait: "/assets/Matt.png",
      shield: "assets/Mattblock.png"
    }
  },
  {
    key: "!ZAIN",
    name: "!ZAIN",
    color: "#ffa502",
    description: "His strength lies far beyond his fists",
    element: "electric",
    images: {
      idle: "/assets/ZAIN.png",
      attack: "/assets/ZAINATA.png",
      portrait: "/assets/ZAIN.png",
      shield: "/assets/!ZAINblock.png"
    }
  },
  {
    key: "sguzeva",
    name: "sguzeva",
    color: "#ffa502",
    description: "Every week is something more..",
    element: "electric",
    images: {
      idle: "assets/sguzeva.png",
      attack: "assets/sguzeva_attack.png",
      portrait: "assets/sguzeva.png",
      shield: "assets/sguzevablock.png"
    }
  },
  {
    key: "Kristina",
    name: "Kristina",
    color: "#ffa502",
    description: "Beware the dark power veiled behind radiant faces",
    element: "electric",
    images: {
      idle: "assets/Kristina.png",
      attack: "assets/KRISTINAATA.png",
      portrait: "assets/Kristina.png",
      shield: "assets/KristinaBlock.png"
    }
  },
   {
    key: "BUDEK",
    name: "BUDEK",
    color: "#ffa502",
    description: "B BU BUD BUDE BUDEK",
    element: "electric",
    images: {
      idle: "assets/Budek.png",
      attack: "assets/budek.fight.png",
      portrait: "assets/Budek.png",
      shield: "assets/BUdek.block.png"
    }
  },
   {
    key: "ZELLA",
    name: "ZELLA",
    color: "#ffa502",
    description: "ZELLA",
    element: "electric",
    images: {
      idle: "assets/Zela.png",
      attack: "assets/Zelaatack.png",
      portrait: "assets/Zela.png",
      shield: "assets/Zellablock.png"
    }
  },
];
// ====== –§–û–ù–û–í–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï ======
// ====== –§–û–ù–û–í–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ======
// üé® –ú–ê–°–°–ò–í –§–û–ù–û–í –î–õ–Ø –†–ê–ó–ù–´–• –ê–†–ï–ù
const ARENA_BACKGROUNDS = [
    {
        name: "–ì–æ—Ä–Ω–∞—è –∞—Ä–µ–Ω–∞",
        file: "assets/background.png",
        description: "–≠–ø–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä—ã –∏ –æ–±–ª–∞–∫–∞"
    },
    {
        name: "–õ–µ—Å–Ω–∞—è –ø–æ–ª—è–Ω–∞", 
        file: "/assets/background2.png",
        description: "–ì—É—Å—Ç–æ–π –ª–µ—Å —Å —Å–æ–ª–Ω–µ—á–Ω—ã–º–∏ –ª—É—á–∞–º–∏"
    },
    {
        name: "–ü—É—Å—Ç—ã–Ω–Ω–∞—è –∞—Ä–µ–Ω–∞",
        file: "assets/background4.png", 
        description: "–ü–µ—Å—á–∞–Ω—ã–µ –¥—é–Ω—ã –∏ –ø–∞–ª—è—â–µ–µ —Å–æ–ª–Ω—Ü–µ"
    },
];

let currentArenaIndex = 0;
let backgroundImage = null;
let backgroundLoaded = false;
let currentArenaName = "";

// üé≤ –°–õ–£–ß–ê–ô–ù–´–ô –í–´–ë–û–† –ê–†–ï–ù–´
function selectRandomArena() {
    currentArenaIndex = Math.floor(Math.random() * ARENA_BACKGROUNDS.length);
    const selectedArena = ARENA_BACKGROUNDS[currentArenaIndex];
    currentArenaName = selectedArena.name;
    
    console.log(`üèüÔ∏è –í—ã–±—Ä–∞–Ω–∞ –∞—Ä–µ–Ω–∞: ${selectedArena.name}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${selectedArena.description}`);
    
    return selectedArena;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
function loadBackground() {
    const selectedArena = ARENA_BACKGROUNDS[currentArenaIndex];
    
    backgroundImage = new Image();
    backgroundImage.onload = () => {
        backgroundLoaded = true;
        console.log(`üé® –§–æ–Ω –∞—Ä–µ–Ω—ã "${selectedArena.name}" –∑–∞–≥—Ä—É–∂–µ–Ω!`);
    };
    backgroundImage.onerror = () => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞: ${selectedArena.file}`);
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω');
        backgroundLoaded = false;
    };
    backgroundImage.src = selectedArena.file;
}
let selectedCharIndex = 0;
let imageCache = {};
let imagesLoaded = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function updateCharacterDisplay() {
    const character = CHARACTERS[selectedCharIndex];
    const imgEl = document.getElementById('characterImg');
    const nameEl = document.getElementById('characterName');
    const descEl = document.getElementById('characterDesc');
    
    if (imgEl) imgEl.src = character.images.portrait;
    if (nameEl) nameEl.textContent = character.name;
    if (descEl) descEl.textContent = character.description;
}


window.addEventListener('load', () => {
    const prevBtn = document.getElementById('prevCharBtn');
    const nextBtn = document.getElementById('nextCharBtn'); 
    const confirmBtn = document.getElementById('confirmCharBtn');
    const charMenu = document.getElementById('characterMenu');
    const diffMenu = document.getElementById('difficultyMenu');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    updateCharacterDisplay();
    
    // üé® –í–û–¢ –≠–¢–ê –°–¢–†–û–ß–ö–ê - –î–û–ë–ê–í–¨–¢–ï –ï–Å –°–Æ–î–ê:
    loadBackground();

    if (prevBtn) {
        prevBtn.addEventListener('click', () => {
            selectedCharIndex = (selectedCharIndex - 1 + CHARACTERS.length) % CHARACTERS.length;
            updateCharacterDisplay();
        });
    }

    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            selectedCharIndex = (selectedCharIndex + 1) % CHARACTERS.length;
            updateCharacterDisplay();
        });
    }

    if (confirmBtn) {
        confirmBtn.addEventListener('click', () => {
            console.log(`–í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: ${CHARACTERS[selectedCharIndex].name}`);
            preloadImages(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            charMenu.style.display = 'none';
            diffMenu.style.display = 'block';
        });
    }
});


// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫


function preloadImages() {
    imagesLoaded = false;
    imageCache = {};
    
    const selectedCharacter = CHARACTERS[selectedCharIndex];
    const urls = selectedCharacter.images;
    
    const promises = Object.entries(urls).map(([state, url]) =>
        new Promise(resolve => {
            const img = new Image();
            img.onload = () => { 
                imageCache[state] = img; 
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${state} –¥–ª—è ${selectedCharacter.name}`);
                resolve(); 
            };
            img.onerror = () => { 
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${url} –¥–ª—è ${selectedCharacter.name}`); 
                resolve(); 
            };
            img.src = url;
        })
    );
    
    Promise.all(promises).then(() => {
        imagesLoaded = true;
        console.log(`üé® –í—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${selectedCharacter.name}!`);
    });
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –ò–ò
function preloadBotImages(botCharacterIndex) {
    const botCharacter = CHARACTERS[botCharacterIndex];
    const urls = botCharacter.images;
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –±–æ—Ç–∞
    window.botImageCache = {};
    
    const promises = Object.entries(urls).map(([state, url]) =>
        new Promise(resolve => {
            const img = new Image();
            img.onload = () => { 
                window.botImageCache[state] = img; 
                console.log(`ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–æ—Ç–∞: ${state} –¥–ª—è ${botCharacter.name}`);
                resolve(); 
            };
            img.onerror = () => { 
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–æ—Ç–∞: ${url} –¥–ª—è ${botCharacter.name}`); 
                resolve(); 
            };
            img.src = url;
        })
    );
    
    Promise.all(promises).then(() => {
        window.botImagesLoaded = true;
        console.log(`üé® –í—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${botCharacter.name}!`);
    });
}
// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –ò–ò
function preloadBotImages(botCharacterIndex) {
    const botCharacter = CHARACTERS[botCharacterIndex];
    const urls = botCharacter.images;
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –±–æ—Ç–∞
    window.botImageCache = {};
    
    const promises = Object.entries(urls).map(([state, url]) =>
        new Promise(resolve => {
            const img = new Image();
            img.onload = () => { 
                window.botImageCache[state] = img; 
                console.log(`ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–æ—Ç–∞: ${state} –¥–ª—è ${botCharacter.name}`);
                resolve(); 
            };
            img.onerror = () => { 
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–æ—Ç–∞: ${url} –¥–ª—è ${botCharacter.name}`); 
                resolve(); 
            };
            img.src = url;
        })
    );
    
    Promise.all(promises).then(() => {
        window.botImagesLoaded = true;
        console.log(`üé® –í—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${botCharacter.name}!`);
    });
}

// üé® =============== –í–û–¢ –¢–£–¢ –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ===============
// ====== –§–£–ù–ö–¶–ò–Ø –†–ò–°–û–í–ê–ù–ò–Ø –§–û–ù–ê ======
// ====== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ò–°–û–í–ê–ù–ò–Ø –§–û–ù–ê ======
function drawBackground(ctx) {
    if (backgroundLoaded && backgroundImage) {
        // –†–∏—Å—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä–µ–Ω—ã
        const bgRatio = backgroundImage.width / backgroundImage.height;
        const canvasRatio = canvas.width / canvas.height;

        let drawWidth, drawHeight, offsetX = 0, offsetY = 0;

        if (bgRatio > canvasRatio) {
            drawHeight = canvas.height;
            drawWidth = drawHeight * bgRatio;
            offsetX = -(drawWidth - canvas.width) / 2;
        } else {
            drawWidth = canvas.width;
            drawHeight = drawWidth / bgRatio;
            offsetY = -(drawHeight - canvas.height) / 2;
        }

        ctx.drawImage(backgroundImage, offsetX, offsetY, drawWidth, drawHeight);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä–µ–Ω—ã
        addArenaEffects(ctx);
        
    } else {
        // –ó–∞–ø–∞—Å–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        drawFallbackBackground(ctx);
    }
    
    // –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞—Ä–µ–Ω
    drawCommonArenaElements(ctx);
}

// üåü –ê–¢–ú–û–°–§–ï–†–ù–´–ï –≠–§–§–ï–ö–¢–´ –î–õ–Ø –†–ê–ó–ù–´–• –ê–†–ï–ù
// üåü –ê–¢–ú–û–°–§–ï–†–ù–´–ï –≠–§–§–ï–ö–¢–´ –î–õ–Ø –†–ê–ó–ù–´–• –ê–†–ï–ù (–ü–£–°–¢–ê–Ø - –¢–û–õ–¨–ö–û –í–ê–®–ò PNG)
function addArenaEffects(ctx) {
    // –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ PNG —Ñ–æ–Ω—ã
}

// üèõÔ∏è –ó–ê–ü–ê–°–ù–û–ô –ì–†–ê–î–ò–ï–ù–¢–ù–´–ô –§–û–ù
// üèõÔ∏è –ó–ê–ü–ê–°–ù–û–ô –§–û–ù (–ï–°–õ–ò PNG –ù–ï –ó–ê–ì–†–£–ó–ò–õ–°–Ø)
function drawFallbackBackground(ctx) {
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    ctx.fillStyle = '#2C3E50';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // –ù–∞–¥–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
    ctx.fillStyle = 'white';
    ctx.font = 'bold 24px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('–§–æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', canvas.width/2, canvas.height/2);
    ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª PNG', canvas.width/2, canvas.height/2 + 30);
}

// üåç –û–ë–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ê–†–ï–ù–´
// üåç –û–ë–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ê–†–ï–ù–´ (–¢–û–õ–¨–ö–û –ù–ï–í–ò–î–ò–ú–ê–Ø –ü–õ–ê–¢–§–û–†–ú–ê)
function drawCommonArenaElements(ctx) {
    // –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - —á–∏—Å—Ç—ã–π PNG —Ñ–æ–Ω
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ Fighter –∫–ª–∞—Å—Å–∞
}
class Fighter {
    constructor(x, y, color, name, specialAttack, useImages = false) {
        this.x = x;
        this.y = y;
        this.width = 220;
        this.height = 220;
        this.color = color;
        this.name = name;
        this.health = 100;
        this.maxHealth = 100;
        this.velocityX = 0;
        this.velocityY = 0;
        this.onGround = true;
        this.facingRight = true;
        this.isAttacking = false;
        this.isBlocking = false;
        this.lightAttackCooldown = 0;
        this.heavyAttackCooldown = 0;
        this.combo = 0;
        this.specialAttack = specialAttack;
        this.specialCooldown = 0;
        this.lastAttackTime = 0;
        this.attackFrame = 0;
        this.attackType = 'none';
        this.attackPhase = 'none';
        this.attackProgress = 0;
        this.hitEffect = 0;
        this.blockHealth = 100;
        this.maxBlockHealth = 100;
        this.stunned = 0;
        this.balance = 100;
        this.maxBalance = 100;
        this.knockback = 0;
        this.lastHitType = 'normal';
        this.screenShake = 0;
        
        // –°–ò–°–¢–ï–ú–ê –ü–ê–†–ò–†–û–í–ê–ù–ò–Ø –ò –ö–û–ù–¢–†–ê–¢–ê–ö
        this.isParrying = false;
        this.parryWindow = 0;
        this.vulnerableToCounter = 0;
        this.canCounter = 0;
        this.isCountering = false;
        this.lastParryTime = 0;
        
        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –î–í–ò–ñ–ï–ù–ò–Ø
        this.moveSpeed = 13; // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
        this.jumpPower = 24; // –°–∏–ª–∞ –ø—Ä—ã–∂–∫–∞
        this.airControl = 0.8; // –ö–æ–Ω—Ç—Ä–æ–ª—å –≤ –≤–æ–∑–¥—É—Ö–µ (0-1)
        this.landingEffect = 0; // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
        this.landingPrep = false; // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—é
        this.isMovingLeft = false; // –î–≤–∏–∂–µ—Ç—Å—è –ª–∏ –≤–ª–µ–≤–æ
        this.isMovingRight = false; // –î–≤–∏–∂–µ—Ç—Å—è –ª–∏ –≤–ø—Ä–∞–≤–æ
        this.coyoteTime = 0; // "–ö–æ–π–æ—Ç-—Ç–∞–π–º" –¥–ª—è –ø—Ä—ã–∂–∫–æ–≤ —Å –∫—Ä–∞—è
        this.jumpBuffer = 0; // –ë—É—Ñ–µ—Ä –¥–ª—è –ø—Ä—ã–∂–∫–æ–≤
        this.jumpEffect = 0; // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä—ã–∂–∫–∞
        this.useImages = useImages;
    }
    
    // –°–ò–°–¢–ï–ú–ê –ê–ù–ò–ú–ê–¶–ò–ò –ê–¢–ê–ö
    updateAttackAnimation() {
        if (this.attackType === 'none') return;
        
        let totalFrames, windupFrames, strikeFrames;
        
        switch(this.attackType) {
            case 'light':
                totalFrames = 15;
                windupFrames = 4;
                strikeFrames = 3;
                break;
            case 'heavy':
                totalFrames = 25;
                windupFrames = 8;
                strikeFrames = 5;
                break;
            case 'counter':
                totalFrames = 20;
                windupFrames = 3;
                strikeFrames = 6;
                break;
            default:
                totalFrames = 15;
                windupFrames = 4;
                strikeFrames = 3;
        }
        
        const recoveryFrames = totalFrames - windupFrames - strikeFrames;
        const currentFrame = totalFrames - this.attackFrame;
        
        if (currentFrame < windupFrames) {
            this.attackPhase = 'windup';
            this.attackProgress = currentFrame / windupFrames;
        } else if (currentFrame < windupFrames + strikeFrames) {
            this.attackPhase = 'strike';
            this.attackProgress = (currentFrame - windupFrames) / strikeFrames;
        } else {
            this.attackPhase = 'recovery';
            this.attackProgress = (currentFrame - windupFrames - strikeFrames) / recoveryFrames;
        }
    }
    
    update() {
        // –§–∏–∑–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–µ–π
        this.velocityY += 0.7; // –ß—É—Ç—å –º–µ–Ω—å—à–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã—Ö –ø—Ä—ã–∂–∫–æ–≤
        
        if (this.knockback > 0) {
            this.velocityX += this.knockback;
            this.knockback *= 0.85; // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
            if (Math.abs(this.knockback) < 0.1) this.knockback = 0;
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã
        if (Math.abs(this.velocityX) > 0.5 && this.onGround && !this.isAttacking) {
            this.walkCycle = (this.walkCycle || 0) + Math.abs(this.velocityX) * 0.15;
        } else {
            this.walkCycle = 0;
        }
        
        // –ü–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–µ
        if (!this.onGround && this.velocityY > 0) {
            this.landingPrep = true;
        }
        
        this.x += this.velocityX;
        this.y += this.velocityY;
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–µ–π
        if (this.x < 0) {
            this.x = 0;
            this.velocityX = Math.max(0, this.velocityX); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ
        }
        if (this.x > canvas.width - this.width) {
            this.x = canvas.width - this.width;
            this.velocityX = Math.min(0, this.velocityX);
        }
        
        // –ü—Ä–∏–∑–µ–º–ª–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        if (this.y > canvas.height - this.height - 20) {
            this.y = canvas.height - this.height - 20;
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
            if (!this.onGround && this.velocityY > 8) {
                this.landingEffect = 15; // –≠—Ñ—Ñ–µ–∫—Ç —É–¥–∞—Ä–∞ –æ –∑–µ–º–ª—é
                this.velocityX *= 0.7; // –ù–µ–±–æ–ª—å—à–æ–µ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏
            }
            
            this.velocityY = 0;
            this.onGround = true;
            this.landingPrep = false;
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç—Ä–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (this.onGround) {
            if (this.isAttacking) {
                this.velocityX *= 0.88; // –ú–µ–Ω—å—à–µ —Ç—Ä–µ–Ω–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ
            } else {
                this.velocityX *= 0.85; // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ
            }
        } else {
            this.velocityX *= 0.96; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥—É—à–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
        }
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
        if (this.lightAttackCooldown > 0) this.lightAttackCooldown--;
        if (this.heavyAttackCooldown > 0) this.heavyAttackCooldown--;
        if (this.attackFrame > 0) this.attackFrame--;
        if (this.hitEffect > 0) this.hitEffect--;
        if (this.stunned > 0) this.stunned--;
        if (this.screenShake > 0) this.screenShake--;
        if (this.landingEffect > 0) this.landingEffect--;
        
        // –°–ò–°–¢–ï–ú–ê –ü–ê–†–ò–†–û–í–ê–ù–ò–Ø
        if (this.parryWindow > 0) this.parryWindow--;
        if (this.vulnerableToCounter > 0) this.vulnerableToCounter--;
        if (this.canCounter > 0) this.canCounter--;
        
        // –°–∏—Å—Ç–µ–º–∞ –ø—Ä—ã–∂–∫–æ–≤
        if (this.coyoteTime > 0) this.coyoteTime--;
        if (this.jumpBuffer > 0) this.jumpBuffer--;
        
        // –ö–æ–π–æ—Ç-—Ç–∞–π–º: –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —Å—Ö–æ–¥–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä—ã–≥–Ω—É—Ç—å
        if (this.onGround) {
            this.coyoteTime = 8; // 8 –∫–∞–¥—Ä–æ–≤ –∫–æ–π–æ—Ç-—Ç–∞–π–º–∞
        }
        
        // –°–±—Ä–æ—Å –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç
        if (!this.isBlocking) {
            this.isParrying = false;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
        if (!this.isBlocking && this.blockHealth < this.maxBlockHealth) {
            this.blockHealth += 0.5;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è
        if (this.balance < this.maxBalance) {
            this.balance += 1;
        }
        
        // –°–±—Ä–æ—Å –∫–æ–º–±–æ
        if (Date.now() - this.lastAttackTime > 2000) {
            this.combo = 0;
        }
        
        // –°–±—Ä–æ—Å –∞—Ç–∞–∫–∏
        if (this.attackFrame === 0) {
            this.isAttacking = false;
            this.attackType = 'none';
            this.attackPhase = 'none';
            this.attackProgress = 0;
        } else {
            this.updateAttackAnimation();
        }
    }
    
    draw(ctx) {
        let shakeX = 0, shakeY = 0;
        if (this.screenShake > 0) {
            shakeX = (Math.random() - 0.5) * this.screenShake;
            shakeY = (Math.random() - 0.5) * this.screenShake;
        }
        
        let drawX = this.x + shakeX;
        let drawY = this.y + shakeY;
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ–Ω—å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ —Ü–≤–µ—Ç–æ–º
        let shadowWidth = this.width;
        let shadowOpacity = 0.4;
        let shadowColor = '0, 0, 0';
        
        if (!this.onGround) {
            let heightFactor = Math.min((canvas.height - this.y) / 200, 1);
            shadowWidth = this.width * (0.5 + 0.5 * heightFactor);
            shadowOpacity = 0.3 * heightFactor;
        }
        
        // –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ç–µ–Ω–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        if (this.name === "Tom.J") {
            shadowColor = '255, 215, 0';
            shadowOpacity *= 0.6;
        } else if (this.name === "Lyron") {
            shadowColor = '0, 191, 255';
            shadowOpacity *= 0.6;
        }
        
        ctx.fillStyle = `rgba(${shadowColor}, ${shadowOpacity})`;
        ctx.fillRect(drawX + (this.width - shadowWidth)/2, canvas.height - 15, shadowWidth, 8);
        
        // –ê—É—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        //this.drawAura(ctx, drawX, drawY);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
        if (this.landingEffect > 0) {
            let intensity = this.landingEffect / 15;
            ctx.fillStyle = `rgba(139, 69, 19, ${0.4 * intensity})`;
            
            // –ü—ã–ª—å –æ—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
            for (let i = 0; i < 8; i++) {
                let dustX = drawX + 10 + (Math.random() - 0.5) * 60;
                let dustY = canvas.height - 10 + Math.random() * 15;
                let dustSize = 2 + Math.random() * 4;
                
                ctx.beginPath();
                ctx.arc(dustX, dustY, dustSize, 0, 2 * Math.PI);
                ctx.fill();
            }
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä—ã–∂–∫–∞
        if (this.jumpEffect > 0) {
            this.jumpEffect--;
            let intensity = this.jumpEffect / 10;
            
            // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–∫—Ä—ã –æ—Ç –ø—Ä—ã–∂–∫–∞
            for (let i = 0; i < 6; i++) {
                let sparkX = drawX + 15 + (Math.random() - 0.5) * 30;
                let sparkY = canvas.height - 10 + Math.random() * 10;
                
                let sparkColor = this.name === "Tom.J" ? '255, 215, 0' : '0, 191, 255';
                ctx.fillStyle = `rgba(${sparkColor}, ${intensity})`;
                ctx.fillRect(sparkX - 1, sparkY - 1, 3, 3);
                
                // –°–≤–µ—á–µ–Ω–∏–µ –∏—Å–∫—Ä
                ctx.shadowColor = `rgba(${sparkColor}, ${intensity * 0.8})`;
                ctx.shadowBlur = 5;
                ctx.fillRect(sparkX - 0.5, sparkY - 0.5, 2, 2);
                ctx.shadowBlur = 0;
            }
        }
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.drawStatusEffects(ctx, drawX, drawY);
        // –†–∏—Å—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
if (this.useImages && imagesLoaded) {
    this.drawCharacterWithImage(ctx, drawX, drawY);
} else {
    this.drawCharacter(ctx, drawX, drawY);
}
        
        // –†–∏—Å—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
       // this.drawCharacter(ctx, drawX, drawY);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –∞—Ç–∞–∫–∏
        this.drawAttackEffect(ctx, drawX, drawY);
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.drawCharacterUI(ctx, drawX, drawY);
    }
   drawCharacterWithImage(ctx, drawX, drawY) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    let imageKey = 'idle';
if (this.isAttacking || this.attackFrame > 0) {
    imageKey = 'attack';
} else if (this.isBlocking) {
    imageKey = 'shield';  // ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
}
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫—ç—à –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å - –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –±–æ—Ç–∞
    let currentCache, cacheLoaded;
    if (this === player) {
        currentCache = imageCache;
        cacheLoaded = imagesLoaded;
    } else {
        currentCache = window.botImageCache || {};
        cacheLoaded = window.botImagesLoaded || false;
    }
    
    const img = currentCache[imageKey];
    if (!img || !cacheLoaded) {
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∏—Å—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        this.drawCharacter(ctx, drawX, drawY);
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    ctx.save();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (this.stunned > 0) {
        ctx.filter = 'grayscale(50%) brightness(1.2)';
    }
    if (this.hitEffect > 0) {
        ctx.filter = 'hue-rotate(180deg) brightness(1.5)';
    }
    
    // –û—Ç—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–º–æ—Ç—Ä–∏—Ç –≤–ª–µ–≤–æ
    if (!this.facingRight) {
        ctx.translate(drawX + this.width, drawY);
        ctx.scale(-1, 1);
        ctx.drawImage(img, 0, 0, this.width, this.height);
    } else {
        ctx.drawImage(img, drawX, drawY, this.width, this.height);
    }
 
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx.restore();
    
}
 
    
    drawStatusEffects(ctx, drawX, drawY) {
    }
    
    drawCharacter(ctx, drawX, drawY) {
        let mainColor = this.color;
        let skinColor = this.stunned > 0 ? '#E0E0E0' : '#FFDBAC';
        
        // –ó–∞—Ç–µ–º–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–∏
        if (this.isBlocking) {
            mainColor = this.adjustColor(this.color, -40);
        }
        if (this.stunned > 0) {
            mainColor = '#DDDDDD';
        }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ —Ç–µ–ª–∞ –ø—Ä–∏ –∞—Ç–∞–∫–∞—Ö
        let bodyLean = 0;
        let headBob = 0;
        
        if (!this.isAttacking) {
            headBob = Math.sin(Date.now() * 0.004) * 0.8;
        } else if (this.attackPhase === 'strike') {
            headBob = this.attackProgress * 3;
        }

        if (this.isAttacking && this.attackPhase !== 'none') {
            switch(this.attackPhase) {
                case 'windup':
                    bodyLean = -this.attackProgress * 4;
                    break;
                case 'strike':
                    bodyLean = this.attackProgress * 6;
                    if (this.attackType === 'heavy') bodyLean *= 1.5;
                    if (this.attackType === 'counter') bodyLean *= 2;
                    break;
                case 'recovery':
                    bodyLean = (1 - this.attackProgress) * 4;
                    break;
            }
        }
        
        // –ì–û–õ–û–í–ê —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        ctx.fillStyle = skinColor;
        ctx.fillRect(drawX + 10 + bodyLean * 0.5, drawY + headBob, 20, 20);
        
        // –¢–µ–Ω—å –ø–æ–¥ –≥–æ–ª–æ–≤–æ–π
        ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
        ctx.fillRect(drawX + 11 + bodyLean * 0.5, drawY + headBob + 18, 18, 3);
        
        // –í–û–õ–û–°–´ —Å —Ü–≤–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        let hairColor = this.name === "Tom.J" ? '#8B4513' : '#4169E1';
        ctx.fillStyle = hairColor;
        ctx.fillRect(drawX + 8 + bodyLean * 0.3, drawY - 3 + headBob, 24, 10);
        
        // –ë–ª–∏–∫–∏ –Ω–∞ –≤–æ–ª–æ—Å–∞—Ö
        ctx.fillStyle = this.adjustColor(hairColor, 30);
        ctx.fillRect(drawX + 9 + bodyLean * 0.3, drawY - 2 + headBob, 6, 2);
        ctx.fillRect(drawX + 22 + bodyLean * 0.3, drawY - 1 + headBob, 8, 2);
        
        // –ì–õ–ê–ó–ê —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        ctx.fillStyle = 'white';
        let eyeX = drawX + bodyLean * 0.5;
        ctx.fillRect(eyeX + 12, drawY + 5 + headBob, 4, 4);
        ctx.fillRect(eyeX + 24, drawY + 5 + headBob, 4, 4);
        
        // –ó—Ä–∞—á–∫–∏
        ctx.fillStyle = this.stunned > 0 ? 'red' : 'black';
        if (this.stunned > 0) {
            // X-–≥–ª–∞–∑–∞ –ø—Ä–∏ –æ–≥–ª—É—à–µ–Ω–∏–∏
            ctx.fillRect(eyeX + 13, drawY + 6 + headBob, 2, 1);
            ctx.fillRect(eyeX + 14, drawY + 5 + headBob, 1, 3);
            ctx.fillRect(eyeX + 25, drawY + 6 + headBob, 2, 1);
            ctx.fillRect(eyeX + 26, drawY + 5 + headBob, 1, 3);
        } else {
            ctx.fillRect(eyeX + 13, drawY + 6 + headBob, 2, 2);
            ctx.fillRect(eyeX + 25, drawY + 6 + headBob, 2, 2);
            
            // –ë–ª–∏–∫–∏ –≤ –≥–ª–∞–∑–∞—Ö
            ctx.fillStyle = 'white';
            ctx.fillRect(eyeX + 13, drawY + 6 + headBob, 1, 1);
            ctx.fillRect(eyeX + 25, drawY + 6 + headBob, 1, 1);
        }
        
        // –†–û–¢
        ctx.fillStyle = 'black';
        if (this.health < 30) {
            // –û—Ç–∫—Ä—ã—Ç—ã–π —Ä–æ—Ç –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ (—Ç—è–∂–µ–ª–æ–µ –¥—ã—Ö–∞–Ω–∏–µ)
            ctx.fillRect(eyeX + 17, drawY + 13 + headBob, 6, 3);
        } else {
            ctx.fillRect(eyeX + 17, drawY + 14 + headBob, 6, 2);
        }
        
        // –¢–ï–õ–û —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        let bodyY = drawY + 20;
        if (!this.isAttacking) {
            bodyY += Math.sin(Date.now() * 0.005) * 1.5;
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ç–µ–ª–∞
        ctx.fillStyle = mainColor;
        ctx.fillRect(drawX + 5 + bodyLean, bodyY, 30, 35);
        
        // –î–µ—Ç–∞–ª–∏ –∫–æ—Å—Ç—é–º–∞
        let detailColor = this.adjustColor(mainColor, -20);
        ctx.fillStyle = detailColor;
        ctx.fillRect(drawX + 10 + bodyLean, bodyY + 5, 20, 3);
        ctx.fillRect(drawX + 15 + bodyLean, bodyY + 15, 10, 2);
        
        // –ü–æ—è—Å
        ctx.fillStyle = '#8B4513';
        ctx.fillRect(drawX + 5 + bodyLean, bodyY + 25, 30, 4);
        
        // –†–£–ö–ò —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.drawArms(ctx, drawX, drawY);
        
        // –ù–û–ì–ò —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.drawLegs(ctx, drawX, drawY);
    }
    
    drawLegs(ctx, drawX, drawY) {
        let legSpread = 0;
        let leftLegOffset = 0;
        let rightLegOffset = 0;
        let legBend = 0;
        
        if (this.isAttacking && this.attackType === 'heavy') {
            legSpread = this.attackProgress * 4;
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã
        if (this.walkCycle > 0 && Math.abs(this.velocityX) > 0.5) {
            leftLegOffset = Math.sin(this.walkCycle) * 5;
            rightLegOffset = Math.sin(this.walkCycle + Math.PI) * 5;
            legBend = Math.abs(Math.sin(this.walkCycle)) * 3;
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤ –≤–æ–∑–¥—É—Ö–µ
        if (!this.onGround) {
            if (this.velocityY < 0) {
                // –ü—Ä—ã–∂–æ–∫ –≤–≤–µ—Ä—Ö - –Ω–æ–≥–∏ –ø–æ–¥–∂–∞—Ç—ã
                legBend = 10;
                leftLegOffset = -4;
                rightLegOffset = -4;
            } else {
                // –ü–∞–¥–µ–Ω–∏–µ - –Ω–æ–≥–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—é
                legBend = -6;
                leftLegOffset = 3;
                rightLegOffset = 3;
            }
        }
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—é
        if (this.landingPrep) {
            legBend += 4;
            legSpread += 3;
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —à—Ç–∞–Ω–æ–≤
        let pantsColor = '#000080';
        if (this.name === "Lyron") {
            pantsColor = '#191970';
        }
        
        ctx.fillStyle = pantsColor;
        ctx.fillRect(drawX + 8 - legSpread + leftLegOffset, drawY + 55 + legBend, 12, 20 - legBend);
        ctx.fillRect(drawX + 20 + legSpread + rightLegOffset, drawY + 55 + legBend, 12, 20 - legBend);
        
        // –¢–µ–Ω–∏ –Ω–∞ —à—Ç–∞–Ω–∞—Ö 
        ctx.fillStyle = this.adjustColor(pantsColor, -30);
        ctx.fillRect(drawX + 8 - legSpread + leftLegOffset, drawY + 65 + legBend, 12, 5);
        ctx.fillRect(drawX + 20 + legSpread + rightLegOffset, drawY + 65 + legBend, 12, 5);
        
        // –ë–û–¢–ò–ù–ö–ò —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        ctx.fillStyle = 'black';
        ctx.fillRect(drawX + 6 - legSpread + leftLegOffset, drawY + 75, 16, 8);
        ctx.fillRect(drawX + 18 + legSpread + rightLegOffset, drawY + 75, 16, 8);
        
        // –ü–æ–¥–æ—à–≤—ã
        ctx.fillStyle = '#333';
        ctx.fillRect(drawX + 6 - legSpread + leftLegOffset, drawY + 81, 16, 2);
        ctx.fillRect(drawX + 18 + legSpread + rightLegOffset, drawY + 81, 16, 2);
    }
    
    drawCharacterUI(ctx, drawX, drawY) {
        // –ü–æ–ª–æ—Å–∫–∞ –±–ª–æ–∫–∞
        if (this.isBlocking && this.blockHealth < this.maxBlockHealth) {
            let blockBarWidth = this.width * (this.blockHealth / this.maxBlockHealth);
            
            // –§–æ–Ω –ø–æ–ª–æ—Å–∫–∏ –±–ª–æ–∫–∞ –Ω–µ—Ç
            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';
            ctx.fillRect(drawX - 2, drawY - 10, this.width + 4, 5);
            
            // –°–∞–º–∞ –ø–æ–ª–æ—Å–∫–∞ –±–ª–æ–∫–∞
            ctx.fillStyle = 'rgba(0, 100, 255, 0.8)';
            ctx.fillRect(drawX, drawY - 8, blockBarWidth, 3);
            
            // –†–∞–º–∫–∞
            ctx.strokeStyle = '#00BFFF';
            ctx.lineWidth = 1;
            ctx.strokeRect(drawX, drawY - 8, this.width, 3);
        }
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è
        if (this.balance < 50) {
            let balanceBarWidth = this.width * (this.balance / this.maxBalance);
            
            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';
            ctx.fillRect(drawX - 2, drawY - 15, this.width + 4, 4);
            
            ctx.fillStyle = 'rgba(255, 165, 0, 0.9)';
            ctx.fillRect(drawX, drawY - 14, balanceBarWidth, 2);
            
            ctx.strokeStyle = '#FFA500';
            ctx.lineWidth = 1;
            ctx.strokeRect(drawX, drawY - 14, this.width, 2);
        }
        
        // –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        ctx.fillStyle = 'black';
        ctx.font = 'bold 12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(this.name, drawX + this.width/2 + 1, drawY - 16);
        
        ctx.fillStyle = this.name === "Tom.j" ? '#FFD700' : '#00BFFF';
        ctx.fillText(this.name, drawX + this.width/2, drawY - 17);
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–º–±–æ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π
        if (this.combo > 1) {
            ctx.fillStyle = 'rgba(255, 107, 107, 0.9)';
            ctx.font = 'bold 14px Arial';
            ctx.textAlign = 'center';
            ctx.fillText(`${this.combo}x`, drawX + this.width/2, drawY - 30);
            
            // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –∫–æ–º–±–æ –µ—Å—Ç—å
            ctx.shadowColor = 'rgba(255, 107, 107, 0.8)';
            ctx.shadowBlur = 8;
            ctx.fillText(`${this.combo}x`, drawX + this.width/2, drawY - 30);
            ctx.shadowBlur = 0;
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    adjustColor(hex, amount) {
        const num = parseInt(hex.replace("#", ""), 16);
        const amt = Math.round(2.55 * amount);
        const R = (num >> 16) + amt;
        const G = (num >> 8 & 0x00FF) + amt;
        const B = (num & 0x0000FF) + amt;
        return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
            (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    }
    
    
    // –ó–∞–ø–∞—Å–Ω–æ–π —â–∏—Ç –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    drawFallbackShield(ctx, shieldX, shieldY, shieldWidth, shieldHeight) {
        // –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä—ã–π —â–∏—Ç
        ctx.fillStyle = 'rgba(120, 120, 130, 0.9)';
        ctx.fillRect(shieldX, shieldY, shieldWidth, shieldHeight);
        
        ctx.strokeStyle = 'rgba(200, 200, 210, 1)';
        ctx.lineWidth = 2;
        ctx.strokeRect(shieldX, shieldY, shieldWidth, shieldHeight);
        
        // –ö—Ä–µ—Å—Ç–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ
        ctx.strokeStyle = 'rgba(180, 180, 190, 0.8)';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(shieldX + 4, shieldY + 4);
        ctx.lineTo(shieldX + shieldWidth - 4, shieldY + shieldHeight - 4);
        ctx.moveTo(shieldX + shieldWidth - 4, shieldY + 4);
        ctx.lineTo(shieldX + 4, shieldY + shieldHeight - 4);
        ctx.stroke();
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    drawParryEffects(ctx, shieldX, shieldY, shieldWidth, shieldHeight) {
        ctx.shadowColor = 'rgba(0, 255, 255, 0.9)';
        ctx.shadowBlur = 15;
        
        // –Ø—Ä–∫–∏–π –æ—Ä–µ–æ–ª –≤–æ–∫—Ä—É–≥ —â–∏—Ç–∞
        ctx.strokeStyle = 'rgba(0, 255, 255, 0.8)';
        ctx.lineWidth = 4;
        ctx.strokeRect(shieldX - 3, shieldY - 3, shieldWidth + 6, shieldHeight + 6);
        
        // –ò—Å–∫—Ä—ã –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        for (let i = 0; i < 6; i++) {
            let angle = (Date.now() * 0.01 + i * Math.PI / 3) % (Math.PI * 2);
            let sparkX = shieldX + shieldWidth/2 + Math.cos(angle) * 25;
            let sparkY = shieldY + shieldHeight/2 + Math.sin(angle) * 25;
            
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.fillRect(sparkX - 1, sparkY - 1, 3, 3);
        }
        
        ctx.shadowBlur = 0;
    }
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ —â–∏—Ç–∞ –ø–ª—é—Å
    drawShieldHealthBar(ctx, shieldX, shieldY, shieldWidth) {
        if (this.blockHealth < this.maxBlockHealth) {
            let barWidth = shieldWidth * (this.blockHealth / this.maxBlockHealth);
            
            // –§–æ–Ω –ø–æ–ª–æ—Å–∫–∏
            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
            ctx.fillRect(shieldX, shieldY - 8, shieldWidth, 4);
            
            // –ü–æ–ª–æ—Å–∫–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–æ–Ω–∞
            let barColor = this.blockHealth > 50 ? 'rgba(0, 255, 0, 0.8)' : 'rgba(255, 0, 0, 0.8)';
            ctx.fillStyle = barColor;
            ctx.fillRect(shieldX, shieldY - 8, barWidth, 4);
        }
    }
    
    // –¢–µ–∫—Å—Ç –Ω–∞–¥ —â–∏—Ç–æ–º –µ—Å—Ç—å
    drawShieldText(ctx, shieldX, shieldY, shieldWidth) {
        if (this.isParrying && this.parryWindow > 8) {
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.font = 'bold 10px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('–ü–ê–†–ò–†–û–í–ê–ù–ò–ï!', shieldX + shieldWidth/2, shieldY - 12);
        } else {
            ctx.fillStyle = 'rgba(200, 200, 200, 0.8)';
            ctx.font = 'bold 8px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('üõ°Ô∏è', shieldX + shieldWidth/2, shieldY - 8);
        }
    }
    drawArms(ctx, drawX, drawY) {
        ctx.fillStyle = this.stunned > 0 ? '#E0E0E0' : '#FFDBAC';
        
        let leftArmX = drawX - 2;
        let rightArmX = drawX + 35;
        let armY = drawY + 25;
        let leftFistX = leftArmX + 1;
        let rightFistX = rightArmX + 1;
        let fistY = armY + 25;
        
        if (this.isBlocking) {
            leftArmX = drawX + 8;
            leftFistX = drawX + 10;
            fistY = drawY + 35;
            rightArmX = drawX + 22;
            rightFistX = drawX + 24;
            
            ctx.fillRect(leftArmX, armY, 6, 20);
            ctx.fillRect(rightArmX, armY, 6, 20);
            
            ctx.fillStyle = '#DEB887';
            ctx.fillRect(leftFistX, fistY, 8, 8);
            ctx.fillRect(rightFistX, fistY, 8, 8);
            
            
        } else if (this.isAttacking || this.attackFrame > 0) {
            let punchIntensity = this.attackFrame / 20;
            
            if (this.attackType === 'heavy') {
                punchIntensity = this.attackFrame / 30;
            }
            
            if (this.facingRight) {
                rightArmX = drawX + 35 + (30 * punchIntensity);
                rightFistX = rightArmX + 8;
                fistY = drawY + 30;
                
                ctx.fillRect(leftArmX, armY, 8, 25);
                ctx.fillRect(rightArmX, armY, 8, 25);
                
                ctx.fillStyle = '#DEB887';
                ctx.fillRect(leftFistX, armY + 25, 6, 6);
                
                let fistSize = this.attackType === 'heavy' ? 12 : 10;
                ctx.fillRect(rightFistX, fistY, fistSize, fistSize);
                
            } else {
                leftArmX = drawX - 2 - (30 * punchIntensity);
                leftFistX = leftArmX - 8;
                fistY = drawY + 30;
                
                ctx.fillRect(leftArmX, armY, 8, 25);
                ctx.fillRect(rightArmX, armY, 8, 25);
                
                ctx.fillStyle = '#DEB887';
                let fistSize = this.attackType === 'heavy' ? 12 : 10;
                ctx.fillRect(leftFistX, fistY, fistSize, fistSize);
                ctx.fillRect(rightFistX, armY + 25, 6, 6);
            }
            
        } else {
            ctx.fillRect(leftArmX, armY, 8, 25);
            ctx.fillRect(rightArmX, armY, 8, 25);
            
            ctx.fillStyle = '#DEB887';
            ctx.fillRect(leftFistX, armY + 25, 6, 6);
            ctx.fillRect(rightFistX, armY + 25, 6, 6);
        }
    }
    
    drawAttackEffect(ctx, drawX, drawY) {
        if (!this.isAttacking || this.attackPhase === 'none') return;
        
        let effectIntensity = 0;
        let effectScale = 1;
        
        switch(this.attackPhase) {
            case 'windup':
                effectIntensity = this.attackProgress * 0.3;
                effectScale = 0.5;
                break;
            case 'strike':
                effectIntensity = 0.8 + this.attackProgress * 0.2;
                effectScale = 1 + this.attackProgress * 0.5;
                break;
            case 'recovery':
                effectIntensity = (1 - this.attackProgress) * 0.6;
                effectScale = 1 + (1 - this.attackProgress) * 0.3;
                break;
        }
        
        let effectX, effectY;
        let armExtension = 0;
        
        if (this.attackPhase === 'strike') {
            armExtension = this.attackProgress * 40;
        } else if (this.attackPhase === 'windup') {
            armExtension = -this.attackProgress * 15;
        }
        
        if (this.facingRight) {
            effectX = drawX + this.width + armExtension;
            effectY = drawY + 30;
        } else {
            effectX = drawX - armExtension;
            effectY = drawY + 30;
        }
        
        let primaryColor, secondaryColor, tertiaryColor;
        switch(this.attackType) {
            case 'light':
                primaryColor = [0, 255, 0];
                secondaryColor = [50, 255, 50];
                tertiaryColor = [255, 255, 255];
                break;
            case 'heavy':
                primaryColor = [255, 0, 0];
                secondaryColor = [255, 100, 0];
                tertiaryColor = [255, 255, 0];
                break;
            case 'counter':
                primaryColor = [255, 0, 255];
                secondaryColor = [150, 0, 255];
                tertiaryColor = [255, 255, 255];
                break;
            default:
                primaryColor = [255, 255, 255];
                secondaryColor = [200, 200, 255];
                tertiaryColor = [255, 255, 0];
        }
        
        if (this.attackPhase === 'strike') {
            for (let i = 0; i < 4; i++) {
                let waveProgress = (this.attackProgress + i * 0.2) % 1;
                let waveSize = 20 + waveProgress * 40 * effectScale;
                let waveOpacity = (1 - waveProgress) * effectIntensity * 0.8;
                
                ctx.strokeStyle = `rgba(${primaryColor[0]}, ${primaryColor[1]}, ${primaryColor[2]}, ${waveOpacity})`;
                ctx.lineWidth = 3 + i;
                ctx.beginPath();
                ctx.arc(effectX, effectY, waveSize, 0, 2 * Math.PI);
                ctx.stroke();
            }
        }
        
        let flashSize = 15 * effectIntensity * effectScale;
        ctx.fillStyle = `rgba(${tertiaryColor[0]}, ${tertiaryColor[1]}, ${tertiaryColor[2]}, ${effectIntensity * 0.9})`;
        ctx.beginPath();
        ctx.arc(effectX, effectY, flashSize, 0, 2 * Math.PI);
        ctx.fill();
        
        let particleCount = this.attackType === 'counter' ? 16 : (this.attackType === 'heavy' ? 12 : 8);
        for (let i = 0; i < particleCount; i++) {
            let angle = (i / particleCount) * Math.PI * 2 + (Date.now() * 0.01);
            let distance = (20 + Math.random() * 20) * effectIntensity * effectScale;
            let particleX = effectX + Math.cos(angle) * distance;
            let particleY = effectY + Math.sin(angle) * distance;
            
            let particleSize = (2 + Math.random() * 4) * effectIntensity;
            let particleOpacity = effectIntensity * (0.6 + Math.random() * 0.4);
            
            ctx.fillStyle = `rgba(${secondaryColor[0]}, ${secondaryColor[1]}, ${secondaryColor[2]}, ${particleOpacity})`;
            ctx.beginPath();
            ctx.arc(particleX, particleY, particleSize, 0, 2 * Math.PI);
            ctx.fill();
        }
        
        if ((this.attackType === 'counter' || this.attackType === 'heavy') && this.attackPhase === 'strike') {
            this.screenShake = Math.max(this.screenShake, 8 * effectIntensity);
        }
    }
    
    drawStar(ctx, x, y, radius) {
        ctx.fillStyle = 'yellow';
        ctx.beginPath();
        for (let i = 0; i < 5; i++) {
            let angle = (i * 2 * Math.PI) / 5;
            let xPos = x + Math.cos(angle) * radius;
            let yPos = y + Math.sin(angle) * radius;
            if (i === 0) ctx.moveTo(xPos, yPos);
            else ctx.lineTo(xPos, yPos);
        }
        ctx.closePath();
        ctx.fill();
    }
    
    moveLeft() {
        this.facingRight = false;
        
        // –ü—Ä–æ—Å—Ç–æ–µ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ 
        if (this.onGround) {
            this.velocityX = -this.moveSpeed;
        } else {
            // –í –≤–æ–∑–¥—É—Ö–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ —Å –º–µ–Ω—å—à–µ–π —Å–∏–ª–æ–π
            this.velocityX = Math.max(this.velocityX - 2, -this.moveSpeed * this.airControl);
        }
    }
    
    moveRight() {
        this.facingRight = true;
        
        // –ü—Ä–æ—Å—Ç–æ–µ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (this.onGround) {
            this.velocityX = this.moveSpeed;
        } else {
            // –í –≤–æ–∑–¥—É—Ö–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ —Å –º–µ–Ω—å—à–µ–π —Å–∏–ª–æ–π
            this.velocityX = Math.min(this.velocityX + 2, this.moveSpeed * this.airControl);
        }
    }
    
    jump() {
        // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä—ã–∂–æ–∫ —Ç–æ–ª—å–∫–æ —Å –∑–µ–º–ª–∏ –∏–ª–∏ –∫–æ–π–æ—Ç-—Ç–∞–π–º
        if (this.onGround || this.coyoteTime > 0) {
            this.performJump();
        } else {
            // –ë—É—Ñ–µ—Ä –ø—Ä—ã–∂–∫–∞ - –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –ø—Ä—ã–∂–æ–∫ —á—É—Ç—å —Ä–∞–Ω—å—à–µ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
            this.jumpBuffer = 8;
        }
    }
    
    performJump() {
        this.velocityY = -this.jumpPower;
        this.onGround = false;
        this.coyoteTime = 0;
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä—ã–∂–æ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        if (this.velocityX < -1) {
            this.velocityX -= 4; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–ª–µ–≤–æ
        } else if (this.velocityX > 1) {
            this.velocityX += 4; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–ø—Ä–∞–≤–æ
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä—ã–∂–∫–∞
        this.jumpEffect = 10;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø—Ä—ã–∂–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏
    checkJumpBuffer() {
        if (this.jumpBuffer > 0 && this.onGround) {
            this.performJump();
            this.jumpBuffer = 0;
        }
    }
    
    block() {
        this.isBlocking = true;
        this.isParrying = true;
        this.parryWindow = 12;
        return true;
    }
    
    stopBlock() {
        this.isBlocking = false;
    }
    
    lightAttack(target) {
        if (this.lightAttackCooldown > 0) return false;
        
        this.isAttacking = true;
        this.attackType = 'light';
        this.attackPhase = 'windup';
        this.attackProgress = 0;
        this.lightAttackCooldown = 20;
        this.attackFrame = 15;
        
        setTimeout(() => {
            if (this.attackType === 'light') {
                this.isAttacking = false;
                this.attackType = 'none';
                this.attackPhase = 'none';
            }
        }, 250);
        
        return this.executeAttack(target, 15, 75, 'light');
    }
    
    heavyAttack(target) {
        if (this.heavyAttackCooldown > 0) return false;
        
        this.isAttacking = true;
        this.attackType = 'heavy';
        this.attackPhase = 'windup';
        this.attackProgress = 0;
        this.heavyAttackCooldown = 60;
        this.attackFrame = 25;
        
        setTimeout(() => {
            if (this.attackType === 'heavy') {
                this.isAttacking = false;
                this.attackType = 'none';
                this.attackPhase = 'none';
            }
        }, 420);
        
        return this.executeAttack(target, 25, 85, 'heavy');
    }
    
    counterAttack(target) {
        if (this.canCounter <= 0) return false;
        
        this.isAttacking = true;
        this.isCountering = true;
        this.attackType = 'counter';
        this.attackPhase = 'windup';
        this.attackProgress = 0;
        this.attackFrame = 20;
        this.canCounter = 0;
        
        setTimeout(() => {
            this.isAttacking = false;
            this.isCountering = false;
            this.attackType = 'none';
            this.attackPhase = 'none';
        }, 330);
        
        return this.executeAttack(target, 35, 90, 'counter');
    }
    
    executeAttack(target, baseDamage, range, attackType) {
        let distance = Math.abs(this.x - target.x);
        if (distance > range) return false;
        
        if (target.isBlocking) {
            if (target.parryWindow > 0 && target.isParrying) {
                console.log(`‚ö° –ü–ê–†–ò–†–û–í–ê–ù–ò–ï! ${target.name} –ø–∞—Ä–∏—Ä–æ–≤–∞–ª –∞—Ç–∞–∫—É ${this.name}!`);
                
                target.lastParryTime = Date.now();
                target.canCounter = 60;
                this.vulnerableToCounter = 60;
                
                this.stunned = 15;
                this.lightAttackCooldown = Math.max(this.lightAttackCooldown, 30);
                this.heavyAttackCooldown = Math.max(this.heavyAttackCooldown, 30);
                
                target.screenShake = 8;
                this.screenShake = 5;
                
                return 'parried';
            } else {
                let damage = Math.floor(baseDamage * 0.3);
                target.takeDamage(damage);
                target.blockHealth -= 10;
                
                console.log(`üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É–¥–∞—Ä! –£—Ä–æ–Ω: ${damage}`);
                return 'blocked';
            }
        }
        
        let damage = baseDamage;
        
        if (attackType === 'counter' && target.vulnerableToCounter > 0) {
            damage = Math.floor(damage * 1.5);
            target.stunned = 30;
            target.screenShake = 15;
            console.log(`üí• –ö–û–ù–¢–†–ê–¢–ê–ö–ê! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: ${damage}!`);
        }
        
        target.takeDamage(damage);
        
        if (attackType === 'heavy') {
            target.balance -= 15;
            target.knockback = this.facingRight ? 8 : -8;
        }
        
        if (Date.now() - this.lastAttackTime < (attackType === 'counter' ? 2500 : 1500)) {
            this.combo++;
        } else {
            this.combo = 1;
        }
        this.lastAttackTime = Date.now();
        
        return 'hit';
    }
    
    takeDamage(amount) {
        this.health -= amount;
        if (this.health < 0) this.health = 0;
        
        this.hitEffect = 10;
        this.velocityX += this.facingRight ? -3 : 3;
    }
}

// ====== –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–ï–†–°–û–ù–ê–ñ–ï–ô ======



// ====== –ò–ò –°–ò–°–¢–ï–ú–ê ======

class BotAI {
    constructor(bot, target) {
        this.bot = bot;
        this.target = target;
        this.state = 'APPROACH';
        this.stateTimer = 0;
        this.aggressiveness = 0.4;
        this.reactionTime = 30; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        this.status = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...';
        this.actionDelay = 0;
        
        // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ò–ò
        this.lastPlayerPosition = { x: target.x, y: target.y };
        this.playerMovementPattern = [];
        this.consecutiveAttacks = 0;
        this.lastStateChange = 0;
        this.comboCooldown = 0;
        this.dodgeTimer = 0;
        this.aggressionBoost = 0;
        this.defensiveTimer = 0;
        
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        this.decisionCounter = 0;
        this.actionCounter = 0;
        this.forceActionTimer = 0;
    }
    
    update() {
        this.stateTimer++;
        this.decisionCounter++;
        this.actionCounter++;
        this.forceActionTimer++;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∂–¥—ã–µ 20 –∫–∞–¥—Ä–æ–≤
        if (this.forceActionTimer >= 20) {
            this.forceAction();
            this.forceActionTimer = 0;
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
        if (this.actionDelay > 0) {
            this.actionDelay--;
            return;
        }
        
        // –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è
        if (this.decisionCounter >= Math.max(15, this.reactionTime / 2)) {
            this.makeDecision();
            this.decisionCounter = 0;
        }
        
        // –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if (this.actionCounter >= Math.max(8, this.reactionTime / 4)) {
            this.executeState();
            this.actionCounter = 0;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã
        this.updateTimers();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥—Ä–æ–∫–∞
        this.analyzePlayerMovement();
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
        this.updateAggressiveness();
    }
    
    forceAction() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –±–æ—Ç —Å–ª–∏—à–∫–æ–º –ø–∞—Å—Å–∏–≤–µ–Ω
        const distance = Math.abs(this.bot.x - this.target.x);
        
        if (this.state === 'APPROACH' && distance > 200) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
            if (this.bot.x < this.target.x) {
                this.bot.moveRight();
            } else {
                this.bot.moveLeft();
            }
            
            // –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
            if (Math.random() < 0.1 && this.bot.onGround) {
                this.bot.jump();
            }
        }
        
        if (this.state === 'ATTACK' && distance < 100 && this.bot.lightAttackCooldown === 0) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞
            this.performAttack();
        }
    }
    
    updateTimers() {
        if (this.comboCooldown > 0) this.comboCooldown--;
        if (this.dodgeTimer > 0) this.dodgeTimer--;
        if (this.defensiveTimer > 0) this.defensiveTimer--;
        if (this.aggressionBoost > 0) this.aggressionBoost--;
    }
    
    analyzePlayerMovement() {
        const currentPos = { x: this.target.x, y: this.target.y };
        const movement = {
            dx: currentPos.x - this.lastPlayerPosition.x,
            dy: currentPos.y - this.lastPlayerPosition.y,
            timestamp: Date.now()
        };
        
        this.playerMovementPattern.push(movement);
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–≤–∏–∂–µ–Ω–∏–π
        if (this.playerMovementPattern.length > 10) {
            this.playerMovementPattern.shift();
        }
        
        this.lastPlayerPosition = currentPos;
    }
    
    updateAggressiveness() {
        let baseAggression = this.aggressiveness;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏—é –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
        if (this.target.health < 40) {
            baseAggression += 0.3;
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏—é –ø—Ä–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º —Ö–æ—Ä–æ—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        if (this.bot.health > 70) {
            baseAggression += 0.2;
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Å—Ç –∞–≥—Ä–µ—Å—Å–∏–∏
        if (this.aggressionBoost > 0) {
            baseAggression += 0.4;
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏—é –ø—Ä–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ
        if (this.bot.health < 30) {
            baseAggression -= 0.2;
        }
        
        this.currentAggressiveness = Math.max(0.1, Math.min(1.0, baseAggression));
    }
    
    makeDecision() {
        const playerVelocity = Math.abs(this.target.velocityX);
        const predictedPlayerX = this.target.x + (this.target.velocityX * 15);
        const distance = Math.abs(this.bot.x - predictedPlayerX);
        const actualDistance = Math.abs(this.bot.x - this.target.x);
        const botHealth = this.bot.health / this.bot.maxHealth;
        const targetHealth = this.target.health / this.target.maxHealth;
        const botBalance = this.bot.balance / this.bot.maxBalance;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç–∞–∫—É –∏–≥—Ä–æ–∫–∞ —Å —É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        if (this.target.isAttacking && actualDistance < 150) {
            if (Math.random() < 0.7) {
                this.setState('DEFEND');
                return;
            }
        }
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        if ((botHealth < 0.3 || this.bot.stunned > 0 || botBalance < 0.3) && actualDistance < 200) {
            this.setState('RETREAT');
            this.aggressionBoost = 60; // –ë—É—Å—Ç –∞–≥—Ä–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è
            return;
        }
        
        // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
        if (this.bot.canCounter > 0 && actualDistance < 120) {
            this.setState('COUNTER');
            return;
        }
        
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
        if (actualDistance < 100 && this.bot.lightAttackCooldown < 5 && this.bot.stunned === 0) {
            let shouldAttack = Math.random() < this.currentAggressiveness;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞—Ç–∞–∫–∏
            if (targetHealth < 0.4) shouldAttack = true; // –î–æ–±–∏–≤–∞–µ–º —Å–ª–∞–±–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            if (this.bot.combo > 0) shouldAttack = true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–º–±–æ
            if (this.target.isBlocking && Math.random() < 0.3) shouldAttack = true; // –ê—Ç–∞–∫—É–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ
            
            if (shouldAttack) {
                this.setState('ATTACK');
                return;
            }
        }
        
        // –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∞—Ç–∞–∫–∞
        if (actualDistance < 150 && actualDistance > 60) {
            if (Math.random() < this.currentAggressiveness * 0.8) {
                this.setState('APPROACH');
            } else {
                this.setState('DEFEND');
            }
            return;
        }
        
        // –î–∞–ª—å–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è - –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        if (actualDistance > 150) {
            this.setState('APPROACH');
            return;
        }
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        this.setState('APPROACH');
    }
    
    setState(newState) {
        if (this.state !== newState) {
            this.state = newState;
            this.stateTimer = 0;
            this.lastStateChange = Date.now();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è UI
            switch(newState) {
                case 'APPROACH':
                    this.status = '–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è üèÉ‚Äç‚ôÇÔ∏è';
                    break;
                case 'ATTACK':
                    this.status = '–ê—Ç–∞–∫—É–µ—Ç! ‚ö°';
                    break;
                case 'DEFEND':
                    this.status = '–ó–∞—â–∏—â–∞–µ—Ç—Å—è üõ°Ô∏è';
                    break;
                case 'RETREAT':
                    this.status = '–û—Ç—Å—Ç—É–ø–∞–µ—Ç üèÉ‚Äç‚ôÇÔ∏èüí®';
                    break;
                case 'COUNTER':
                    this.status = '–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞! üí•';
                    break;
            }
        }
    }
    
    executeState() {
        const distance = Math.abs(this.bot.x - this.target.x);
        const targetDirection = this.bot.x < this.target.x ? 1 : -1;
        
        switch(this.state) {
            case 'APPROACH':
                this.executeApproach(distance, targetDirection);
                break;
                
            case 'ATTACK':
                this.executeAttack(distance);
                break;
                
            case 'DEFEND':
                this.executeDefend(distance);
                break;
                
            case 'RETREAT':
                this.executeRetreat(distance, targetDirection);
                break;
                
            case 'COUNTER':
                this.executeCounter(distance);
                break;
        }
    }
    
    executeApproach(distance, targetDirection) {
        this.bot.stopBlock();
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
        const predictedX = this.target.x + (this.target.velocityX * 10);
        
        if (this.bot.x < predictedX - 20) {
            this.bot.moveRight();
        } else if (this.bot.x > predictedX + 20) {
            this.bot.moveLeft();
        }
        
        // –ü—Ä—ã–∂–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏ –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è –∞—Ç–∞–∫
        if (this.bot.onGround) {
            let jumpChance = 0.03;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø—Ä—ã–∂–∫–∞ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
            if (this.target.isAttacking && distance < 120) {
                jumpChance = 0.4;
            }
            
            // –ü—Ä—ã–∂–æ–∫ –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
            if (distance > 100 && Math.abs(this.bot.velocityX) < 2) {
                jumpChance = 0.2;
            }
            
            if (Math.random() < jumpChance) {
                this.bot.jump();
            }
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞—Ç–∞–∫–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏
        if (distance < 90 && this.bot.lightAttackCooldown < 10) {
            this.setState('ATTACK');
        }
    }
    
    executeAttack(distance) {
        this.bot.stopBlock();
        
        // –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if (this.bot.canCounter > 0 && distance < 100) {
            if (this.bot.counterAttack(this.target)) {
                console.log(`ü§ñ ${this.bot.name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ö–û–ù–¢–†–ê–¢–ê–ö–£! –£—Ä–æ–Ω: 35!`);
                this.consecutiveAttacks++;
                return;
            }
        }
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç–∞–∫–∏
        this.performAttack();
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –∞—Ç–∞–∫–∏
        if (distance > 80) {
            if (this.bot.x < this.target.x) {
                this.bot.moveRight();
            } else {
                this.bot.moveLeft();
            }
        }
        
        // –ö–æ–º–±–æ-–∞—Ç–∞–∫–∏
        if (this.bot.combo > 0 && this.comboCooldown === 0 && Math.random() < 0.7) {
            this.comboCooldown = 20;
            setTimeout(() => this.performAttack(), 300);
        }
    }
    
    performAttack() {
        const distance = Math.abs(this.bot.x - this.target.x);
        
        if (distance > 100) return;
        
        let attackSuccess = false;
        
        // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏
        if (Math.random() < 0.3 && this.bot.heavyAttackCooldown === 0) {
            // –¢—è–∂–µ–ª–∞—è –∞—Ç–∞–∫–∞ (30% —à–∞–Ω—Å)
            attackSuccess = this.bot.heavyAttack(this.target);
            if (attackSuccess) {
                console.log(`ü§ñ ${this.bot.name} –Ω–∞–Ω–æ—Å–∏—Ç –¢–Ø–ñ–ï–õ–´–ô —É–¥–∞—Ä! –£—Ä–æ–Ω: 25, –ö–æ–º–±–æ: ${this.bot.combo}`);
                this.consecutiveAttacks++;
            }
        } else if (this.bot.lightAttackCooldown === 0) {
            // –ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞
            attackSuccess = this.bot.lightAttack(this.target);
            if (attackSuccess) {
                console.log(`ü§ñ ${this.bot.name} –Ω–∞–Ω–æ—Å–∏—Ç –±—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä! –£—Ä–æ–Ω: 15, –ö–æ–º–±–æ: ${this.bot.combo}`);
                this.consecutiveAttacks++;
            }
        }
        
        // –ü–æ—Å–ª–µ 3 –∞—Ç–∞–∫ –ø–æ–¥—Ä—è–¥ - –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—â–∏—Ç–Ω–∞—è –ø–∞—É–∑–∞
        if (this.consecutiveAttacks >= 3) {
            this.setState('DEFEND');
            this.defensiveTimer = 30;
            this.consecutiveAttacks = 0;
        }
    }
    
    executeDefend(distance) {
        this.bot.block();
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –∑–∞—â–∏—Ç—ã
        let defendTime = this.target.isAttacking ? 40 : 20;
        
        if (this.defensiveTimer > 0) {
            defendTime = this.defensiveTimer;
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞—Ç–∞–∫–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—â–∏—Ç—ã
        if (this.stateTimer > defendTime) {
            if (distance < 100 && Math.random() < 0.8) {
                this.setState('ATTACK');
            } else {
                this.setState('APPROACH');
            }
        }
        
        // –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –ø–æ—Å–ª–µ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.bot.canCounter > 0) {
            this.setState('COUNTER');
        }
    }
    
    executeRetreat(distance, targetDirection) {
        this.bot.stopBlock();
        
        // –û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
        if (targetDirection > 0) {
            this.bot.moveLeft();
        } else {
            this.bot.moveRight();
        }
        
        // –ü—Ä—ã–∂–∫–∏ –ø—Ä–∏ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–∏
        if (Math.random() < 0.08 && this.bot.onGround) {
            this.bot.jump();
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞—â–∏—Ç–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        if (distance > 150) {
            this.setState('DEFEND');
        }
        
        // –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if (this.bot.canCounter > 0 && distance < 120) {
            this.setState('COUNTER');
        }
    }
    
    executeCounter(distance) {
        if (this.bot.canCounter > 0 && distance < 100) {
            if (this.bot.counterAttack(this.target)) {
                console.log(`ü§ñ ${this.bot.name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ú–û–©–ù–£–Æ –ö–û–ù–¢–†–ê–¢–ê–ö–£! –£—Ä–æ–Ω: 35!`);
                this.setState('ATTACK'); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
            }
        } else {
            this.setState('ATTACK');
        }
    }
    
    getStatus() {
        return this.status;
    }
}

// ====== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ======

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

let player, bot, botAI;
let gameRunning = false;
let gameStarted = false;

// üéÆ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ò–ì–†–´
function initializeGame() {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞—Ä–µ–Ω—É
    selectRandomArena();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—Ä–µ–Ω—ã
    loadBackground();
    
    const selectedCharacter = CHARACTERS[selectedCharIndex];
    
    player = new Fighter(
        100, 300, 
        selectedCharacter.color,
        selectedCharacter.name,
        null,
        true
    );
    
    // –°–õ–£–ß–ê–ô–ù–´–ô –í–´–ë–û–† –ü–ï–†–°–û–ù–ê–ñ–ê –î–õ–Ø –ë–û–¢–ê
    let botCharacterIndex;
    if (Math.random() < 0.5) {
        // 50% —à–∞–Ω—Å - –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        botCharacterIndex = selectedCharIndex === 0 ? 1 : 0;
    } else {
        // 50% —à–∞–Ω—Å - —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        botCharacterIndex = Math.floor(Math.random() * CHARACTERS.length);
    }
    
    const botCharacter = CHARACTERS[botCharacterIndex];
    
    bot = new Fighter(
        650, 300,
        botCharacter.color,
        botCharacter.name,
        null,
        true
    );
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –±–æ—Ç–∞
    preloadBotImages(botCharacterIndex);
    
    botAI = new BotAI(bot, player);
    gameRunning = true;
    gameStarted = true;
    
    console.log(`üéÆ ${selectedCharacter.name} VS ${botCharacter.name}`);
    console.log(`üèüÔ∏è –ê—Ä–µ–Ω–∞: ${currentArenaName}`);
}


function startGame(difficulty) {
    console.log(`üöÄ === –ù–ê–ß–ê–õ–û –≠–ü–ò–ß–ï–°–ö–û–ì–û –ë–û–Ø === üöÄ`);
    console.log(`‚öîÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${difficulty.toUpperCase()}`);
    
    document.getElementById('difficultyMenu').style.display = 'none';
    document.getElementById('gameArea').style.display = 'block';
    
    initializeGame();
    changeDifficulty(difficulty);
    gameLoop();
    
    console.log('üéÆ === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–ò–ù–û–ú === üéÆ');
    console.log('   üèÉ‚Äç‚ôÇÔ∏è A/D - –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ');
    console.log('   ü¶ò W - –º–æ—â–Ω—ã–π –ø—Ä—ã–∂–æ–∫, S - –∑–∞—â–∏—Ç–Ω–∞—è —Å—Ç–æ–π–∫–∞');
    console.log('   ‚ö° –õ–ö–ú - –±—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä (15 —É—Ä–æ–Ω–∞)');
    console.log('   üí• –ü–ö–ú - —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä (25 —É—Ä–æ–Ω–∞)');
    console.log('üèÜ –°–¢–ê–ù–¨–¢–ï –ß–ï–ú–ü–ò–û–ù–û–ú –ê–†–ï–ù–´!');
    
    document.body.setAttribute('tabindex', '0');
    document.body.focus();
}

function backToMenu() {
    gameRunning = false;
    gameStarted = false;
    document.getElementById('characterMenu').style.display = 'block';
    document.getElementById('difficultyMenu').style.display = 'none';
    document.getElementById('gameArea').style.display = 'none';
    console.log('üìã === –í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ –í–´–ë–û–†–ê –ü–ï–†–°–û–ù–ê–ñ–ê === üìã');
    console.log('üèüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –≤–æ–∏–Ω–∞...');
}
// ====== –£–ü–†–ê–í–õ–ï–ù–ò–ï ======

document.addEventListener('keydown', function(e) {
    const keyCode = e.keyCode || e.which;
    
    if (!gameRunning || !gameStarted || !player) {
        return;
    }
    
    switch(keyCode) {
        case 65: // A
            player.moveLeft();
            showKeyPress('A');
            break;
        case 68: // D
            player.moveRight();
            showKeyPress('D');
            break;
        case 87: // W
            player.jump();
            showKeyPress('W');
            break;
        case 83: // S
            player.block();
            showKeyPress('S');
            break;
    }
    
    e.preventDefault();
});

document.addEventListener('keyup', function(e) {
    const keyCode = e.keyCode || e.which;
    
    if (!gameRunning || !gameStarted || !player) {
        return;
    }
    
    switch(keyCode) {
        case 83: // S
            if (player && player.stopBlock) {
                player.stopBlock();
            }
            break;
    }
});

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–´–®–¨–Æ
canvas.addEventListener('mousedown', function(e) {
    if (!gameRunning || !gameStarted || !player || !bot) {
        showKeyPress('–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
        return;
    }
    
    e.preventDefault();
    e.stopPropagation();
    
    if (e.button === 0) { 
        let hitResult;
        
        if (player.canCounter > 0) {
            hitResult = player.counterAttack(bot);
            if (hitResult === 'hit') {
                showKeyPress('–õ–ö–ú - –ö–û–ù–¢–†–ê–¢–ê–ö–ê –ü–û–ü–ê–õ–ê! 35 –£–†–û–ù–ê!');
                console.log(`üí• –ö–û–ù–¢–†–ê–¢–ê–ö–ê! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: 35, –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${bot.health}`);
                
                canvas.classList.add('counter-attack-effect');
                setTimeout(() => {
                    canvas.classList.remove('counter-attack-effect');
                }, 500);
            }
        } else {
            hitResult = player.lightAttack(bot);
            if (hitResult === 'hit') {
                showKeyPress('–õ–ö–ú - –ë–´–°–¢–†–´–ô –£–î–ê–† –ü–û–ü–ê–õ!');
                console.log(`‚ö° –ë—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: 15, –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${bot.health}`);
            } else if (hitResult === 'parried') {
                showKeyPress('–õ–ö–ú - –ü–ê–†–ò–†–û–í–ê–ù!');
                console.log(`üõ°Ô∏è –£–¥–∞—Ä –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω! –ë–æ—Ç –º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å!`);
            } else if (hitResult === 'blocked') {
                showKeyPress('–õ–ö–ú - –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù');
                console.log(`üõ°Ô∏è –£–¥–∞—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –£—Ä–æ–Ω: 5`);
            } else {
                showKeyPress('–õ–ö–ú - –ú–ò–ú–û');
                console.log(`‚ùå –ë—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä –Ω–µ –ø–æ–ø–∞–ª`);
            }
            
            if (hitResult === 'hit' || hitResult === 'blocked') {
                canvas.classList.add('light-attack-effect');
                setTimeout(() => {
                    canvas.classList.remove('light-attack-effect');
                }, 150);
            } else if (hitResult === 'parried') {
                canvas.classList.add('parry-effect');
                setTimeout(() => {
                    canvas.classList.remove('parry-effect');
                }, 300);
            }
        }
        
    } else if (e.button === 2) { 
        const hitResult = player.heavyAttack(bot);
        
        if (hitResult === 'hit') {
            showKeyPress('–ü–ö–ú - –¢–Ø–ñ–ï–õ–´–ô –£–î–ê–† –ü–û–ü–ê–õ!');
            console.log(`üí• –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: 25, –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${bot.health}`);
        } else if (hitResult === 'parried') {
            showKeyPress('–ü–ö–ú - –ü–ê–†–ò–†–û–í–ê–ù!');
            console.log(`üõ°Ô∏è –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω! –ë–æ—Ç –º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å!`);
        } else if (hitResult === 'blocked') {
            showKeyPress('–ü–ö–ú - –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù');
            console.log(`üõ°Ô∏è –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –£—Ä–æ–Ω: 8`);
        } else {
            showKeyPress('–ü–ö–ú - –ú–ò–ú–û');
            console.log(`‚ùå –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –Ω–µ –ø–æ–ø–∞–ª`);
        }
        
        if (hitResult === 'hit' || hitResult === 'blocked') {
            canvas.classList.add('heavy-attack-effect');
            setTimeout(() => {
                canvas.classList.remove('heavy-attack-effect');
            }, 400);
        } else if (hitResult === 'parried') {
            canvas.classList.add('parry-effect');
            setTimeout(() => {
                canvas.classList.remove('parry-effect');
            }, 300);
        }
    }
    
    return false;
});

document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    return false;
});

canvas.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    return false;
});

canvas.addEventListener('mouseenter', function() {
    canvas.style.cursor = 'crosshair';
});

canvas.addEventListener('mouseleave', function() {
    canvas.style.cursor = 'default';
});

function showKeyPress(key) {
    const keyDisplay = document.getElementById('keyDisplay');
    if (keyDisplay) {
        let bgColor = '#FFD700';
        let textColor = '#000';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if (key.includes('–ö–û–ù–¢–†–ê–¢–ê–ö–ê')) {
            bgColor = 'linear-gradient(45deg, #FF00FF, #9932CC)';
            textColor = '#FFF';
        } else if (key.includes('–ü–ê–†–ò–†–û–í–ê–ù')) {
            bgColor = 'linear-gradient(45deg, #00FFFF, #00BFFF)';
            textColor = '#000';
        } else if (key.includes('–ü–û–ü–ê–õ')) {
            bgColor = 'linear-gradient(45deg, #00FF00, #32CD32)';
            textColor = '#000';
        } else if (key.includes('–ú–ò–ú–û')) {
            bgColor = 'linear-gradient(45deg, #FF6B6B, #FF4444)';
            textColor = '#FFF';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        keyDisplay.innerHTML = `<span style="font-weight: 700;">${key}</span>`;
        keyDisplay.style.background = bgColor;
        keyDisplay.style.color = textColor;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤–∏–¥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ë–ï–ó –ò–ù–°–¢–†–£–ö–¶–ò–ô
        setTimeout(() => {
            keyDisplay.style.background = 'linear-gradient(145deg, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.6))';
            keyDisplay.style.color = '#fff';
            keyDisplay.innerHTML = '<span style="font-weight: 600;">–ì–æ—Ç–æ–≤ –∫ –±–æ—é!</span>';
        }, 1000);
    }
}

// ====== –ò–ì–†–û–í–û–ô –¶–ò–ö–õ ======

function updateUI() {
    const playerHealthEl = document.getElementById('playerHealth');
    const botHealthEl = document.getElementById('botHealth');
    const playerHealthText = document.getElementById('playerHealthText');
    const botHealthText = document.getElementById('botHealthText');
    const playerComboEl = document.getElementById('playerCombo');
    const botComboEl = document.getElementById('botCombo');
    const botStatusEl = document.getElementById('botStatus');
    
    if (playerHealthEl && player) {
        const healthPercent = Math.max(0, Math.floor(player.health / player.maxHealth * 100));
        playerHealthEl.style.width = healthPercent + '%';
        
        if (playerHealthText) {
            playerHealthText.textContent = healthPercent + '%';
            if (healthPercent > 60) {
                playerHealthText.style.color = '#00FF00';
            } else if (healthPercent > 30) {
                playerHealthText.style.color = '#FFD700';
            } else {
                playerHealthText.style.color = '#FF4444';
                playerHealthText.style.animation = 'criticalHealth 1s ease-in-out infinite';
            }
        }
    }
    
    if (botHealthEl && bot) {
        const healthPercent = Math.max(0, Math.floor(bot.health / bot.maxHealth * 100));
        botHealthEl.style.width = healthPercent + '%';
        
        if (botHealthText) {
            botHealthText.textContent = healthPercent + '%';
            if (healthPercent > 60) {
                botHealthText.style.color = '#00FF00';
            } else if (healthPercent > 30) {
                botHealthText.style.color = '#FFD700';
            } else {
                botHealthText.style.color = '#FF4444';
                botHealthText.style.animation = 'criticalHealth 1s ease-in-out infinite';
            }
        }
    }
    
    if (playerComboEl && player) {
        if (player.combo > 1) {
            playerComboEl.innerHTML = `
                <div style="font-size: 1.4rem; margin-bottom: 5px;">üî• –ö–û–ú–ë–û: ${player.combo} üî•</div>
                <div style="font-size: 0.9rem; opacity: 0.8;">–ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –∞–∫—Ç–∏–≤–µ–Ω!</div>
            `;
            playerComboEl.style.animation = 'comboGlow 0.5s ease-in-out infinite';
        } else {
            playerComboEl.innerHTML = '';
            playerComboEl.style.animation = 'none';
        }
    }
    
    if (botComboEl && bot) {
        if (bot.combo > 1) {
            botComboEl.innerHTML = `
                <div style="font-size: 1.4rem; margin-bottom: 5px;">ü§ñ –ö–û–ú–ë–û: ${bot.combo} ü§ñ</div>
                <div style="font-size: 0.9rem; opacity: 0.8;">–ò–ò –∞—Ç–∞–∫—É–µ—Ç —Å–µ—Ä–∏–µ–π!</div>
            `;
            botComboEl.style.animation = 'comboGlow 0.5s ease-in-out infinite';
        } else {
            botComboEl.innerHTML = '';
            botComboEl.style.animation = 'none';
        }
    }
    
    if (botStatusEl && botAI) {
        const status = botAI.getStatus();
        let statusIcon = 'ü§î';
        let statusColor = '#FFD700';
        
        switch(botAI.state) {
            case 'APPROACH':
                statusIcon = 'üèÉ‚Äç‚ôÇÔ∏è';
                statusColor = '#00BFFF';
                break;
            case 'ATTACK':
                statusIcon = '‚ö°';
                statusColor = '#FF4444';
                break;
            case 'DEFEND':
                statusIcon = 'üõ°Ô∏è';
                statusColor = '#00FF7F';
                break;
            case 'RETREAT':
                statusIcon = 'üèÉ‚Äç‚ôÇÔ∏èüí®';
                statusColor = '#FFA500';
                break;
        }
        
        botStatusEl.innerHTML = `${statusIcon} ${status}`;
        botStatusEl.style.color = statusColor;
        
        if (botAI.state === 'ATTACK') {
            botStatusEl.style.animation = 'attackPulse 0.5s ease-in-out infinite';
        } else if (botAI.state === 'DEFEND') {
            botStatusEl.style.animation = 'defendGlow 1s ease-in-out infinite';
        } else {
            botStatusEl.style.animation = 'statusFloat 2s ease-in-out infinite';
        }
    }
}

function gameLoop() {
    if (!gameRunning || !gameStarted) {
        return;
    }
    
    if (!player || !bot || !botAI) {
        return;
    }
    
    // ‚ú® –ó–ê–ú–ï–ù–Ø–ï–ú ctx.clearRect –ù–ê:
    drawBackground(ctx);
    
    player.update();
    bot.update();
    botAI.update();
    
    player.draw(ctx);
    bot.draw(ctx);
    
    updateUI();
    
    if (player.health <= 0) {
        gameRunning = false;
        showGameEnd(`${bot.name} WINS!`, 'defeat');
        return;
    }
    
    if (bot.health <= 0) {
        gameRunning = false;
        showGameEnd('–ò–ì–†–û–ö WINS!', 'victory');
        return;
    }
    
    requestAnimationFrame(gameLoop);
}

function showGameEnd(message, type) {
    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    let color, shadowColor, emoji;
    if (type === 'victory') {
        color = 'linear-gradient(45deg, #FFD700, #FFA500)';
        shadowColor = 'rgba(255, 215, 0, 0.8)';
        emoji = 'üèÜ';
    } else {
        color = 'linear-gradient(45deg, #FF6B6B, #FF4444)';
        shadowColor = 'rgba(255, 107, 107, 0.8)';
        emoji = 'üíÄ';
    }
    
    const endScreen = document.createElement('div');
    endScreen.innerHTML = `
        <div style="
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            animation: fadeIn 0.5s ease-out;
        ">
            <div style="
                font-family: 'Orbitron', sans-serif;
                font-size: 4rem;
                font-weight: 900;
                background: ${color};
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
                text-align: center;
                margin-bottom: 20px;
                animation: victoryPulse 2s ease-in-out infinite;
                text-shadow: 0 0 50px ${shadowColor};
            ">
                ${emoji} ${message} ${emoji}
            </div>
            <div style="
                font-family: 'Rajdhani', sans-serif;
                font-size: 1.5rem;
                color: #FFD700;
                margin-bottom: 30px;
                animation: fadeInUp 1s ease-out 0.5s both;
            ">
                PRESS RESTART FOR A NEW GAME
            </div>
            <button onclick="this.parentElement.parentElement.remove(); restartGame();" style="
                background: linear-gradient(145deg, #4CAF50, #45A049);
                color: white;
                border: none;
                padding: 15px 30px;
                border-radius: 15px;
                font-family: 'Orbitron', sans-serif;
                font-size: 1.2rem;
                font-weight: 700;
                cursor: pointer;
                animation: buttonFloat 3s ease-in-out infinite;
                box-shadow: 0 10px 25px rgba(76, 175, 80, 0.5);
                transition: all 0.3s ease;
            " onmouseover="this.style.transform='scale(1.1) translateY(-5px)'" onmouseout="this.style.transform='scale(1) translateY(0)'">
                üîÑ –ò–ì–†–ê–¢–¨ –°–ù–û–í–ê
            </button>
        </div>
    `;
    
    document.body.appendChild(endScreen);
}

// ====== –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê ======

function restartGame() {
    console.log('üîÑ === –ù–û–í–´–ô –ë–û–ô –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø === üîÑ');
    console.log('‚öîÔ∏è –í–æ–∏–Ω—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ —Å—Ö–≤–∞—Ç–∫–µ...');
    if (gameStarted) {
        const currentDifficulty = getCurrentDifficulty();
        initializeGame();
        changeDifficulty(currentDifficulty);
        gameLoop();
        console.log('üèüÔ∏è –ê—Ä–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞! –î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –±–∏—Ç–≤–∞!');
    }
}

function getCurrentDifficulty() {
    if (!botAI) return 'medium';
    
    if (botAI.aggressiveness <= 0.4) return 'easy';
    if (botAI.aggressiveness <= 0.7) return 'medium';
    return 'hard';
}

function changeDifficulty(level) {
    if (!botAI) return;
    
    switch(level) {
        case 'easy':
            botAI.aggressiveness = 0.25;
            botAI.reactionTime = 45;
            console.log('üü¢ –†–µ–∂–∏–º –ù–û–í–ò–ß–û–ö: –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±—É–¥–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ');
            break;
        case 'medium':
            botAI.aggressiveness = 0.45;
            botAI.reactionTime = 25;
            console.log('üü° –†–µ–∂–∏–º –í–û–ò–ù: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫');
            break;
        case 'hard':
            botAI.aggressiveness = 0.7;
            botAI.reactionTime = 15;
            console.log('üî¥ –†–µ–∂–∏–º –ú–ê–°–¢–ï–†: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫!');
            break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const difficultyEl = document.getElementById('botDifficulty');
    if (difficultyEl) {
        const icons = { easy: 'üü¢', medium: 'üü°', hard: 'üî¥' };
        const names = { easy: '–ù–æ–≤–∏—á–æ–∫', medium: '–í–æ–∏–Ω', hard: '–ú–∞—Å—Ç–µ—Ä' };
        difficultyEl.textContent = `${icons[level]} –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${names[level]}`;
    }
}

function testMove(direction) {
    if (!player || !bot) {
        console.log('‚ùå –ò–≥—Ä–æ–∫ –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        return;
    }
    
    switch(direction) {
        case 'left':
            player.moveLeft();
            break;
        case 'right':
            player.moveRight();
            break;
        case 'jump':
            player.jump();

            break;
        case 'lightAttack':
            if (player.canCounter > 0) {
                const counterResult = player.counterAttack(bot);
            } else {
                const lightResult = player.lightAttack(bot);
            }
            break;
        case 'heavyAttack':
            const heavyResult = player.heavyAttack(bot);
            break;
    }
}



document.body.setAttribute('tabindex', '0');
document.body.focus();