// ====== –°–ò–°–¢–ï–ú–ê –ü–ï–†–°–û–ù–ê–ñ–ï–ô ======
// ====== –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–†–¢–ò–ù–û–ö –ü–ï–†–°–û–ù–ê–ñ–ê ======
// --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê: –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
// ==== –ö–û–ù–§–ò–ì –ö–ê–†–¢–ò–ù–û–ö –î–õ–Ø –ü–ï–†–°–û–ù–ê–ñ–ï–ô ====
// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas
function resizeCanvas() {
    // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
    if (!canvas) {
        canvas = document.getElementById('gameCanvas');
        if (!canvas) {
            console.error('‚ùå Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return false;
        }
    }
    
    if (!ctx) {
        ctx = canvas.getContext('2d');
        if (!ctx) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç!');
            return false;
        }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    canvas.width = 1200;
    canvas.height = 650;
    
    console.log('‚úÖ Canvas –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return true;
}

// –í—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
// –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –û–î–ò–ù –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
// –û–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
// ====== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======
// –û–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
// ====== –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê –ë–õ–û–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ======
// –£–¥–∞–ª–∏—Ç–µ –í–ï–°–¨ —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ window.addEventListener('load', ...) –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç:

window.addEventListener('load', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    
    // ... –¥—Ä—É–≥–æ–π –∫–æ–¥ ...
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const prevBtn = document.getElementById('prevCharBtn');
    const nextBtn = document.getElementById('nextCharBtn');
    const confirmBtn = document.getElementById('confirmCharBtn');
    
    if (prevBtn) {
        prevBtn.addEventListener('click', () => {
            selectedCharIndex = (selectedCharIndex - 1 + CHARACTERS.length) % CHARACTERS.length;
            updateCharacterDisplay();
            // ‚ùå –ó–î–ï–°–¨ –ù–ï–¢ preloadImages() - –í–û–¢ –ü–†–û–ë–õ–ï–ú–ê!
        });
    }
    
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            selectedCharIndex = (selectedCharIndex + 1) % CHARACTERS.length;
            updateCharacterDisplay();
            // ‚ùå –ó–î–ï–°–¨ –¢–û–ñ–ï –ù–ï–¢ preloadImages() - –í–û–¢ –ü–†–û–ë–õ–ï–ú–ê!
        });
    }
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
});

// ========================================
// ‚úÖ –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –≠–¢–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î:
// ========================================

window.addEventListener('load', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º canvas
    if (!resizeCanvas()) {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã!');
        return;
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
    setupMouseEvents();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const prevBtn = document.getElementById('prevCharBtn');
    const nextBtn = document.getElementById('nextCharBtn');
    const confirmBtn = document.getElementById('confirmCharBtn');
    
    if (prevBtn) {
        prevBtn.addEventListener('click', () => {
            console.log('üîÑ –ö–Ω–æ–ø–∫–∞ –ù–ê–ó–ê–î –Ω–∞–∂–∞—Ç–∞');
            
            // –ú–µ–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            selectedCharIndex = (selectedCharIndex - 1 + CHARACTERS.length) % CHARACTERS.length;
            console.log(`üëà –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${selectedCharIndex}: ${CHARACTERS[selectedCharIndex].name}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateCharacterDisplay();
            
            // ‚ú® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            preloadImages();
            console.log(`üé® –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è ${CHARACTERS[selectedCharIndex].name}`);
        });
    }
    
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            console.log('üîÑ –ö–Ω–æ–ø–∫–∞ –í–ü–ï–†–ï–î –Ω–∞–∂–∞—Ç–∞');
            
            // –ú–µ–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            selectedCharIndex = (selectedCharIndex + 1) % CHARACTERS.length;
            console.log(`üëâ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${selectedCharIndex}: ${CHARACTERS[selectedCharIndex].name}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateCharacterDisplay();
            
            // ‚ú® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            preloadImages();
            console.log(`üé® –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è ${CHARACTERS[selectedCharIndex].name}`);
        });
    }
    
    if (confirmBtn) {
        confirmBtn.addEventListener('click', () => {
            console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏');
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            if (!imagesLoaded) {
                console.log('‚è≥ –ö–∞—Ä—Ç–∏–Ω–∫–∏ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
                preloadImages();
                
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                setTimeout(() => {
                    if (imagesLoaded) {
                        document.getElementById('characterMenu').style.display = 'none';
                        document.getElementById('difficultyMenu').style.display = 'block';
                    } else {
                        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ');
                        document.getElementById('characterMenu').style.display = 'none';
                        document.getElementById('difficultyMenu').style.display = 'block';
                    }
                }, 1000);
            } else {
                document.getElementById('characterMenu').style.display = 'none';
                document.getElementById('difficultyMenu').style.display = 'block';
            }
        });
    }
    
    // ‚ú® –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å—Ä–∞–∑—É
    console.log(`üé≠ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${CHARACTERS[selectedCharIndex].name}`);
    preloadImages();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    updateCharacterDisplay();
    loadBackground();
    
    console.log('‚úÖ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞!');
});

// ============ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò –°–û–ë–´–¢–ò–ô –ú–´–®–ò ============
function setupMouseEvents() {
    if (!canvas || !ctx) {
        console.error('‚ùå Canvas –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π!');
        return false;
    }
    
    console.log('üñ±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º—ã—à–∏ –¥–ª—è canvas...');
    
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–´–®–¨–Æ
    canvas.addEventListener('mousedown', function(e) {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –º—ã—à–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!', e.button);
        
        if (!gameRunning || !gameStarted || !player || !bot) {
            showKeyPress('–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
            console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è');
            return;
        }
        
        e.preventDefault();
        e.stopPropagation();
        
        if (e.button === 0) { // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
            console.log('‚ö° –ü–æ–ø—ã—Ç–∫–∞ –ª–µ–≥–∫–æ–π –∞—Ç–∞–∫–∏...');
            let hitResult;
            
            if (player.canCounter > 0) {
                console.log('üí• –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞!');
                hitResult = player.counterAttack(bot);
                if (hitResult === 'hit') {
                    showKeyPress('–õ–ö–ú - –ö–û–ù–¢–†–ê–¢–ê–ö–ê –ü–û–ü–ê–õ–ê! 35 –£–†–û–ù–ê!');
                    console.log(`üí• –ö–û–ù–¢–†–ê–¢–ê–ö–ê! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: 35, –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${bot.health}`);
                    
                    canvas.classList.add('counter-attack-effect');
                    setTimeout(() => {
                        canvas.classList.remove('counter-attack-effect');
                    }, 500);
                }
            } else {
                hitResult = player.lightAttack(bot);
                if (hitResult === 'hit') {
                    showKeyPress('–õ–ö–ú - –ë–´–°–¢–†–´–ô –£–î–ê–† –ü–û–ü–ê–õ!');
                    console.log(`‚ö° –ë—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: 15, –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${bot.health}`);
                } else if (hitResult === 'parried') {
                    showKeyPress('–õ–ö–ú - –ü–ê–†–ò–†–û–í–ê–ù!');
                    console.log(`üõ°Ô∏è –£–¥–∞—Ä –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω! –ë–æ—Ç –º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å!`);
                } else if (hitResult === 'blocked') {
                    showKeyPress('–õ–ö–ú - –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù');
                    console.log(`üõ°Ô∏è –£–¥–∞—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –£—Ä–æ–Ω: 5`);
                } else {
                    showKeyPress('–õ–ö–ú - –ú–ò–ú–û');
                    console.log(`‚ùå –ë—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä –Ω–µ –ø–æ–ø–∞–ª, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è`);
                }
                
                if (hitResult === 'hit' || hitResult === 'blocked') {
                    canvas.classList.add('light-attack-effect');
                    setTimeout(() => {
                        canvas.classList.remove('light-attack-effect');
                    }, 150);
                } else if (hitResult === 'parried') {
                    canvas.classList.add('parry-effect');
                    setTimeout(() => {
                        canvas.classList.remove('parry-effect');
                    }, 300);
                }
            }
            
        } else if (e.button === 2) { // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
            console.log('üí• –ü–æ–ø—ã—Ç–∫–∞ —Ç—è–∂–µ–ª–æ–π –∞—Ç–∞–∫–∏...');
            const hitResult = player.heavyAttack(bot);
            
            if (hitResult === 'hit') {
                showKeyPress('–ü–ö–ú - –¢–Ø–ñ–ï–õ–´–ô –£–î–ê–† –ü–û–ü–ê–õ!');
                console.log(`üí• –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: 25, –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${bot.health}`);
            } else if (hitResult === 'parried') {
                showKeyPress('–ü–ö–ú - –ü–ê–†–ò–†–û–í–ê–ù!');
                console.log(`üõ°Ô∏è –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω! –ë–æ—Ç –º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å!`);
            } else if (hitResult === 'blocked') {
                showKeyPress('–ü–ö–ú - –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù');
                console.log(`üõ°Ô∏è –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –£—Ä–æ–Ω: 8`);
            } else {
                showKeyPress('–ü–ö–ú - –ú–ò–ú–û');
                console.log(`‚ùå –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –Ω–µ –ø–æ–ø–∞–ª, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è`);
            }
            
            if (hitResult === 'hit' || hitResult === 'blocked') {
                canvas.classList.add('heavy-attack-effect');
                setTimeout(() => {
                    canvas.classList.remove('heavy-attack-effect');
                }, 400);
            } else if (hitResult === 'parried') {
                canvas.classList.add('parry-effect');
                setTimeout(() => {
                    canvas.classList.remove('parry-effect');
                }, 300);
            }
        }
        
        return false;
    });

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    canvas.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        return false;
    });

    // –ö—É—Ä—Å–æ—Ä
    canvas.addEventListener('mouseenter', function() {
        canvas.style.cursor = 'crosshair';
    });

    canvas.addEventListener('mouseleave', function() {
        canvas.style.cursor = 'default';
    });
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
    return true;
}

// ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============
document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    return false;
});

// –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ - –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ setupMouseEvents()
// canvas.addEventListener - –≠–¢–ò –°–¢–†–û–ö–ò –ù–£–ñ–ù–û –£–î–ê–õ–ò–¢–¨ –ò–ó –°–¢–ê–†–û–ì–û –ö–û–î–ê!
window.addEventListener('resize', resizeCanvas);
const CHARACTERS = [
    {
    key: "lyron",
    name: "Lyron",
    color: "#00BFFF", 
    description: "The Lord of All Magnitudes",
    images: {
      idle: "assets/Lyron.png",
      attack: "assets/LyronFight.png", 
      portrait: "assets/Lyron.png"  ,
      shield: "assets/lyronBlock.png"  // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û
    }
  },
{
    key: "Tom.J",
    name: "Tom.J", 
    color: "#FFD700",
    description: "The Great Warrior with AI Demons",
    images: {
      idle: "assets/TOM.png",
      attack: "assets/TOMFIGHT.png",
      portrait: "assets/TOM.png",
      shield: "assets/Tom.jBkock.png"
    },
    // ‚ú® –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –°–¢–†–û–ö–ò:
    specialAbility: "greenSlimeShot",
    abilityCooldown: 250,
    slimeSpeed: 18,
    slimeDamage: 30,
    slimeGravity: 0.1,
    maxSlimeBounces: 1,
    slimeSize: 25
},
  {
    key: "noxx",
    name: "Noxx",
    color: "#ffa502",
    description: "He is everywhere, omnipresent, upholding order in the realm of magnitudes.",
    element: "electric",
    images: {
      idle: "assets/NOXX.png",
      attack: "assets/NOXX_FIGHTER.png",
      portrait: "assets/NOXX.png",
      shield: "assets/Noxx_block.png"
    },
    // ‚ú® –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò:
    specialAbility: "electricTeleport",
    abilityCooldown: 80,        // 6 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω
    teleportDamage: 40,          // –£—Ä–æ–Ω –æ—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç-–∞—Ç–∞–∫–∏
    teleportStunDuration: 45,    // –û–≥–ª—É—à–µ–Ω–∏–µ –Ω–∞ 45 –∫–∞–¥—Ä–æ–≤
    teleportRange: 400           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
},
   {
    key: "Burhan.IP",
    name: "Burhan",
    color: "#ffa502",
    description: "Quintessence of Power GIF - Master of Grappling",
    element: "electric",
    images: {
      idle: "assets/Burhanf.png",
      attack: "assets/Burhanatack.png",
      portrait: "assets/Burhanf.png",
      shield: "assets/burhanblock.png",
      grapple: "assets/BurhanCombo.png"  // ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
    },
    specialAbility: "powerGrapple",
    abilityCooldown: 40,
    grappleRange: 500,
    throwDamage: 45,           // –£–±–∏—Ä–∞–µ–º, –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    stunDuration: 250
},
  {
    key: "XEALIST",
    name: "Xealist",
    color: "#ffa502",
    description: "Mind and Knowledge of Magnitudes.",
    element: "electric",
    images: {
      idle: "assets/XEALIST.png",
      attack: "assets/XEALISTAAA.png",
      portrait: "assets/XEALIST.png",
      shield: "assets/Xeakistblock.png",
      powered: "assets/Xealistcombo.png",
      poweredAttack: "assets/xealistcomboattack.png"  // ‚Üê –î–û–ë–ê–í–¨–¢–ï –í–ê–®–£ PNG –ö–ê–†–¢–ò–ù–ö–£ –ó–î–ï–°–¨
    },
    // ‚ú® –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –°–ü–û–°–û–ë–ù–û–°–¢–ò –£–°–ò–õ–ï–ù–ò–Ø:
    specialAbility: "powerBoost",
    abilityCooldown: 420,        // 7 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω
    powerDuration: 300,          // 5 —Å–µ–∫—É–Ω–¥ –¥–µ–π—Å—Ç–≤–∏—è (300 –∫–∞–¥—Ä–æ–≤ = 5 —Å–µ–∫)
    damageMultiplier: 2          // –£—Ä–æ–Ω x2
  },
  {
    key: "DeFi.NinJa_Elijah",
    name: "DeFi.NinJa_Elijah",
    color: "#ffa502",
    description: "He is everywhere and nowhere.",
    element: "electric",
    images: {
      idle: "assets/DeFi.NinJa_Elijah.png",
      attack: "assets/DeFi.NinjaAttack.png",
      portrait: "assets/DeFi.NinJa_Elijah.png",
      shield: "assets/Defi.Ninja.block.png"
    }
  },
  {
  key: "vludblet",
  name: "vludblet",
  color: "#ffa502",
  description: "Just a nice guy who throws bottles at enemies",
  element: "bottles",  // –∏–∑–º–µ–Ω–µ–Ω–æ —Å "electric"
  images: {
    idle: "assets/vludblet.png",
    attack: "assets/vludbletattack.png",
    portrait: "assets/vludblet.png",
    shield: "assets/vludbock.png"
  },
  // –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê:
  specialAbility: "bottleThrow",
  abilityCooldown: 300,
  bottleSpeed: 15,        // üöÄ –ë—ã—Å—Ç—Ä–µ–µ
  bottleDamage: 35,       // üöÄ –ë–æ–ª—å—à–µ —É—Ä–æ–Ω–∞
  bottleGravity: 0,       // üöÄ –ë–ï–ó –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
  maxBottleBounces: 0,    // üöÄ –ë–ï–ó –æ—Ç—Å–∫–æ–∫–æ–≤
  straightFlight: true    // üöÄ –ü—Ä—è–º–æ–π –ø–æ–ª–µ—Ç

},
   {
    key: "Aashi",
    name: "Aashi",
    color: "#ffa502",
    description: "Heart of Magnitude.",
    element: "electric",
    images: {
      idle: "assets/Aashi.png",
      attack: "assets/AashiAttack.png",
      portrait: "assets/Aashi.png",
      shield: "assets/Aashiblock.png"
    }
  },
   {
    key: "Heathcliff",
    name: "Heathcliff",
    color: "#ffa502",
    description: "The Gray Cardinal of This World - Master of Lightning",
    element: "electric",
    images: {
      idle: "assets/Heathcliff.png",
      attack: "assets/heatcif.png",
      portrait: "assets/Heathcliff.png",
      shield: "assets/healblock.png"
    },
    // ‚ö° –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø LIGHTNING CALL:
    specialAbility: "lightningCall",
    abilityCooldown: 360,        // 6 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω
    lightningDamage: 50,         // –ú–æ—â–Ω—ã–π —É—Ä–æ–Ω –æ—Ç –º–æ–ª–Ω–∏–∏
    lightningStunDuration: 45,   // –û–≥–ª—É—à–µ–Ω–∏–µ –Ω–∞ 45 –∫–∞–¥—Ä–æ–≤
    lightningStrikeDelay: 60     // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞—Ä–æ–º (1 —Å–µ–∫)
  },
  {
    key: "Matt",
    name: "Matt",
    color: "#ffa502",
    description: "This isn't just a shark; it's MATT.",
    element: "water",
    images: {
      idle: "assets/Matt.png",
      attack: "assets/mattatack.png",
      portrait: "assets/Matt.png",
      shield: "assets/Mattblock.png",
      sharkForm: "assets/mattcombo.png"  // ‚Üê –î–û–ë–ê–í–¨–¢–ï –í–ê–®–£ PNG –ö–ê–†–¢–ò–ù–ö–£ –ó–î–ï–°–¨
    },
    // ü¶à –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –ê–¢–ê–ö–ò –ê–ö–£–õ–´:
    specialAbility: "sharkDash",
    abilityCooldown: 360,      // 6 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω
    sharkSpeed: 25,            // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞
    sharkDamage: 50,           // –ú–æ—â–Ω—ã–π —É–∫—É—Å
    dashDistance: 400,         // –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Ä—ã–≤–∫–∞
    stunDuration: 60           // –û–≥–ª—É—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–∫—É—Å–∞
},
 {
    key: "!ZAIN",
    name: "!ZAIN",
    color: "#ffa502",
    description: "His strength lies far beyond his fists",
    element: "electric",
    images: {
      idle: "assets/ZAIN.png",
      attack: "assets/ZAINATA.png",
      portrait: "assets/ZAIN.png",
      shield: "assets/!ZAINblock.png",
      redLightPose: "assets/!ZAINCOMBO.png"
    },
    // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø RED LIGHT GREEN LIGHT:
    specialAbility: "redLightGreenLight",  // ‚Üê –≠–¢–ê –°–¢–†–û–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê!
    abilityCooldown: 480,                  // 8 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω
    freezeDuration: 180,                   // 3 —Å–µ–∫—É–Ω–¥—ã –¥–µ–π—Å—Ç–≤–∏—è
    movementDamage: 15,                    // –£—Ä–æ–Ω –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
    detectionRadius: 400,                  // –†–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è
    animationDuration: 60                  // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–∑—ã
} ,
  {
    key: "sguzeva",
    name: "sguzeva",
    color: "#ffa502",
    description: "Every week is something more..",
    element: "electric",
    images: {
      idle: "assets/sguzeva.png",
      attack: "assets/sguzeva_attack.png",
      portrait: "assets/sguzeva.png",
      shield: "assets/sguzevablock.png"
    }
  },
  {
    key: "Kristina",
    name: "Kristina",
    color: "#ffa502",
    description: "Beware the dark power veiled behind radiant faces",
    element: "electric",
    images: {
      idle: "assets/Kristina.png",
      attack: "assets/KRISTINAATA.png",
      portrait: "assets/Kristina.png",
      shield: "assets/KristinaBlock.png"
    }
  },
   {
    key: "BUDEK",
    name: "BUDEK",
    color: "#ffa502",
    description: "B BU BUD BUDE BUDEK",
    element: "electric",
    images: {
      idle: "assets/Budek.png",
      attack: "assets/budek.fight.png",
      portrait: "assets/Budek.png",
      shield: "assets/BUdek.block.png"
    }
  },
   {
    key: "ZELLA",
    name: "ZELLA",
    color: "#ffa502",
    description: "ZELLA",
    element: "electric",
    images: {
      idle: "assets/Zela.png",
      attack: "assets/Zelaatack.png",
      portrait: "assets/Zela.png",
      shield: "assets/Zellablock.png"
    }
  },
  {
    key: "Busulis",
    name: "Busulis",
    color: "#ffa502",
    description: "ZELLA",
    element: "electric",
    images: {
      idle: "assets/Busulis.png",
      attack: "assets/Busulisatack.png",
      portrait: "assets/Busulis.png",
      shield: "assets/bulliosblock.png"
    }
  },
   {
    key: "effgennn.l33t",
    name: "effgennn.l33t",
    color: "#ffa502",
    description: "ZELLA",
    element: "electric",
    images: {
      idle: "assets/effgennn.l33t.png",
      attack: "assets/effgennn.l33attack.png",
      portrait: "assets/effgennn.l33t.png",
      shield: "assets/effgennn.l33tblock.png"
    }
  }
  
];
// ====== –§–û–ù–û–í–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï ======
// ====== –§–û–ù–û–í–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ======
// üé® –ú–ê–°–°–ò–í –§–û–ù–û–í –î–õ–Ø –†–ê–ó–ù–´–• –ê–†–ï–ù
const ARENA_BACKGROUNDS = [
    {
        name: "–ì–æ—Ä–Ω–∞—è –∞—Ä–µ–Ω–∞",
        file: "assets/background.png",
        description: "–≠–ø–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä—ã –∏ –æ–±–ª–∞–∫–∞"
    },
    {
        name: "–õ–µ—Å–Ω–∞—è –ø–æ–ª—è–Ω–∞", 
        file: "assets/background2.png",
        description: "–ì—É—Å—Ç–æ–π –ª–µ—Å —Å —Å–æ–ª–Ω–µ—á–Ω—ã–º–∏ –ª—É—á–∞–º–∏"
    },
    {
        name: "–ü—É—Å—Ç—ã–Ω–Ω–∞—è –∞—Ä–µ–Ω–∞",
        file: "assets/background4.png", 
        description: "–ü–µ—Å—á–∞–Ω—ã–µ –¥—é–Ω—ã –∏ –ø–∞–ª—è—â–µ–µ —Å–æ–ª–Ω—Ü–µ"
    },
];

let currentArenaIndex = 0;
let backgroundImage = null;
let backgroundLoaded = false;
let currentArenaName = "";

// üé≤ –°–õ–£–ß–ê–ô–ù–´–ô –í–´–ë–û–† –ê–†–ï–ù–´
function selectRandomArena() {
    currentArenaIndex = Math.floor(Math.random() * ARENA_BACKGROUNDS.length);
    const selectedArena = ARENA_BACKGROUNDS[currentArenaIndex];
    currentArenaName = selectedArena.name;
    
    console.log(`üèüÔ∏è –í—ã–±—Ä–∞–Ω–∞ –∞—Ä–µ–Ω–∞: ${selectedArena.name}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${selectedArena.description}`);
    
    return selectedArena;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
function loadBackground() {
    const selectedArena = ARENA_BACKGROUNDS[currentArenaIndex];
    
    backgroundImage = new Image();
    backgroundImage.onload = () => {
        backgroundLoaded = true;
        console.log(`üé® –§–æ–Ω –∞—Ä–µ–Ω—ã "${selectedArena.name}" –∑–∞–≥—Ä—É–∂–µ–Ω!`);
    };
    backgroundImage.onerror = () => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞: ${selectedArena.file}`);
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω');
        backgroundLoaded = false;
    };
    backgroundImage.src = selectedArena.file;
}
let selectedCharIndex = 0;
let imageCache = {};
let imagesLoaded = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function updateCharacterDisplay() {
    const character = CHARACTERS[selectedCharIndex];
    const imgEl = document.getElementById('characterImg');
    const nameEl = document.getElementById('characterName');
    const descEl = document.getElementById('characterDesc');
    
    if (imgEl) imgEl.src = character.images.portrait;
    if (nameEl) nameEl.textContent = character.name;
    if (descEl) descEl.textContent = character.description;
}


// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫


function preloadImages() {
    imagesLoaded = false;
    imageCache = {};
    
    const selectedCharacter = CHARACTERS[selectedCharIndex];
    const urls = selectedCharacter.images;
    
    const promises = Object.entries(urls).map(([state, url]) =>
        new Promise(resolve => {
            const img = new Image();
            img.onload = () => { 
                imageCache[state] = img; 
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞: ${state} –¥–ª—è ${selectedCharacter.name}`);
                resolve(); 
            };
            img.onerror = () => { 
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${url} –¥–ª—è ${selectedCharacter.name}`); 
                resolve(); 
            };
            img.src = url;
        })
    );
    
    Promise.all(promises).then(() => {
        imagesLoaded = true;
        console.log(`üé® –í—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${selectedCharacter.name}!`);
    });
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –ò–ò
function preloadBotImages(botCharacterIndex) {
    const botCharacter = CHARACTERS[botCharacterIndex];
    const urls = botCharacter.images;
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –±–æ—Ç–∞
    window.botImageCache = {};
    
    const promises = Object.entries(urls).map(([state, url]) =>
        new Promise(resolve => {
            const img = new Image();
            img.onload = () => { 
                window.botImageCache[state] = img; 
                console.log(`ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–æ—Ç–∞: ${state} –¥–ª—è ${botCharacter.name}`);
                resolve(); 
            };
            img.onerror = () => { 
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–æ—Ç–∞: ${url} –¥–ª—è ${botCharacter.name}`); 
                resolve(); 
            };
            img.src = url;
        })
    );
    
    Promise.all(promises).then(() => {
        window.botImagesLoaded = true;
        console.log(`üé® –í—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${botCharacter.name}!`);
    });
}


// üé® =============== –í–û–¢ –¢–£–¢ –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ ===============
// ====== –§–£–ù–ö–¶–ò–Ø –†–ò–°–û–í–ê–ù–ò–Ø –§–û–ù–ê ======
// ====== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ò–°–û–í–ê–ù–ò–Ø –§–û–ù–ê ======
function drawBackground(ctx) {
    if (backgroundLoaded && backgroundImage) {
        // –†–∏—Å—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä–µ–Ω—ã
        const bgRatio = backgroundImage.width / backgroundImage.height;
        const canvasRatio = canvas.width / canvas.height;

        let drawWidth, drawHeight, offsetX = 0, offsetY = 0;

        if (bgRatio > canvasRatio) {
            drawHeight = canvas.height;
            drawWidth = drawHeight * bgRatio;
            offsetX = -(drawWidth - canvas.width) / 2;
        } else {
            drawWidth = canvas.width;
            drawHeight = drawWidth / bgRatio;
            offsetY = -(drawHeight - canvas.height) / 2;
        }

        ctx.drawImage(backgroundImage, offsetX, offsetY, drawWidth, drawHeight);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä–µ–Ω—ã
        addArenaEffects(ctx);
        
    } else {
        // –ó–∞–ø–∞—Å–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        drawFallbackBackground(ctx);
    }
    
    // –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞—Ä–µ–Ω
    drawCommonArenaElements(ctx);
}

// üåü –ê–¢–ú–û–°–§–ï–†–ù–´–ï –≠–§–§–ï–ö–¢–´ –î–õ–Ø –†–ê–ó–ù–´–• –ê–†–ï–ù
// üåü –ê–¢–ú–û–°–§–ï–†–ù–´–ï –≠–§–§–ï–ö–¢–´ –î–õ–Ø –†–ê–ó–ù–´–• –ê–†–ï–ù (–ü–£–°–¢–ê–Ø - –¢–û–õ–¨–ö–û –í–ê–®–ò PNG)
function addArenaEffects(ctx) {
    // –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ PNG —Ñ–æ–Ω—ã
}

// üèõÔ∏è –ó–ê–ü–ê–°–ù–û–ô –ì–†–ê–î–ò–ï–ù–¢–ù–´–ô –§–û–ù
// üèõÔ∏è –ó–ê–ü–ê–°–ù–û–ô –§–û–ù (–ï–°–õ–ò PNG –ù–ï –ó–ê–ì–†–£–ó–ò–õ–°–Ø)
function drawFallbackBackground(ctx) {
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    ctx.fillStyle = '#2C3E50';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // –ù–∞–¥–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
    ctx.fillStyle = 'white';
    ctx.font = 'bold 24px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('–§–æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', canvas.width/2, canvas.height/2);
    ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª PNG', canvas.width/2, canvas.height/2 + 30);
}

// üåç –û–ë–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ê–†–ï–ù–´
// üåç –û–ë–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ê–†–ï–ù–´ (–¢–û–õ–¨–ö–û –ù–ï–í–ò–î–ò–ú–ê–Ø –ü–õ–ê–¢–§–û–†–ú–ê)
function drawCommonArenaElements(ctx) {
    // –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - —á–∏—Å—Ç—ã–π PNG —Ñ–æ–Ω
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ Fighter –∫–ª–∞—Å—Å–∞
}

class Fighter {
    constructor(x, y, color, name, specialAttack, useImages = false) {
        this.x = x;
        this.y = y;
        this.width = 220;
        this.height = 220;
        this.color = color;
        this.name = name;
        this.health = 300;
        this.maxHealth = 300;
        this.velocityX = 0;
        this.velocityY = 0;
        this.onGround = true;
        this.facingRight = true;
        this.isAttacking = false;
        this.isBlocking = false;
        this.lightAttackCooldown = 0;
        this.heavyAttackCooldown = 0;
        this.combo = 0;
        this.specialAttack = specialAttack;
        this.specialCooldown = 0;
        this.lastAttackTime = 0;
        this.attackFrame = 0;
        this.attackType = 'none';
        this.attackPhase = 'none';
        this.attackProgress = 0;
        this.hitEffect = 0;
        this.blockHealth = 100;
        this.maxBlockHealth = 100;
        this.stunned = 0;
        this.balance = 100;
        this.maxBalance = 100;
        this.knockback = 0;
        this.lastHitType = 'normal';
        this.screenShake = 0;
        
        // –°–ò–°–¢–ï–ú–ê –ü–ê–†–ò–†–û–í–ê–ù–ò–Ø –ò –ö–û–ù–¢–†–ê–¢–ê–ö
        this.isParrying = false;
        this.parryWindow = 0;
        this.vulnerableToCounter = 0;
        this.canCounter = 0;
        this.isCountering = false;
        this.lastParryTime = 0;
        
        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –î–í–ò–ñ–ï–ù–ò–Ø
        this.moveSpeed = 13;
        this.jumpPower = 24;
        this.airControl = 0.8;
        this.landingEffect = 0;
        this.landingPrep = false;
        this.isMovingLeft = false;
        this.isMovingRight = false;
        this.coyoteTime = 0;
        this.jumpBuffer = 0;
        this.jumpEffect = 0;
        this.useImages = useImages;
        
        // ‚ú® –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô ‚ú®
        this.magnitudeWaves = [];      // –ú–∞—Å—Å–∏–≤ –≤–æ–ª–Ω –¥–ª—è Lyron
        this.abilityCooldown = 0;      // –ö—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–≤ –∫–∞–¥—Ä–∞—Ö)
        this.abilityDuration = 0;      // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞
        this.abilityActive = false;    // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        this.hitParticles = [];        // –ß–∞—Å—Ç–∏—Ü—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–ø–∞–¥–∞–Ω–∏—è
        this.MAX_PARTICLES = 50; // üîß –ù–û–í–ê–Ø –°–¢–†–û–ö–ê - –ª–∏–º–∏—Ç —á–∞—Å—Ç–∏—Ü
        // üöÄ –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –û–¢–¢–ê–õ–ö–ò–í–ê–ù–ò–Ø
        this.isKnockedBack = false;    // –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
        this.knockbackResistance = 1.0; // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—é (1.0 = –Ω–æ—Ä–º–∞)
        // üçæ –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ë–£–¢–´–õ–û–ö vludblet
        this.bottles = [];              // –ú–∞—Å—Å–∏–≤ –ª–µ—Ç—è—â–∏—Ö –±—É—Ç—ã–ª–æ–∫
        this.bottleThrowCooldown = 0;   // –ö—É–ª–¥–∞—É–Ω –±—Ä–æ—Å–∫–∞ –±—É—Ç—ã–ª–∫–∏ (–≤ –∫–∞–¥—Ä–∞—Ö)
        this.throwingBottle = false;    // –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –±—Ä–æ—Å–∫–∞
        this.throwFrame = 0;            // –¢–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ –±—Ä–æ—Å–∫–∞
        // üü¢ –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ó–ï–õ–ï–ù–û–ô –ñ–ò–ñ–ò TOM.J
        this.slimes = [];                // –ú–∞—Å—Å–∏–≤ –ª–µ—Ç—è—â–∏—Ö —Å–ª–∞–π–º–æ–≤
        this.slimeThrowCooldown = 0;     // –ö—É–ª–¥–∞—É–Ω –±—Ä–æ—Å–∫–∞ —Å–ª–∞–π–º–∞
        this.throwingSlime = false;      // –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –±—Ä–æ—Å–∫–∞
        this.slimeThrowFrame = 0;        // –¢–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ –±—Ä–æ—Å–∫–∞

        // –≠—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç —Å–ª–∞–π–º–æ–≤
        this.slimeParticles = [];        // –ú–∞—Å—Å–∏–≤ —á–∞—Å—Ç–∏—Ü —Å–ª–∏–∑–∏
        this.slimeExplosions = [];       // –ú–∞—Å—Å–∏–≤ –≤–∑—Ä—ã–≤–æ–≤ –æ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è —Å–ª–∞–π–º–æ–≤

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–∞–π–º–æ–≤ (–±–µ—Ä—É—Ç—Å—è –∏–∑ CHARACTERS –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
        this.slimeSpeed = 18;            // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ —Å–ª–∞–π–º–∞
        this.slimeDamage = 30;           // –£—Ä–æ–Ω –æ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è —Å–ª–∞–π–º–∞
        this.slimeGravity = 0.1;         // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–ª–∞–π–º–∞
        this.maxSlimeBounces = 1;        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–∫–æ–∫–æ–≤
        this.slimeSize = 25;             // –†–∞–∑–º–µ—Ä —Å–ª–∞–π–º–∞
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –±—É—Ç—ã–ª–æ–∫
        this.glassParticles = [];       // –ú–∞—Å—Å–∏–≤ –æ—Å–∫–æ–ª–∫–æ–≤ —Å—Ç–µ–∫–ª–∞ –æ—Ç —Ä–∞–∑–±–∏—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫
        this.bottleExplosions = [];     // –ú–∞—Å—Å–∏–≤ –≤–∑—Ä—ã–≤–æ–≤ –æ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –±—É—Ç—ã–ª–æ–∫
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É—Ç—ã–ª–æ–∫ (–±–µ—Ä—É—Ç—Å—è –∏–∑ CHARACTERS –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
        this.bottleSpeed = 12;          // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –±—É—Ç—ã–ª–∫–∏
        this.bottleDamage = 30;         // –£—Ä–æ–Ω –æ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –±—É—Ç—ã–ª–∫–∏
        this.bottleGravity = 0.5;       // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è –±—É—Ç—ã–ª–∫–∏
        this.maxBottleBounces = 2;      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–∫–æ–∫–æ–≤

        // ‚ö° –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò NOXX
        this.isTeleporting = false;          // –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
        this.teleportCooldown = 0;           // –ö—É–ª–¥–∞—É–Ω —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ (–≤ –∫–∞–¥—Ä–∞—Ö)
        this.teleportPhase = 'none';         // –§–∞–∑–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏: 'none', 'disappear', 'appear', 'strike'
        this.teleportTimer = 0;              // –¢–∞–π–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
        this.teleportStartX = 0;             // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X
        this.teleportStartY = 0;             // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y
        this.teleportTargetX = 0;            // –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è X
        this.teleportTargetY = 0;            // –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è Y
        this.electricParticles = [];         // –ß–∞—Å—Ç–∏—Ü—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
        this.teleportGlow = 0;               // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏

          // ü§º –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –ë–†–û–°–ö–ê BURHAN
        this.isGrappling = false;            // –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—Ö–≤–∞—Ç–∞
        this.grappleCooldown = 0;            // –ö—É–ª–¥–∞—É–Ω –±—Ä–æ—Å–∫–∞ (–≤ –∫–∞–¥—Ä–∞—Ö)
        this.grapplePhase = 'none';          // –§–∞–∑–∞ –±—Ä–æ—Å–∫–∞: 'none', 'grab', 'lift', 'throw'
        this.grappleTimer = 0;               // –¢–∞–π–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
        this.grappleTarget = null;           // –¶–µ–ª—å –∑–∞—Ö–≤–∞—Ç–∞
        this.originalTargetX = 0;            // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ü–µ–ª–∏ X
        this.originalTargetY = 0;            // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ü–µ–ª–∏ Y
        this.liftHeight = 0;                 // –í—ã—Å–æ—Ç–∞ –ø–æ–¥—ä–µ–º–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ
        this.throwParticles = [];            // –ß–∞—Å—Ç–∏—Ü—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –±—Ä–æ—Å–∫–∞
        this.impactEffect = 0;               // –≠—Ñ—Ñ–µ–∫—Ç —É–¥–∞—Ä–∞ –æ –∑–µ–º–ª—é
     this.impactEffect = 0;               // –≠—Ñ—Ñ–µ–∫—Ç —É–¥–∞—Ä–∞ –æ –∑–µ–º–ª—é
        
        // ü¶à –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –ê–¢–ê–ö–ò –ê–ö–£–õ–´ MATT
        // ü¶à –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –ê–¢–ê–ö–ò –ê–ö–£–õ–´ MATT
        this.isSharkDashing = false;         // –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ —Ä–µ–∂–∏–º–µ –∞–∫—É–ª—ã
        this.sharkPhase = 'none';            // –§–∞–∑–∞ –∞—Ç–∞–∫–∏: 'none', 'transform', 'dash', 'bite', 'return'
        this.sharkTimer = 0;                 // –¢–∞–π–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
        this.sharkStartX = 0;                // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X
        this.sharkStartY = 0;                // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y
        this.sharkTargetX = 0;               // –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è X
        this.sharkTargetY = 0;               // –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è Y
        this.sharkTarget = null;             // –¶–µ–ª—å –∞—Ç–∞–∫–∏
        this.sharkCooldown = 0;              // –ö—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        this.waterParticles = [];            // –ß–∞—Å—Ç–∏—Ü—ã –≤–æ–¥—ã
        this.sharkTrail = [];                // –°–ª–µ–¥ –∞–∫—É–ª—ã
        this.biteEffect = 0;                 // –≠—Ñ—Ñ–µ–∫—Ç —É–∫—É—Å–∞
        
        // üí° –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –£–°–ò–õ–ï–ù–ò–Ø XEALIST
        this.isPowered = false;              // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É—Å–∏–ª–µ–Ω–∏—è
        this.powerDuration = 0;              // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —É—Å–∏–ª–µ–Ω–∏—è
        this.powerCooldown = 0;              // –ö—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        this.originalDamageMultiplier = 1;   // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞
        
        // ‚ö° –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø LIGHTNING CALL HEATHCLIFF
this.lightningStrikes = [];          // –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–ª–Ω–∏–π
this.lightningCooldown = 0;          // –ö—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
this.lightningWarnings = [];         // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –º–æ–ª–Ω–∏—è—Ö
this.lightningEffects = [];          // –≠—Ñ—Ñ–µ–∫—Ç—ã –º–æ–ª–Ω–∏–π

// üî¥ –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø RED LIGHT GREEN LIGHT ZAIN
this.redLightActive = false;         // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å "–∫—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç"
this.redLightDuration = 0;           // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è
this.redLightCooldown = 0;           // –ö—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
this.redLightCountdown = 0;          // –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (3-2-1)
this.redLightTarget = null;          // –¶–µ–ª—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
this.movementViolations = 0;         // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–≤–∏–∂–µ–Ω–∏—è
this.lastPosition = { x: 0, y: 0 };  // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
this.redLightWarnings = [];          // –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    }  // ‚Üê –í–û–¢ –¢–£–¢ –ó–ê–ö–†–´–í–ê–ï–¢–°–Ø constructor
    
    
    // –°–ò–°–¢–ï–ú–ê –ê–ù–ò–ú–ê–¶–ò–ò –ê–¢–ê–ö
    updateAttackAnimation() {
        if (this.attackType === 'none') return;
        
        let totalFrames, windupFrames, strikeFrames;
        
        switch(this.attackType) {
            case 'light':
                totalFrames = 15;
                windupFrames = 4;
                strikeFrames = 3;
                break;
            case 'heavy':
                totalFrames = 25;
                windupFrames = 8;
                strikeFrames = 5;
                break;
            case 'counter':
                totalFrames = 20;
                windupFrames = 3;
                strikeFrames = 6;
                break;
            default:
                totalFrames = 15;
                windupFrames = 4;
                strikeFrames = 3;
        }
        
        const recoveryFrames = totalFrames - windupFrames - strikeFrames;
        const currentFrame = totalFrames - this.attackFrame;
        
        if (currentFrame < windupFrames) {
            this.attackPhase = 'windup';
            this.attackProgress = currentFrame / windupFrames;
        } else if (currentFrame < windupFrames + strikeFrames) {
            this.attackPhase = 'strike';
            this.attackProgress = (currentFrame - windupFrames) / strikeFrames;
        } else {
            this.attackPhase = 'recovery';
            this.attackProgress = (currentFrame - windupFrames - strikeFrames) / recoveryFrames;
        }
    }
    
    update() {
        // –§–∏–∑–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–µ–π
        this.velocityY += 0.7; // –ß—É—Ç—å –º–µ–Ω—å—à–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã—Ö –ø—Ä—ã–∂–∫–æ–≤
        
        if (this.knockback > 0) {
            this.velocityX += this.knockback;
            this.knockback *= 0.85; // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
            if (Math.abs(this.knockback) < 0.1) this.knockback = 0;
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã
        if (Math.abs(this.velocityX) > 0.5 && this.onGround && !this.isAttacking) {
            this.walkCycle = (this.walkCycle || 0) + Math.abs(this.velocityX) * 0.15;
        } else {
            this.walkCycle = 0;
        }
        
        // –ü–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–µ
        if (!this.onGround && this.velocityY > 0) {
            this.landingPrep = true;
        }
        
        this.x += this.velocityX;
        this.y += this.velocityY;
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–µ–π
        // üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –≠–ö–†–ê–ù–ê –° –û–¢–°–ö–û–ö–û–ú –û–¢ –°–¢–ï–ù
        if (this.x < 0) {
            this.x = 0;
            // –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–∏ - –æ—Ç—Å–∫–æ–∫ –æ—Ç –ª–µ–≤–æ–π —Å—Ç–µ–Ω—ã
            if (this.velocityX < -15) {
                this.velocityX = Math.abs(this.velocityX) * 0.6; // –û—Ç—Å–∫–æ–∫ —Å –ø–æ—Ç–µ—Ä–µ–π 40% —Å–∫–æ—Ä–æ—Å—Ç–∏
                this.screenShake = Math.max(this.screenShake, 8);
                console.log(`üí• –û—Ç—Å–∫–æ–∫ –æ—Ç –ª–µ–≤–æ–π —Å—Ç–µ–Ω—ã! –°–∫–æ—Ä–æ—Å—Ç—å: ${this.velocityX.toFixed(1)}`);
            } else {
                this.velocityX = Math.max(0, this.velocityX);
            }
        }
        if (this.x > canvas.width - this.width) {
            this.x = canvas.width - this.width;
            // –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–∏ - –æ—Ç—Å–∫–æ–∫ –æ—Ç –ø—Ä–∞–≤–æ–π —Å—Ç–µ–Ω—ã
            if (this.velocityX > 15) {
                this.velocityX = -Math.abs(this.velocityX) * 0.6; // –û—Ç—Å–∫–æ–∫ —Å –ø–æ—Ç–µ—Ä–µ–π 40% —Å–∫–æ—Ä–æ—Å—Ç–∏
                this.screenShake = Math.max(this.screenShake, 8);
                console.log(`üí• –û—Ç—Å–∫–æ–∫ –æ—Ç –ø—Ä–∞–≤–æ–π —Å—Ç–µ–Ω—ã! –°–∫–æ—Ä–æ—Å—Ç—å: ${this.velocityX.toFixed(1)}`);
            } else {
                this.velocityX = Math.min(0, this.velocityX);
            }
        }
        
        // –ü—Ä–∏–∑–µ–º–ª–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        if (this.y > canvas.height - this.height - 20) {
            this.y = canvas.height - this.height - 20;
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
            if (!this.onGround && this.velocityY > 8) {
                this.landingEffect = 15; // –≠—Ñ—Ñ–µ–∫—Ç —É–¥–∞—Ä–∞ –æ –∑–µ–º–ª—é
                this.velocityX *= 0.7; // –ù–µ–±–æ–ª—å—à–æ–µ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏
            }
            
            this.velocityY = 0;
            this.onGround = true;
            this.landingPrep = false;
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç—Ä–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (this.onGround) {
            if (this.isAttacking) {
                this.velocityX *= 0.88; // –ú–µ–Ω—å—à–µ —Ç—Ä–µ–Ω–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ
            } else {
                this.velocityX *= 0.85; // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ
            }
        } else {
            this.velocityX *= 0.96; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥—É—à–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
        }
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
        if (this.lightAttackCooldown > 0) this.lightAttackCooldown--;
        if (this.heavyAttackCooldown > 0) this.heavyAttackCooldown--;
        if (this.attackFrame > 0) this.attackFrame--;
        if (this.hitEffect > 0) this.hitEffect--;
        if (this.stunned > 0) this.stunned--;
        if (this.screenShake > 0) this.screenShake--;
        if (this.landingEffect > 0) this.landingEffect--;
        
        // –°–ò–°–¢–ï–ú–ê –ü–ê–†–ò–†–û–í–ê–ù–ò–Ø
        if (this.parryWindow > 0) this.parryWindow--;
        if (this.vulnerableToCounter > 0) this.vulnerableToCounter--;
        if (this.canCounter > 0) this.canCounter--;
        
        // –°–∏—Å—Ç–µ–º–∞ –ø—Ä—ã–∂–∫–æ–≤
        if (this.coyoteTime > 0) this.coyoteTime--;
        if (this.jumpBuffer > 0) this.jumpBuffer--;
        
        // –ö–æ–π–æ—Ç-—Ç–∞–π–º: –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —Å—Ö–æ–¥–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä—ã–≥–Ω—É—Ç—å
        if (this.onGround) {
            this.coyoteTime = 8; // 8 –∫–∞–¥—Ä–æ–≤ –∫–æ–π–æ—Ç-—Ç–∞–π–º–∞
        }
        
        // –°–±—Ä–æ—Å –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç
        if (!this.isBlocking) {
            this.isParrying = false;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
        if (!this.isBlocking && this.blockHealth < this.maxBlockHealth) {
            this.blockHealth += 0.5;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è
        if (this.balance < this.maxBalance) {
            this.balance += 1;
        }
        
        // –°–±—Ä–æ—Å –∫–æ–º–±–æ
        if (Date.now() - this.lastAttackTime > 2000) {
            this.combo = 0;
        }
        
        // –°–±—Ä–æ—Å –∞—Ç–∞–∫–∏
        if (this.attackFrame === 0) {
        this.isAttacking = false;
        this.attackType = 'none';
        this.attackPhase = 'none';
        this.attackProgress = 0;
    } else {
        this.updateAttackAnimation();
    }
    
     // ‚ú® –ù–û–í–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–õ–Ø –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô ‚ú®
      // ‚ú® –ù–û–í–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–õ–Ø –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô ‚ú®
    this.updateMagnitudeWaves();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ª–Ω
if (this.abilityActive && this.waveTimer !== undefined) {
    this.waveTimer++;
    if (this.waveTimer >= this.waveInterval && this.nextWaveIndex <= 2) {
        this.createMagnitudeWave(this.nextWaveIndex);
        this.nextWaveIndex++;
        this.waveTimer = 0;
    }
}
    this.updateHitParticles();
    this.updateBottles();
    this.updateBottleExplosions();
    this.updateGlassParticles();
    // –ù–û–í–´–ï –°–¢–†–û–ö–ò –î–õ–Ø –°–õ–ê–ô–ú–û–í:
    this.updateSlimes();
    
    this.updateSlimeParticles();

// –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω –±—Ä–æ—Å–∫–∞ —Å–ª–∞–π–º–∞
if (this.slimeThrowCooldown > 0) this.slimeThrowCooldown--;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω –±—Ä–æ—Å–∫–∞ –±—É—Ç—ã–ª–∫–∏
    if (this.bottleThrowCooldown > 0) this.bottleThrowCooldown--;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
if (this.abilityCooldown > 0) this.abilityCooldown--;
if (this.abilityDuration > 0) this.abilityDuration--;

// ‚ö° –ù–û–í–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò NOXX
this.updateTeleportation();
this.updateElectricParticles();

// –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
// ‚ö° –ù–û–í–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò NOXX
this.updateTeleportation();
this.updateElectricParticles();

// ü§º –ù–û–í–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–õ–Ø –ë–†–û–°–ö–ê BURHAN
this.updateGrappling();
this.updateThrowParticles();

// ü¶à –ù–û–í–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–õ–Ø –ê–¢–ê–ö–ò –ê–ö–£–õ–´ MATT
this.updateSharkDash();
this.updateWaterParticles();

// –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã
if (this.teleportCooldown > 0) this.teleportCooldown--;
if (this.teleportGlow > 0) this.teleportGlow--;
if (this.grappleCooldown > 0) this.grappleCooldown--;
if (this.impactEffect > 0) this.impactEffect--;
if (this.sharkCooldown > 0) this.sharkCooldown--;  // ü¶à –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
if (this.biteEffect > 0) this.biteEffect--;        // ü¶à –ù–û–í–ê–Ø –°–¢–†–û–ö–ê

// üí° –ù–û–í–û–ï: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò –£–°–ò–õ–ï–ù–ò–Ø XEALIST
if (this.powerCooldown > 0) this.powerCooldown--;
if (this.powerDuration > 0) {
    this.powerDuration--;
    // –ö–æ–≥–¥–∞ —É—Å–∏–ª–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
    if (this.powerDuration === 0) {
        this.isPowered = false;
        console.log(`üí° ${this.name}: —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É—Å–∏–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å`);
    }
}

// ‚ö° –ù–û–í–û–ï: –û–ë–ù–û–í–õ–ï–ù–ò–ï LIGHTNING CALL HEATHCLIFF
if (this.lightningCooldown > 0) this.lightningCooldown--;
this.updateLightningStrikes();
this.updateLightningWarnings();
this.updateLightningEffects();
// üî¥ –ù–û–í–û–ï: –û–ë–ù–û–í–õ–ï–ù–ò–ï RED LIGHT GREEN LIGHT ZAIN
if (this.redLightCooldown > 0) this.redLightCooldown--;
if (this.redLightDuration > 0) {
    this.redLightDuration--;
    this.updateRedLightCountdown();
    this.checkMovementViolations();
    
    // –ö–æ–≥–¥–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
    if (this.redLightDuration === 0) {
        this.redLightActive = false;
        this.redLightTarget = null;
        this.movementViolations = 0;
        console.log(`üî¥ ${this.name}: Red Light Green Light –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å`);
    }
}
this.updateRedLightWarnings();
}

    
    draw(ctx) {
        let shakeX = 0, shakeY = 0;
        if (this.screenShake > 0) {
            shakeX = (Math.random() - 0.5) * this.screenShake;
            shakeY = (Math.random() - 0.5) * this.screenShake;
        }
        
        let drawX = this.x + shakeX;
        let drawY = this.y + shakeY;
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ–Ω—å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ —Ü–≤–µ—Ç–æ–º
        let shadowWidth = this.width;
        let shadowOpacity = 0.4;
        let shadowColor = '0, 0, 0';
        
        if (!this.onGround) {
            let heightFactor = Math.min((canvas.height - this.y) / 200, 1);
            shadowWidth = this.width * (0.5 + 0.5 * heightFactor);
            shadowOpacity = 0.3 * heightFactor;
        }
        
        // –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ç–µ–Ω–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        if (this.name === "Tom.J") {
            shadowColor = '255, 215, 0';
            shadowOpacity *= 0.6;
        } else if (this.name === "Lyron") {
            shadowColor = '0, 191, 255';
            shadowOpacity *= 0.6;
        }
        
        ctx.fillStyle = `rgba(${shadowColor}, ${shadowOpacity})`;
        ctx.fillRect(drawX + (this.width - shadowWidth)/2, canvas.height - 15, shadowWidth, 8);
        
        // –ê—É—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        //this.drawAura(ctx, drawX, drawY);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
        if (this.landingEffect > 0) {
            let intensity = this.landingEffect / 15;
            ctx.fillStyle = `rgba(139, 69, 19, ${0.4 * intensity})`;
            
            // –ü—ã–ª—å –æ—Ç –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
            for (let i = 0; i < 8; i++) {
                let dustX = drawX + 10 + (Math.random() - 0.5) * 60;
                let dustY = canvas.height - 10 + Math.random() * 15;
                let dustSize = 2 + Math.random() * 4;
                
                ctx.beginPath();
                ctx.arc(dustX, dustY, dustSize, 0, 2 * Math.PI);
                ctx.fill();
            }
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä—ã–∂–∫–∞
        if (this.jumpEffect > 0) {
            this.jumpEffect--;
            let intensity = this.jumpEffect / 10;
            
            // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–∫—Ä—ã –æ—Ç –ø—Ä—ã–∂–∫–∞
            for (let i = 0; i < 6; i++) {
                let sparkX = drawX + 15 + (Math.random() - 0.5) * 30;
                let sparkY = canvas.height - 10 + Math.random() * 10;
                
                let sparkColor = this.name === "Tom.J" ? '255, 215, 0' : '0, 191, 255';
                ctx.fillStyle = `rgba(${sparkColor}, ${intensity})`;
                ctx.fillRect(sparkX - 1, sparkY - 1, 3, 3);
                
                // –°–≤–µ—á–µ–Ω–∏–µ –∏—Å–∫—Ä
                ctx.shadowColor = `rgba(${sparkColor}, ${intensity * 0.8})`;
                ctx.shadowBlur = 5;
                ctx.fillRect(sparkX - 0.5, sparkY - 0.5, 2, 2);
                ctx.shadowBlur = 0;
            }
        }
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.drawStatusEffects(ctx, drawX, drawY);
        // –†–∏—Å—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
// ‚ö° –≠–§–§–ï–ö–¢–´ –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò –î–õ–Ø NOXX (–ü–ï–†–ï–î —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
if (this.name === "Noxx") {
    this.drawTeleportEffects(ctx, drawX, drawY);
}

// –†–∏—Å—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ù–ï –∏—Å—á–µ–∑–∞–µ—Ç –ø—Ä–∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
if (!this.isTeleporting || this.teleportPhase !== 'disappear') {
    this.drawCharacterWithImage(ctx, drawX, drawY);
}
        
        // –†–∏—Å—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
       // this.drawCharacter(ctx, drawX, drawY);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –∞—Ç–∞–∫–∏
        this.drawAttackEffect(ctx, drawX, drawY);
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.drawCharacterUI(ctx, drawX, drawY);
         this.drawMagnitudeWaves(ctx, drawX, drawY);
        this.drawHitParticles(ctx);
        this.drawAbilityCooldown(ctx, drawX + this.width/2, drawY);
        
        // –ù–û–í–´–ï –°–¢–†–û–ö–ò –î–õ–Ø –ë–£–¢–´–õ–û–ö:
        this.drawBottles(ctx);
        this.drawGlassParticles(ctx);
        this.drawBottleExplosions(ctx);
        this.drawBottleThrowCooldown(ctx, this.x + this.width/2, this.y);
        this.drawSlimes(ctx);
        this.drawSlimeParticles(ctx);
        this.drawSlimeExplosions(ctx);
            this.drawSlimeThrowCooldown(ctx, this.x + this.width/2, this.y);
        this.drawElectricParticles(ctx);
        
        // ü§º –ù–û–í–´–ï –ú–ï–¢–û–î–´ –†–ò–°–û–í–ê–ù–ò–Ø –î–õ–Ø –ë–†–û–°–ö–ê BURHAN
        this.drawGrappleEffects(ctx, drawX, drawY);
        this.drawThrowParticles(ctx);
        this.drawGrappleCooldown(ctx, this.x + this.width/2, this.y);
        
        // ‚ö° –ù–û–í–´–ï –ú–ï–¢–û–î–´ –†–ò–°–û–í–ê–ù–ò–Ø –î–õ–Ø LIGHTNING CALL HEATHCLIFF
        this.drawLightningWarnings(ctx);
        this.drawLightningStrikes(ctx);
        this.drawLightningEffects(ctx);
        this.drawLightningCooldown(ctx, this.x + this.width/2, this.y);
        this.drawRedLightWarnings(ctx);
this.drawRedLightEffect(ctx, drawX, drawY);
this.drawRedLightCooldown(ctx, this.x + this.width/2, this.y);
    }
   drawCharacterWithImage(ctx, drawX, drawY) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    let imageKey = 'idle';
    
    // üî¥ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º Red Light –ø–æ–∑—É –¥–ª—è !ZAIN
    if (this.name === "!ZAIN" && this.redLightActive) {
        imageKey = 'redLightPose';  // ‚Üê –ù–û–í–ê–Ø –°–¢–†–û–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º PNG –∫—Ä–∞—Å–Ω–æ–π –ø–æ–∑—ã
    } else if (this.name === "Burhan" && this.isGrappling && this.grapplePhase === 'throw') {
        imageKey = 'grapple';  // ‚Üê –ù–û–í–ê–Ø –°–¢–†–û–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º PNG –∞–Ω–∏–º–∞—Ü–∏—é –±—Ä–æ—Å–∫–∞
    } else if (this.name === "Matt" && this.isSharkDashing) {
        imageKey = 'sharkForm';  // ‚Üê –ù–û–í–ê–Ø –°–¢–†–û–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º PNG –∞–∫—É–ª—ã –¥–ª—è Matt
    } else if (this.name === "Xealist" && this.isPowered && (this.isAttacking || this.attackFrame > 0)) {
        imageKey = 'poweredAttack';  // ‚Üê –ù–û–í–ê–Ø PNG –¥–ª—è —É—Å–∏–ª–µ–Ω–Ω—ã—Ö –∞—Ç–∞–∫
    } else if (this.name === "Xealist" && this.isPowered) {
        imageKey = 'powered';  // ‚Üê PNG –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–∏–ª–µ–Ω–∏—è
    } else if (this.isAttacking || this.attackFrame > 0) {
        imageKey = 'attack';
    } else if (this.isBlocking) {
        imageKey = 'shield';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫—ç—à –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å - –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –±–æ—Ç–∞
    let currentCache, cacheLoaded;
    if (this === player) {
        currentCache = imageCache;
        cacheLoaded = imagesLoaded;
    } else {
        currentCache = window.botImageCache || {};
        cacheLoaded = window.botImagesLoaded || false;
    }
    
    const img = currentCache[imageKey];
    if (!img || !cacheLoaded) {
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∏—Å—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        this.drawCharacter(ctx, drawX, drawY);
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    ctx.save();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (this.stunned > 0) {
        ctx.filter = 'grayscale(50%) brightness(1.2)';
    }
    if (this.hitEffect > 0) {
        ctx.filter = 'hue-rotate(180deg) brightness(1.5)';
    }
    
    // –û—Ç—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–º–æ—Ç—Ä–∏—Ç –≤–ª–µ–≤–æ
    if (!this.facingRight) {
        ctx.translate(drawX + this.width, drawY);
        ctx.scale(-1, 1);
        ctx.drawImage(img, 0, 0, this.width, this.height);
    } else {
        ctx.drawImage(img, drawX, drawY, this.width, this.height);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx.restore();
}
 
    
    drawStatusEffects(ctx, drawX, drawY) {
    }
    
    drawCharacter(ctx, drawX, drawY) {
        let mainColor = this.color;
        let skinColor = this.stunned > 0 ? '#E0E0E0' : '#FFDBAC';
        
        // –ó–∞—Ç–µ–º–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–∏
        if (this.isBlocking) {
            mainColor = this.adjustColor(this.color, -40);
        }
        if (this.stunned > 0) {
            mainColor = '#DDDDDD';
        }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ —Ç–µ–ª–∞ –ø—Ä–∏ –∞—Ç–∞–∫–∞—Ö
        let bodyLean = 0;
        let headBob = 0;
        
        if (!this.isAttacking) {
            headBob = Math.sin(Date.now() * 0.004) * 0.8;
        } else if (this.attackPhase === 'strike') {
            headBob = this.attackProgress * 3;
        }

        if (this.isAttacking && this.attackPhase !== 'none') {
            switch(this.attackPhase) {
                case 'windup':
                    bodyLean = -this.attackProgress * 4;
                    break;
                case 'strike':
                    bodyLean = this.attackProgress * 6;
                    if (this.attackType === 'heavy') bodyLean *= 1.5;
                    if (this.attackType === 'counter') bodyLean *= 2;
                    break;
                case 'recovery':
                    bodyLean = (1 - this.attackProgress) * 4;
                    break;
            }
        }
        
        // –ì–û–õ–û–í–ê —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        ctx.fillStyle = skinColor;
        ctx.fillRect(drawX + 10 + bodyLean * 0.5, drawY + headBob, 20, 20);
        
        // –¢–µ–Ω—å –ø–æ–¥ –≥–æ–ª–æ–≤–æ–π
        ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
        ctx.fillRect(drawX + 11 + bodyLean * 0.5, drawY + headBob + 18, 18, 3);
        
        // –í–û–õ–û–°–´ —Å —Ü–≤–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        let hairColor = this.name === "Tom.J" ? '#8B4513' : '#4169E1';
        ctx.fillStyle = hairColor;
        ctx.fillRect(drawX + 8 + bodyLean * 0.3, drawY - 3 + headBob, 24, 10);
        
        // –ë–ª–∏–∫–∏ –Ω–∞ –≤–æ–ª–æ—Å–∞—Ö
        ctx.fillStyle = this.adjustColor(hairColor, 30);
        ctx.fillRect(drawX + 9 + bodyLean * 0.3, drawY - 2 + headBob, 6, 2);
        ctx.fillRect(drawX + 22 + bodyLean * 0.3, drawY - 1 + headBob, 8, 2);
        
        // –ì–õ–ê–ó–ê —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        ctx.fillStyle = 'white';
        let eyeX = drawX + bodyLean * 0.5;
        ctx.fillRect(eyeX + 12, drawY + 5 + headBob, 4, 4);
        ctx.fillRect(eyeX + 24, drawY + 5 + headBob, 4, 4);
        
        // –ó—Ä–∞—á–∫–∏
        ctx.fillStyle = this.stunned > 0 ? 'red' : 'black';
        if (this.stunned > 0) {
            // X-–≥–ª–∞–∑–∞ –ø—Ä–∏ –æ–≥–ª—É—à–µ–Ω–∏–∏
            ctx.fillRect(eyeX + 13, drawY + 6 + headBob, 2, 1);
            ctx.fillRect(eyeX + 14, drawY + 5 + headBob, 1, 3);
            ctx.fillRect(eyeX + 25, drawY + 6 + headBob, 2, 1);
            ctx.fillRect(eyeX + 26, drawY + 5 + headBob, 1, 3);
        } else {
            ctx.fillRect(eyeX + 13, drawY + 6 + headBob, 2, 2);
            ctx.fillRect(eyeX + 25, drawY + 6 + headBob, 2, 2);
            
            // –ë–ª–∏–∫–∏ –≤ –≥–ª–∞–∑–∞—Ö
            ctx.fillStyle = 'white';
            ctx.fillRect(eyeX + 13, drawY + 6 + headBob, 1, 1);
            ctx.fillRect(eyeX + 25, drawY + 6 + headBob, 1, 1);
        }
        
        // –†–û–¢
        ctx.fillStyle = 'black';
        if (this.health < 30) {
            // –û—Ç–∫—Ä—ã—Ç—ã–π —Ä–æ—Ç –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ (—Ç—è–∂–µ–ª–æ–µ –¥—ã—Ö–∞–Ω–∏–µ)
            ctx.fillRect(eyeX + 17, drawY + 13 + headBob, 6, 3);
        } else {
            ctx.fillRect(eyeX + 17, drawY + 14 + headBob, 6, 2);
        }
        
        // –¢–ï–õ–û —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        let bodyY = drawY + 20;
        if (!this.isAttacking) {
            bodyY += Math.sin(Date.now() * 0.005) * 1.5;
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ç–µ–ª–∞
        ctx.fillStyle = mainColor;
        ctx.fillRect(drawX + 5 + bodyLean, bodyY, 30, 35);
        
        // –î–µ—Ç–∞–ª–∏ –∫–æ—Å—Ç—é–º–∞
        let detailColor = this.adjustColor(mainColor, -20);
        ctx.fillStyle = detailColor;
        ctx.fillRect(drawX + 10 + bodyLean, bodyY + 5, 20, 3);
        ctx.fillRect(drawX + 15 + bodyLean, bodyY + 15, 10, 2);
        
        // –ü–æ—è—Å
        ctx.fillStyle = '#8B4513';
        ctx.fillRect(drawX + 5 + bodyLean, bodyY + 25, 30, 4);
        
        // –†–£–ö–ò —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.drawArms(ctx, drawX, drawY);
        
        // –ù–û–ì–ò —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.drawLegs(ctx, drawX, drawY);
    }
    
    drawLegs(ctx, drawX, drawY) {
        let legSpread = 0;
        let leftLegOffset = 0;
        let rightLegOffset = 0;
        let legBend = 0;
        
        if (this.isAttacking && this.attackType === 'heavy') {
            legSpread = this.attackProgress * 4;
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã
        if (this.walkCycle > 0 && Math.abs(this.velocityX) > 0.5) {
            leftLegOffset = Math.sin(this.walkCycle) * 5;
            rightLegOffset = Math.sin(this.walkCycle + Math.PI) * 5;
            legBend = Math.abs(Math.sin(this.walkCycle)) * 3;
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤ –≤–æ–∑–¥—É—Ö–µ
        if (!this.onGround) {
            if (this.velocityY < 0) {
                // –ü—Ä—ã–∂–æ–∫ –≤–≤–µ—Ä—Ö - –Ω–æ–≥–∏ –ø–æ–¥–∂–∞—Ç—ã
                legBend = 10;
                leftLegOffset = -4;
                rightLegOffset = -4;
            } else {
                // –ü–∞–¥–µ–Ω–∏–µ - –Ω–æ–≥–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—é
                legBend = -6;
                leftLegOffset = 3;
                rightLegOffset = 3;
            }
        }
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—é
        if (this.landingPrep) {
            legBend += 4;
            legSpread += 3;
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —à—Ç–∞–Ω–æ–≤
        let pantsColor = '#000080';
        if (this.name === "Lyron") {
            pantsColor = '#191970';
        }
        
        ctx.fillStyle = pantsColor;
        ctx.fillRect(drawX + 8 - legSpread + leftLegOffset, drawY + 55 + legBend, 12, 20 - legBend);
        ctx.fillRect(drawX + 20 + legSpread + rightLegOffset, drawY + 55 + legBend, 12, 20 - legBend);
        
        // –¢–µ–Ω–∏ –Ω–∞ —à—Ç–∞–Ω–∞—Ö 
        ctx.fillStyle = this.adjustColor(pantsColor, -30);
        ctx.fillRect(drawX + 8 - legSpread + leftLegOffset, drawY + 65 + legBend, 12, 5);
        ctx.fillRect(drawX + 20 + legSpread + rightLegOffset, drawY + 65 + legBend, 12, 5);
        
        // –ë–û–¢–ò–ù–ö–ò —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        ctx.fillStyle = 'black';
        ctx.fillRect(drawX + 6 - legSpread + leftLegOffset, drawY + 75, 16, 8);
        ctx.fillRect(drawX + 18 + legSpread + rightLegOffset, drawY + 75, 16, 8);
        
        // –ü–æ–¥–æ—à–≤—ã
        ctx.fillStyle = '#333';
        ctx.fillRect(drawX + 6 - legSpread + leftLegOffset, drawY + 81, 16, 2);
        ctx.fillRect(drawX + 18 + legSpread + rightLegOffset, drawY + 81, 16, 2);
    }
    
    drawCharacterUI(ctx, drawX, drawY) {
        // –ü–æ–ª–æ—Å–∫–∞ –±–ª–æ–∫–∞
        if (this.isBlocking && this.blockHealth < this.maxBlockHealth) {
            let blockBarWidth = this.width * (this.blockHealth / this.maxBlockHealth);
            
            // –§–æ–Ω –ø–æ–ª–æ—Å–∫–∏ –±–ª–æ–∫–∞ –Ω–µ—Ç
            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';
            ctx.fillRect(drawX - 2, drawY - 10, this.width + 4, 5);
            
            // –°–∞–º–∞ –ø–æ–ª–æ—Å–∫–∞ –±–ª–æ–∫–∞
            ctx.fillStyle = 'rgba(0, 100, 255, 0.8)';
            ctx.fillRect(drawX, drawY - 8, blockBarWidth, 3);
            
            // –†–∞–º–∫–∞
            ctx.strokeStyle = '#00BFFF';
            ctx.lineWidth = 1;
            ctx.strokeRect(drawX, drawY - 8, this.width, 3);
        }
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è
        if (this.balance < 50) {
            let balanceBarWidth = this.width * (this.balance / this.maxBalance);
            
            ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';
            ctx.fillRect(drawX - 2, drawY - 15, this.width + 4, 4);
            
            ctx.fillStyle = 'rgba(255, 165, 0, 0.9)';
            ctx.fillRect(drawX, drawY - 14, balanceBarWidth, 2);
            
            ctx.strokeStyle = '#FFA500';
            ctx.lineWidth = 1;
            ctx.strokeRect(drawX, drawY - 14, this.width, 2);
        }
        
        // –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        ctx.fillStyle = 'black';
        ctx.font = 'bold 12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(this.name, drawX + this.width/2 + 1, drawY - 16);
        
        ctx.fillStyle = this.name === "Tom.j" ? '#FFD700' : '#00BFFF';
        ctx.fillText(this.name, drawX + this.width/2, drawY - 17);
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–º–±–æ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π
        if (this.combo > 1) {
            ctx.fillStyle = 'rgba(255, 107, 107, 0.9)';
            ctx.font = 'bold 14px Arial';
            ctx.textAlign = 'center';
            ctx.fillText(`${this.combo}x`, drawX + this.width/2, drawY - 30);
            
            // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –∫–æ–º–±–æ –µ—Å—Ç—å
            ctx.shadowColor = 'rgba(255, 107, 107, 0.8)';
            ctx.shadowBlur = 8;
            ctx.fillText(`${this.combo}x`, drawX + this.width/2, drawY - 30);
            ctx.shadowBlur = 0;
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    adjustColor(hex, amount) {
        const num = parseInt(hex.replace("#", ""), 16);
        const amt = Math.round(2.55 * amount);
        const R = (num >> 16) + amt;
        const G = (num >> 8 & 0x00FF) + amt;
        const B = (num & 0x0000FF) + amt;
        return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
            (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    }
    
    
    // –ó–∞–ø–∞—Å–Ω–æ–π —â–∏—Ç –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    drawFallbackShield(ctx, shieldX, shieldY, shieldWidth, shieldHeight) {
        // –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä—ã–π —â–∏—Ç
        ctx.fillStyle = 'rgba(120, 120, 130, 0.9)';
        ctx.fillRect(shieldX, shieldY, shieldWidth, shieldHeight);
        
        ctx.strokeStyle = 'rgba(200, 200, 210, 1)';
        ctx.lineWidth = 2;
        ctx.strokeRect(shieldX, shieldY, shieldWidth, shieldHeight);
        
        // –ö—Ä–µ—Å—Ç–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ
        ctx.strokeStyle = 'rgba(180, 180, 190, 0.8)';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(shieldX + 4, shieldY + 4);
        ctx.lineTo(shieldX + shieldWidth - 4, shieldY + shieldHeight - 4);
        ctx.moveTo(shieldX + shieldWidth - 4, shieldY + 4);
        ctx.lineTo(shieldX + 4, shieldY + shieldHeight - 4);
        ctx.stroke();
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    drawParryEffects(ctx, shieldX, shieldY, shieldWidth, shieldHeight) {
        ctx.shadowColor = 'rgba(0, 255, 255, 0.9)';
        ctx.shadowBlur = 15;
        
        // –Ø—Ä–∫–∏–π –æ—Ä–µ–æ–ª –≤–æ–∫—Ä—É–≥ —â–∏—Ç–∞
        ctx.strokeStyle = 'rgba(0, 255, 255, 0.8)';
        ctx.lineWidth = 4;
        ctx.strokeRect(shieldX - 3, shieldY - 3, shieldWidth + 6, shieldHeight + 6);
        
        // –ò—Å–∫—Ä—ã –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        for (let i = 0; i < 6; i++) {
            let angle = (Date.now() * 0.01 + i * Math.PI / 3) % (Math.PI * 2);
            let sparkX = shieldX + shieldWidth/2 + Math.cos(angle) * 25;
            let sparkY = shieldY + shieldHeight/2 + Math.sin(angle) * 25;
            
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.fillRect(sparkX - 1, sparkY - 1, 3, 3);
        }
        
        ctx.shadowBlur = 0;
    }
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ —â–∏—Ç–∞ –ø–ª—é—Å
    drawShieldHealthBar(ctx, shieldX, shieldY, shieldWidth) {
        if (this.blockHealth < this.maxBlockHealth) {
            let barWidth = shieldWidth * (this.blockHealth / this.maxBlockHealth);
            
            // –§–æ–Ω –ø–æ–ª–æ—Å–∫–∏
            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
            ctx.fillRect(shieldX, shieldY - 8, shieldWidth, 4);
            
            // –ü–æ–ª–æ—Å–∫–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–æ–Ω–∞
            let barColor = this.blockHealth > 50 ? 'rgba(0, 255, 0, 0.8)' : 'rgba(255, 0, 0, 0.8)';
            ctx.fillStyle = barColor;
            ctx.fillRect(shieldX, shieldY - 8, barWidth, 4);
        }
    }
    
    // –¢–µ–∫—Å—Ç –Ω–∞–¥ —â–∏—Ç–æ–º –µ—Å—Ç—å
    drawShieldText(ctx, shieldX, shieldY, shieldWidth) {
        if (this.isParrying && this.parryWindow > 8) {
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.font = 'bold 10px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('–ü–ê–†–ò–†–û–í–ê–ù–ò–ï!', shieldX + shieldWidth/2, shieldY - 12);
        } else {
            ctx.fillStyle = 'rgba(200, 200, 200, 0.8)';
            ctx.font = 'bold 8px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('üõ°Ô∏è', shieldX + shieldWidth/2, shieldY - 8);
        }
    }
    drawArms(ctx, drawX, drawY) {
        ctx.fillStyle = this.stunned > 0 ? '#E0E0E0' : '#FFDBAC';
        
        let leftArmX = drawX - 2;
        let rightArmX = drawX + 35;
        let armY = drawY + 25;
        let leftFistX = leftArmX + 1;
        let rightFistX = rightArmX + 1;
        let fistY = armY + 25;
        
        if (this.isBlocking) {
            leftArmX = drawX + 8;
            leftFistX = drawX + 10;
            fistY = drawY + 35;
            rightArmX = drawX + 22;
            rightFistX = drawX + 24;
            
            ctx.fillRect(leftArmX, armY, 6, 20);
            ctx.fillRect(rightArmX, armY, 6, 20);
            
            ctx.fillStyle = '#DEB887';
            ctx.fillRect(leftFistX, fistY, 8, 8);
            ctx.fillRect(rightFistX, fistY, 8, 8);
            
            
        } else if (this.isAttacking || this.attackFrame > 0) {
            let punchIntensity = this.attackFrame / 20;
            
            if (this.attackType === 'heavy') {
                punchIntensity = this.attackFrame / 30;
            }
            
            if (this.facingRight) {
                rightArmX = drawX + 35 + (30 * punchIntensity);
                rightFistX = rightArmX + 8;
                fistY = drawY + 30;
                
                ctx.fillRect(leftArmX, armY, 8, 25);
                ctx.fillRect(rightArmX, armY, 8, 25);
                
                ctx.fillStyle = '#DEB887';
                ctx.fillRect(leftFistX, armY + 25, 6, 6);
                
                let fistSize = this.attackType === 'heavy' ? 12 : 10;
                ctx.fillRect(rightFistX, fistY, fistSize, fistSize);
                
            } else {
                leftArmX = drawX - 2 - (30 * punchIntensity);
                leftFistX = leftArmX - 8;
                fistY = drawY + 30;
                
                ctx.fillRect(leftArmX, armY, 8, 25);
                ctx.fillRect(rightArmX, armY, 8, 25);
                
                ctx.fillStyle = '#DEB887';
                let fistSize = this.attackType === 'heavy' ? 12 : 10;
                ctx.fillRect(leftFistX, fistY, fistSize, fistSize);
                ctx.fillRect(rightFistX, armY + 25, 6, 6);
            }
            
        } else {
            ctx.fillRect(leftArmX, armY, 8, 25);
            ctx.fillRect(rightArmX, armY, 8, 25);
            
            ctx.fillStyle = '#DEB887';
            ctx.fillRect(leftFistX, armY + 25, 6, 6);
            ctx.fillRect(rightFistX, armY + 25, 6, 6);
        }
    }
    
    drawAttackEffect(ctx, drawX, drawY) {
        if (!this.isAttacking || this.attackPhase === 'none') return;
        
        let effectIntensity = 0;
        let effectScale = 1;
        
        switch(this.attackPhase) {
            case 'windup':
                effectIntensity = this.attackProgress * 0.3;
                effectScale = 0.5;
                break;
            case 'strike':
                effectIntensity = 0.8 + this.attackProgress * 0.2;
                effectScale = 1 + this.attackProgress * 0.5;
                break;
            case 'recovery':
                effectIntensity = (1 - this.attackProgress) * 0.6;
                effectScale = 1 + (1 - this.attackProgress) * 0.3;
                break;
        }
        
        let effectX, effectY;
        let armExtension = 0;
        
        if (this.attackPhase === 'strike') {
            armExtension = this.attackProgress * 40;
        } else if (this.attackPhase === 'windup') {
            armExtension = -this.attackProgress * 15;
        }
        
        if (this.facingRight) {
            effectX = drawX + this.width + armExtension;
            effectY = drawY + 30;
        } else {
            effectX = drawX - armExtension;
            effectY = drawY + 30;
        }
        
        let primaryColor, secondaryColor, tertiaryColor;
        switch(this.attackType) {
            case 'light':
                primaryColor = [0, 255, 0];
                secondaryColor = [50, 255, 50];
                tertiaryColor = [255, 255, 255];
                break;
            case 'heavy':
                primaryColor = [255, 0, 0];
                secondaryColor = [255, 100, 0];
                tertiaryColor = [255, 255, 0];
                break;
            case 'counter':
                primaryColor = [255, 0, 255];
                secondaryColor = [150, 0, 255];
                tertiaryColor = [255, 255, 255];
                break;
            default:
                primaryColor = [255, 255, 255];
                secondaryColor = [200, 200, 255];
                tertiaryColor = [255, 255, 0];
        }
        
        if (this.attackPhase === 'strike') {
            for (let i = 0; i < 4; i++) {
                let waveProgress = (this.attackProgress + i * 0.2) % 1;
                let waveSize = 20 + waveProgress * 40 * effectScale;
                let waveOpacity = (1 - waveProgress) * effectIntensity * 0.8;
                
                ctx.strokeStyle = `rgba(${primaryColor[0]}, ${primaryColor[1]}, ${primaryColor[2]}, ${waveOpacity})`;
                ctx.lineWidth = 3 + i;
                ctx.beginPath();
                ctx.arc(effectX, effectY, waveSize, 0, 2 * Math.PI);
                ctx.stroke();
            }
        }
        
        let flashSize = 15 * effectIntensity * effectScale;
        ctx.fillStyle = `rgba(${tertiaryColor[0]}, ${tertiaryColor[1]}, ${tertiaryColor[2]}, ${effectIntensity * 0.9})`;
        ctx.beginPath();
        ctx.arc(effectX, effectY, flashSize, 0, 2 * Math.PI);
        ctx.fill();
        
        let particleCount = this.attackType === 'counter' ? 16 : (this.attackType === 'heavy' ? 12 : 8);
        for (let i = 0; i < particleCount; i++) {
            let angle = (i / particleCount) * Math.PI * 2 + (Date.now() * 0.01);
            let distance = (20 + Math.random() * 20) * effectIntensity * effectScale;
            let particleX = effectX + Math.cos(angle) * distance;
            let particleY = effectY + Math.sin(angle) * distance;
            
            let particleSize = (2 + Math.random() * 4) * effectIntensity;
            let particleOpacity = effectIntensity * (0.6 + Math.random() * 0.4);
            
            ctx.fillStyle = `rgba(${secondaryColor[0]}, ${secondaryColor[1]}, ${secondaryColor[2]}, ${particleOpacity})`;
            ctx.beginPath();
            ctx.arc(particleX, particleY, particleSize, 0, 2 * Math.PI);
            ctx.fill();
        }
        
        if ((this.attackType === 'counter' || this.attackType === 'heavy') && this.attackPhase === 'strike') {
            this.screenShake = Math.max(this.screenShake, 8 * effectIntensity);
        }
    }
    
    drawStar(ctx, x, y, radius) {
        ctx.fillStyle = 'yellow';
        ctx.beginPath();
        for (let i = 0; i < 5; i++) {
            let angle = (i * 2 * Math.PI) / 5;
            let xPos = x + Math.cos(angle) * radius;
            let yPos = y + Math.sin(angle) * radius;
            if (i === 0) ctx.moveTo(xPos, yPos);
            else ctx.lineTo(xPos, yPos);
        }
        ctx.closePath();
        ctx.fill();
    }
    
    moveLeft() {
        this.facingRight = false;
        
        // –ü—Ä–æ—Å—Ç–æ–µ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ 
        if (this.onGround) {
            this.velocityX = -this.moveSpeed;
        } else {
            // –í –≤–æ–∑–¥—É—Ö–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ —Å –º–µ–Ω—å—à–µ–π —Å–∏–ª–æ–π
            this.velocityX = Math.max(this.velocityX - 2, -this.moveSpeed * this.airControl);
        }
    }
    
    moveRight() {
        this.facingRight = true;
        
        // –ü—Ä–æ—Å—Ç–æ–µ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (this.onGround) {
            this.velocityX = this.moveSpeed;
        } else {
            // –í –≤–æ–∑–¥—É—Ö–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ —Å –º–µ–Ω—å—à–µ–π —Å–∏–ª–æ–π
            this.velocityX = Math.min(this.velocityX + 2, this.moveSpeed * this.airControl);
        }
    }
    
    jump() {
        // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä—ã–∂–æ–∫ —Ç–æ–ª—å–∫–æ —Å –∑–µ–º–ª–∏ –∏–ª–∏ –∫–æ–π–æ—Ç-—Ç–∞–π–º
        if (this.onGround || this.coyoteTime > 0) {
            this.performJump();
        } else {
            // –ë—É—Ñ–µ—Ä –ø—Ä—ã–∂–∫–∞ - –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –ø—Ä—ã–∂–æ–∫ —á—É—Ç—å —Ä–∞–Ω—å—à–µ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
            this.jumpBuffer = 8;
        }
    }
    
    performJump() {
        this.velocityY = -this.jumpPower;
        this.onGround = false;
        this.coyoteTime = 0;
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä—ã–∂–æ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        if (this.velocityX < -1) {
            this.velocityX -= 4; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–ª–µ–≤–æ
        } else if (this.velocityX > 1) {
            this.velocityX += 4; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–ø—Ä–∞–≤–æ
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä—ã–∂–∫–∞
        this.jumpEffect = 10;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø—Ä—ã–∂–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏
    checkJumpBuffer() {
        if (this.jumpBuffer > 0 && this.onGround) {
            this.performJump();
            this.jumpBuffer = 0;
        }
    }
    
    block() {
        this.isBlocking = true;
        this.isParrying = true;
        this.parryWindow = 12;
        return true;
    }
    
    stopBlock() {
        this.isBlocking = false;
    }
    
    lightAttack(target) {
        if (this.lightAttackCooldown > 0) return false;
        
        this.isAttacking = true;
        this.attackType = 'light';
        this.attackPhase = 'windup';
        this.attackProgress = 0;
        this.lightAttackCooldown = 20;
        this.attackFrame = 15;
        
        setTimeout(() => {
            if (this.attackType === 'light') {
                this.isAttacking = false;
                this.attackType = 'none';
                this.attackPhase = 'none';
            }
        }, 250);
        
        // üí° –£–ß–ò–¢–´–í–ê–ï–ú –£–°–ò–õ–ï–ù–ò–ï XEALIST
        let damage = 15;
        if (this.name === "Xealist" && this.isPowered) {
            const characterConfig = CHARACTERS.find(char => char.name === this.name);
            const multiplier = characterConfig ? characterConfig.damageMultiplier : 2;
            damage = damage * multiplier;
            console.log(`üí° –£–°–ò–õ–ï–ù–ù–ê–Ø –∞—Ç–∞–∫–∞! –£—Ä–æ–Ω: ${damage} (–±—ã–ª–æ ${15})`);
        }
        
        return this.executeAttack(target, damage, 75, 'light');
    }
    
    heavyAttack(target) {
        if (this.heavyAttackCooldown > 0) return false;
        
        this.isAttacking = true;
        this.attackType = 'heavy';
        this.attackPhase = 'windup';
        this.attackProgress = 0;
        this.heavyAttackCooldown = 60;
        this.attackFrame = 25;
        
        setTimeout(() => {
            if (this.attackType === 'heavy') {
                this.isAttacking = false;
                this.attackType = 'none';
                this.attackPhase = 'none';
            }
        }, 420);
        
        // üí° –£–ß–ò–¢–´–í–ê–ï–ú –£–°–ò–õ–ï–ù–ò–ï XEALIST
        let damage = 25;
        if (this.name === "Xealist" && this.isPowered) {
            const characterConfig = CHARACTERS.find(char => char.name === this.name);
            const multiplier = characterConfig ? characterConfig.damageMultiplier : 2;
            damage = damage * multiplier;
            console.log(`üí° –£–°–ò–õ–ï–ù–ù–ê–Ø —Ç—è–∂–µ–ª–∞—è –∞—Ç–∞–∫–∞! –£—Ä–æ–Ω: ${damage} (–±—ã–ª–æ ${25})`);
        }
        
        return this.executeAttack(target, damage, 85, 'heavy');
    }
    
    counterAttack(target) {
        if (this.canCounter <= 0) return false;
        
        this.isAttacking = true;
        this.isCountering = true;
        this.attackType = 'counter';
        this.attackPhase = 'windup';
        this.attackProgress = 0;
        this.attackFrame = 20;
        this.canCounter = 0;
        
        setTimeout(() => {
            this.isAttacking = false;
            this.isCountering = false;
            this.attackType = 'none';
            this.attackPhase = 'none';
        }, 330);
        
        return this.executeAttack(target, 35, 90, 'counter');
    }
    
    executeAttack(target, baseDamage, range, attackType) {
        let distance = Math.abs(this.x - target.x);
        if (distance > range) return false;
        
        if (target.isBlocking) {
            if (target.parryWindow > 0 && target.isParrying) {
                console.log(`‚ö° –ü–ê–†–ò–†–û–í–ê–ù–ò–ï! ${target.name} –ø–∞—Ä–∏—Ä–æ–≤–∞–ª –∞—Ç–∞–∫—É ${this.name}!`);
                
                target.lastParryTime = Date.now();
                target.canCounter = 60;
                this.vulnerableToCounter = 60;
                
                this.stunned = 15;
                this.lightAttackCooldown = Math.max(this.lightAttackCooldown, 30);
                this.heavyAttackCooldown = Math.max(this.heavyAttackCooldown, 30);
                
                target.screenShake = 8;
                this.screenShake = 5;
                
                return 'parried';
            } else {
                let damage = Math.floor(baseDamage * 0.3);
                target.takeDamage(damage);
                target.blockHealth -= 10;
                
                console.log(`üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É–¥–∞—Ä! –£—Ä–æ–Ω: ${damage}`);
                return 'blocked';
            }
        }
        
        let damage = baseDamage;
        
        if (attackType === 'counter' && target.vulnerableToCounter > 0) {
            damage = Math.floor(damage * 1.5);
            target.stunned = 30;
            target.screenShake = 15;
            console.log(`üí• –ö–û–ù–¢–†–ê–¢–ê–ö–ê! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: ${damage}!`);
        }
        
        target.takeDamage(damage);
        
        if (attackType === 'heavy') {
            target.balance -= 15;
            target.knockback = this.facingRight ? 8 : -8;
        }
        
        if (Date.now() - this.lastAttackTime < (attackType === 'counter' ? 2500 : 1500)) {
            this.combo++;
        } else {
            this.combo = 1;
        }
        this.lastAttackTime = Date.now();
        
        return 'hit';
    }
    
    takeDamage(amount) {
        this.health -= amount;
        if (this.health < 0) this.health = 0;
        
        this.hitEffect = 10;
        this.velocityX += this.facingRight ? -3 : 3;
    }
    
    // ‚ú® –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–ü–û–°–û–ë–ù–û–°–¢–ò MAGNITUDE WAVE ‚ú®
    
    useMagnitudeWave() {
    if (this.abilityCooldown > 0 || this.name !== "Lyron") {
        console.log(`‚ùå –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(this.abilityCooldown / 60)} —Å–µ–∫`);
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (!gameRunning || !gameStarted) {
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return false;
    }
    
    console.log(`üåä ${this.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MAGNITUDE WAVE!`);
    
    this.abilityActive = true;
    this.abilityDuration = 180;
    this.abilityCooldown = 400;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤–æ–ª–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!this.magnitudeWaves) {
        this.magnitudeWaves = [];
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –≤–æ–ª–Ω—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    this.createMagnitudeWave(0);
    
    // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω—ã —á–µ—Ä–µ–∑ update() –≤–º–µ—Å—Ç–æ setTimeout
this.waveTimer = 0;
this.nextWaveIndex = 1;
this.waveInterval = 18; // 18 –∫–∞–¥—Ä–æ–≤ = ~300–º—Å –ø—Ä–∏ 60 FPS
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
    const originalSpeed = this.moveSpeed;
    const originalJump = this.jumpPower;
    
    this.moveSpeed *= 1.3;
    this.jumpPower *= 1.2;
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    const endTimer = setTimeout(() => {
        if (this) {
            this.abilityActive = false;
            this.moveSpeed = originalSpeed;
            this.jumpPower = originalJump;
            
            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            if (this.waveTimers) {
                this.waveTimers.forEach(timer => clearTimeout(timer));
                this.waveTimers = null;
            }
            
            console.log(`‚ö° Magnitude Wave –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        }
    }, 3000);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä
    this.abilityEndTimer = endTimer;
    
    return true;
}
  // üçæ –ú–ï–¢–û–î –ë–†–û–°–ö–ê –ë–£–¢–´–õ–ö–ò –î–õ–Ø VLUDBLET
    throwBottle() {
    if (this.bottleThrowCooldown > 0 || this.name !== "vludblet") {
        console.log(`‚ùå –ë—Ä–æ—Å–æ–∫ –±—É—Ç—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(this.bottleThrowCooldown / 60)} —Å–µ–∫`);
        return false;
    }
    
    
    if (!gameRunning || !gameStarted) {
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return false;
    }
    
    console.log(`üçæ ${this.name} –±—Ä–æ—Å–∞–µ—Ç –±—É—Ç—ã–ª–∫—É –ø—Ä—è–º–æ!`);
    
    
    const bottle = {
        x: this.x + (this.facingRight ? this.width : 0),
        y: this.y + this.height / 2, // üéØ –ù–∞ —É—Ä–æ–≤–Ω–µ —Ü–µ–Ω—Ç—Ä–∞
        velocityX: (this.facingRight ? 1 : -1) * this.bottleSpeed,
        velocityY: 0, // üöÄ –ë–ï–ó –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        gravity: 0,  // üöÄ –ë–ï–ó –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
        damage: this.bottleDamage,
        bounces: 0,
        maxBounces: 0, // üöÄ –ë–ï–ó –æ—Ç—Å–∫–æ–∫–æ–≤
        rotation: 0,
        hasHit: false,
        thrower: this,
        straightFlight: true // üéØ –§–ª–∞–≥ –ø—Ä—è–º–æ–≥–æ –ø–æ–ª–µ—Ç–∞
    };
    
    if (!this.bottles) {
        this.bottles = [];
    }
    
    this.bottles.push(bottle);
    this.bottleThrowCooldown = 300;
    
    return true;
}
    // üü¢ –ú–ï–¢–û–î –ë–†–û–°–ö–ê –ó–ï–õ–ï–ù–û–ô –ñ–ò–ñ–ò –î–õ–Ø TOM.J
throwSlime() {
    if (this.slimeThrowCooldown > 0 || this.name !== "Tom.J") {
        console.log(`‚ùå –ë—Ä–æ—Å–æ–∫ —Å–ª–∞–π–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(this.slimeThrowCooldown / 60)} —Å–µ–∫`);
        return false;
    }
    
    if (!gameRunning || !gameStarted) {
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return false;
    }
    
    
    console.log(`üü¢ ${this.name} —Å—Ç—Ä–µ–ª—è–µ—Ç –∑–µ–ª–µ–Ω–æ–π –∂–∏–∂–æ–π!`);
    
    
    const slime = {
        x: this.x + (this.facingRight ? this.width : 0),
        y: this.y + this.height / 2 - 10,
        velocityX: (this.facingRight ? 1 : -1) * this.slimeSpeed,
        velocityY: -3, // –ù–µ–±–æ–ª—å—à–∞—è –¥—É–≥–∞ –≤–≤–µ—Ä—Ö
        gravity: this.slimeGravity,
        damage: this.slimeDamage,
        bounces: 0,
        maxBounces: this.maxSlimeBounces,
        rotation: 0,
        hasHit: false,
        thrower: this,
        size: this.slimeSize,
        trail: [] // –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–ª–µ–¥–∞
    };
    
    if (!this.slimes) {
        this.slimes = [];
    }
    
    this.slimes.push(slime);
    this.slimeThrowCooldown = 250;
    
    return true;
}

// ‚ö° –ú–ï–¢–û–î –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò –î–õ–Ø NOXX
electricTeleport() {
    if (this.teleportCooldown > 0 || this.name !== "Noxx") {
        console.log(`‚ùå –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(this.teleportCooldown / 60)} —Å–µ–∫`);
        return false;
    }
    
    if (!gameRunning || !gameStarted) {
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return false;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å (–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)
    let target;
    if (this === player && bot) {
        target = bot;
    } else if (this === bot && player) {
        target = player;
    } else {
        console.log('‚ùå –¶–µ–ª—å –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        return false;
    }
    
    console.log(`‚ö° ${this.name} –Ω–∞—á–∏–Ω–∞–µ—Ç ELECTRIC TELEPORT STRIKE!`);
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    this.teleportStartX = this.x;
    this.teleportStartY = this.y;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—è–¥–æ–º —Å —Ü–µ–ª—å—é (—Å–ø—Ä–∞–≤–∞ –∏–ª–∏ —Å–ª–µ–≤–∞)
    const targetSide = Math.random() < 0.5 ? -1 : 1; // -1 = —Å–ª–µ–≤–∞, 1 = —Å–ø—Ä–∞–≤–∞
    this.teleportTargetX = target.x + (targetSide * 80); // –ù–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 80 –ø–∏–∫—Å–µ–ª–µ–π
    this.teleportTargetY = target.y;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
    this.teleportTargetX = Math.max(0, Math.min(this.teleportTargetX, canvas.width - this.width));
    this.teleportTargetY = Math.max(0, Math.min(this.teleportTargetY, canvas.height - this.height - 20));
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
    this.isTeleporting = true;
    this.teleportPhase = 'disappear';
    this.teleportTimer = 20; // 20 –∫–∞–¥—Ä–æ–≤ –Ω–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
    this.teleportCooldown = 360; // 6 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω
    this.teleportGlow = 30;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.createElectricParticles(this.x + this.width/2, this.y + this.height/2, 15);
    
    return true;
}
// ü§º –ú–ï–¢–û–î –ú–û–©–ù–û–ì–û –ë–†–û–°–ö–ê –î–õ–Ø BURHAN
powerGrapple() {
    if (this.grappleCooldown > 0 || this.name !== "Burhan") {
        console.log(`‚ùå –ë—Ä–æ—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(this.grappleCooldown / 60)} —Å–µ–∫`);
        return false;
    }
    
    if (!gameRunning || !gameStarted) {
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return false;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å (–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)
    let target;
    if (this === player && bot) {
        target = bot;
    } else if (this === bot && player) {
        target = player;
    } else {
        console.log('‚ùå –¶–µ–ª—å –¥–ª—è –±—Ä–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    const distance = Math.abs(this.x - target.x);
    const characterConfig = CHARACTERS.find(char => char.name === this.name);
    const grappleRange = characterConfig ? characterConfig.grappleRange : 100;
    
    if (distance > grappleRange) {
        console.log(`‚ùå –¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${distance}, –Ω—É–∂–Ω–æ: ${grappleRange}`);
        return false;
    }
    
    console.log(`ü§º ${this.name} –Ω–∞—á–∏–Ω–∞–µ—Ç POWER GRAPPLE!`);
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç
    this.isGrappling = true;
    this.grapplePhase = 'grab';
    this.grappleTimer = 20; // 20 –∫–∞–¥—Ä–æ–≤ –Ω–∞ –∑–∞—Ö–≤–∞—Ç
    this.grappleTarget = target;
    this.grappleCooldown = characterConfig ? characterConfig.abilityCooldown : 400;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–∏
    this.originalTargetX = target.x;
    this.originalTargetY = target.y;
    this.liftHeight = 0;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –æ–±–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    this.velocityX = 0;
    this.velocityY = 0;
    target.velocityX = 0;
    target.velocityY = 0;
    target.stunned = 15; // –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥–ª—É—à–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ
    
    console.log(`ü§º ${this.name} –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç ${target.name}!`);
    return true;
}
// üü¢ –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–õ–ê–ô–ú–û–í
updateSlimes() {
    if (this.name !== "Tom.J" || !this.slimes) return;
    
    try {
        for (let i = this.slimes.length - 1; i >= 0; i--) {
            const slime = this.slimes[i];
            
            if (!slime) {
                this.slimes.splice(i, 1);
                continue;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ —Å–ª–µ–¥
            slime.trail.push({x: slime.x, y: slime.y, life: 20});
            if (slime.trail.length > 10) slime.trail.shift();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É —Å–ª–∞–π–º–∞
            slime.velocityY += slime.gravity;
            slime.x += slime.velocityX;
            slime.y += slime.velocityY;
            slime.rotation += 0.15;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∑–µ–º–ª–µ–π
            if (slime.y > canvas.height - 50) {
                slime.y = canvas.height - 50;
                
                if (slime.bounces < slime.maxBounces) {
                    slime.velocityY = -slime.velocityY * 0.7;
                    slime.velocityX *= 0.9;
                    slime.bounces++;
                    this.createSlimeParticles(slime.x, slime.y, 3);
                    console.log(`üü¢ –°–ª–∞–π–º –æ—Ç—Å–∫–æ—á–∏–ª! –û—Ç—Å–∫–æ–∫ ${slime.bounces}/${slime.maxBounces}`);
                } else {
                    // –°–ª–∞–π–º —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞–µ—Ç—Å—è
                    this.createSlimeExplosion(slime.x, slime.y);
                    this.slimes.splice(i, 1);
                    console.log(`üíö –°–ª–∞–π–º —Ä–∞–∑–±—Ä—ã–∑–≥–∞–ª—Å—è!`);
                    continue;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º
            if (this === player && bot && !slime.hasHit) {
                this.checkSlimeCollision(slime, bot, i);
            } else if (this === bot && player && !slime.hasHit) {
                this.checkSlimeCollision(slime, player, i);
            }
            
            // –£–¥–∞–ª—è–µ–º —Å–ª–∞–π–º –µ—Å–ª–∏ –æ–Ω —É–ª–µ—Ç–µ–ª –∑–∞ —ç–∫—Ä–∞–Ω
            if (slime.x < -100 || slime.x > canvas.width + 100) {
                this.slimes.splice(i, 1);
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateSlimes:', error);
        this.slimes = [];
    }
}
// üü¢ –ú–ï–¢–û–î–´ –†–ò–°–û–í–ê–ù–ò–Ø –°–õ–ê–ô–ú–û–í
drawSlimes(ctx) {
    if (this.name !== "Tom.J" || !this.slimes) return;
    
    this.slimes.forEach(slime => {
        // –†–∏—Å—É–µ–º —Å–ª–µ–¥ —Å–ª–∞–π–º–∞
        if (slime.trail) {
            slime.trail.forEach((point, index) => {
                const alpha = point.life / 20 * (index / slime.trail.length);
                ctx.fillStyle = `rgba(0, 255, 0, ${alpha * 0.3})`;
                ctx.beginPath();
                ctx.arc(point.x, point.y, 3, 0, 2 * Math.PI);
                ctx.fill();
                point.life--;
            });
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏ —Å–ª–µ–¥–∞
            slime.trail = slime.trail.filter(point => point.life > 0);
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–∞–π–º
        ctx.save();
        ctx.translate(slime.x + slime.size/2, slime.y + slime.size/2);
        ctx.rotate(slime.rotation);
        
        // –¢–µ–ª–æ —Å–ª–∞–π–º–∞
        ctx.fillStyle = '#00FF00';
        ctx.beginPath();
        ctx.arc(0, 0, slime.size/2, 0, 2 * Math.PI);
        ctx.fill();
        
        // –ë–ª–∏–∫ –Ω–∞ —Å–ª–∞–π–º–µ
        ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
        ctx.beginPath();
        ctx.arc(-slime.size/6, -slime.size/6, slime.size/4, 0, 2 * Math.PI);
        ctx.fill();
        
        ctx.restore();
    });
}

drawSlimeParticles(ctx) {
    if (!this.slimeParticles) return;
    
    this.slimeParticles.forEach(particle => {
        const alpha = particle.life / particle.maxLife;
        ctx.fillStyle = `rgba(0, 255, 0, ${alpha})`;
        ctx.fillRect(particle.x - particle.size/2, particle.y - particle.size/2, particle.size, particle.size);
    });
}

drawSlimeExplosions(ctx) {
    if (!this.slimeExplosions) return;
    
    this.slimeExplosions.forEach(explosion => {
        const alpha = explosion.life / explosion.maxLife;
        ctx.strokeStyle = `rgba(0, 255, 0, ${alpha})`;
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.arc(explosion.x, explosion.y, explosion.radius, 0, 2 * Math.PI);
        ctx.stroke();
    });
}

drawSlimeThrowCooldown(ctx, x, y) {
    if (this.name !== "Tom.J" || this.slimeThrowCooldown <= 0) return;
    
    const cooldownPercent = this.slimeThrowCooldown / 250;
    ctx.fillStyle = 'rgba(0, 255, 0, 0.8)';
    ctx.fillRect(x - 30, y - 30, 60 * (1 - cooldownPercent), 6);
}

updateSlimeParticles() {
    if (!this.slimeParticles) return;
    
    for (let i = this.slimeParticles.length - 1; i >= 0; i--) {
        const particle = this.slimeParticles[i];
        
        particle.x += particle.velocityX;
        particle.y += particle.velocityY;
        particle.velocityY += 0.3;
        particle.life--;
        
        if (particle.bounce && particle.y > canvas.height - 30) {
            particle.y = canvas.height - 30;
            particle.velocityY = -particle.velocityY * 0.5;
        }
        
        if (particle.life <= 0) {
            this.slimeParticles.splice(i, 1);
        }
    }
}
// üü¢ –ú–ï–¢–û–î –ü–†–û–í–ï–†–ö–ò –°–¢–û–õ–ö–ù–û–í–ï–ù–ò–Ø –°–õ–ê–ô–ú–ê
checkSlimeCollision(slime, target, slimeIndex) {
    try {
        if (slime.x < target.x + target.width &&
            slime.x + slime.size > target.x &&
            slime.y < target.y + target.height &&
            slime.y + slime.size > target.y) {
            
            slime.hasHit = true;
            
            // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
            if (target.takeDamage) {
                target.takeDamage(slime.damage);
            }
            
            // –û—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ –∏ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
            const knockbackForce = 8;
            target.knockback += (slime.velocityX > 0) ? knockbackForce : -knockbackForce;
            target.velocityX *= 0.7; // –ó–∞–º–µ–¥–ª—è–µ–º –æ—Ç –ª–∏–ø–∫–æ—Å—Ç–∏ —Å–ª–∏–∑–∏
            target.screenShake = Math.max(target.screenShake, 5);
            
            console.log(`üü¢üí• –°–ª–∞–π–º –ø–æ–ø–∞–ª –≤ ${target.name}! –£—Ä–æ–Ω: ${slime.damage}`);
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
            this.createSlimeExplosion(slime.x, slime.y);
            
            // –£–¥–∞–ª—è–µ–º —Å–ª–∞–π–º
            this.slimes.splice(slimeIndex, 1);
        }
    } catch (collisionError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–ª–∞–π–º–∞:', collisionError);
        slime.hasHit = true;
    }
}

// üü¢ –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø –í–ó–†–´–í–ê –°–õ–ê–ô–ú–ê
createSlimeExplosion(x, y) {
    if (!this.slimeExplosions) {
        this.slimeExplosions = [];
    }
    if (!this.slimeParticles) {
        this.slimeParticles = [];
    }
    
    const explosion = {
        x: x,
        y: y,
        radius: 0,
        maxRadius: 50,
        life: 40,
        maxLife: 40
    };
    
    this.slimeExplosions.push(explosion);
    
    // –°–æ–∑–¥–∞–µ–º –±—Ä—ã–∑–≥–∏ —Å–ª–∏–∑–∏
    for (let i = 0; i < 12; i++) {
        const angle = (i / 12) * Math.PI * 2;
        const particle = {
            x: x,
            y: y,
            velocityX: Math.cos(angle) * (2 + Math.random() * 6),
            velocityY: Math.sin(angle) * (2 + Math.random() * 6) - 3,
            life: 50 + Math.random() * 30,
            maxLife: 80,
            size: 3 + Math.random() * 4,
            bounce: true
        };
        
        this.slimeParticles.push(particle);
    }
}

// üü¢ –°–û–ó–î–ê–ù–ò–ï –ß–ê–°–¢–ò–¶ –°–õ–ò–ó–ò
createSlimeParticles(x, y, count) {
    if (!this.slimeParticles) {
        this.slimeParticles = [];
    }
    
    for (let i = 0; i < count; i++) {
        const particle = {
            x: x + (Math.random() - 0.5) * 20,
            y: y + (Math.random() - 0.5) * 20,
            velocityX: (Math.random() - 0.5) * 4,
            velocityY: (Math.random() - 0.5) * 4 - 2,
            life: 30 + Math.random() * 20,
            maxLife: 50,
            size: 2 + Math.random() * 3,
            bounce: false
        };
        
        this.slimeParticles.push(particle);
    }
}
// ‚ö° –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò –î–õ–Ø NOXX
updateTeleportation() {
    if (this.name !== "Noxx" || !this.isTeleporting) return;
    
    this.teleportTimer--;
    
    switch (this.teleportPhase) {
        case 'disappear':
            // –§–∞–∑–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            if (this.teleportTimer <= 0) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ –ø–æ—è–≤–ª–µ–Ω–∏—è
                this.teleportPhase = 'appear';
                this.teleportTimer = 15; // 15 –∫–∞–¥—Ä–æ–≤ –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                
                // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º—Å—è –≤ —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                this.x = this.teleportTargetX;
                this.y = this.teleportTargetY;
                
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—è–≤–ª–µ–Ω–∏—è
                this.createElectricParticles(this.x + this.width/2, this.y + this.height/2, 20);
                this.teleportGlow = 40;
                
                console.log(`‚ö° ${this.name} –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ä—è–¥–æ–º —Å —Ü–µ–ª—å—é!`);
            }
            break;
            
        case 'appear':
            // –§–∞–∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è
            if (this.teleportTimer <= 0) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ –∞—Ç–∞–∫–∏
                this.teleportPhase = 'strike';
                this.teleportTimer = 10; // 10 –∫–∞–¥—Ä–æ–≤ –Ω–∞ –∞—Ç–∞–∫—É
                
                console.log(`‚ö° ${this.name} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—Ç–∞–∫–µ!`);
            }
            break;
            
        case 'strike':
            // –§–∞–∑–∞ –∞—Ç–∞–∫–∏
            if (this.teleportTimer <= 0) {
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç-–∞—Ç–∞–∫—É
                this.executeTeleportStrike();
                
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
                this.isTeleporting = false;
                this.teleportPhase = 'none';
                this.teleportTimer = 0;
                
                console.log(`‚ö° ${this.name} –∑–∞–≤–µ—Ä—à–∞–µ—Ç Electric Teleport Strike!`);
            }
            break;
    }
}

executeTeleportStrike() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å
    let target;
    if (this === player && bot) {
        target = bot;
    } else if (this === bot && player) {
        target = player;
    } else {
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ —Ü–µ–ª–∏
    const distance = Math.abs(this.x - target.x);
    
    if (distance <= 120) { // –í —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const characterConfig = CHARACTERS.find(char => char.name === this.name);
        const damage = characterConfig ? characterConfig.teleportDamage : 40;
        const stunDuration = characterConfig ? characterConfig.teleportStunDuration : 45;
        
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        if (target.takeDamage) {
            target.takeDamage(damage);
        }
        
        // –û–≥–ª—É—à–∞–µ–º —Ü–µ–ª—å
        target.stunned = stunDuration;
        
        // –°–∏–ª—å–Ω–æ–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
        const knockbackForce = 15;
        target.knockback += (target.x > this.x) ? knockbackForce : -knockbackForce;
        target.velocityY = Math.min(target.velocityY, -10); // –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–≤–µ—Ä—Ö
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã —ç–∫—Ä–∞–Ω–∞
        target.screenShake = Math.max(target.screenShake, 12);
        this.screenShake = Math.max(this.screenShake, 8);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ—â–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.createElectricParticles(target.x + target.width/2, target.y + target.height/2, 25);
        
        console.log(`‚ö°üí• Electric Teleport Strike –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: ${damage}, –û–≥–ª—É—à–µ–Ω–∏–µ: ${stunDuration} –∫–∞–¥—Ä–æ–≤`);
        
        return 'hit';
    } else {
        console.log(`‚ö°‚ùå Electric Teleport Strike –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${distance}`);
        return 'miss';
    }
}
// ü§º –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ó–ê–•–í–ê–¢–ê –î–õ–Ø BURHAN
updateGrappling() {
    if (this.name !== "Burhan" || !this.isGrappling) return;
    
    this.grappleTimer--;
    
    switch (this.grapplePhase) {
        case 'grab':
            // –§–∞–∑–∞ –∑–∞—Ö–≤–∞—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
            if (this.grappleTimer <= 0) {
                this.grapplePhase = 'throw';
                this.grappleTimer = 30; // 30 –∫–∞–¥—Ä–æ–≤ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é –±—Ä–æ—Å–∫–∞
                console.log(`ü§º ${this.name} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –±—Ä–æ—Å–∫—É!`);
            }
            break;
            
    case 'throw':
    // –§–∞–∑–∞ –±—Ä–æ—Å–∫–∞ - –ø—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞ –≤–≤–µ—Ä—Ö
    if (this.grappleTimer <= 0) {
        this.executeSimpleThrow();  // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–´–ó–û–í –ù–û–í–û–ì–û –ú–ï–¢–û–î–ê!
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—Ö–≤–∞—Ç
        this.isGrappling = false;
        this.grapplePhase = 'none';
        this.grappleTimer = 0;
        this.grappleTarget = null;
        this.liftHeight = 0;
        
        console.log(`ü§º ${this.name} –∑–∞–≤–µ—Ä—à–∞–µ—Ç Power Grapple!`);
    }
    break;
    }
}

executeGrappleThrow() {
    if (!this.grappleTarget) return;
    
    const target = this.grappleTarget;
    const characterConfig = CHARACTERS.find(char => char.name === this.name);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ—Å–∫–∞
    const throwDamage = characterConfig ? characterConfig.throwDamage : 45;
    const throwForce = characterConfig ? characterConfig.throwForce : 25;
    const stunDuration = characterConfig ? characterConfig.stunDuration : 60;
    
    // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
    if (target.takeDamage) {
        target.takeDamage(throwDamage);
    }
    
    // –ú–æ—â–Ω—ã–π –±—Ä–æ—Å–æ–∫ –≤ —Å—Ç–æ—Ä–æ–Ω—É
    const throwDirection = this.facingRight ? 1 : -1;
    target.velocityX = throwDirection * throwForce;
    target.velocityY = -15; // –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–≤–µ—Ä—Ö
    
    // –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –æ–≥–ª—É—à–µ–Ω–∏–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
    target.stunned = stunDuration;
    target.knockback = throwDirection * (throwForce * 0.8);
    target.screenShake = Math.max(target.screenShake, 15);
    this.screenShake = Math.max(this.screenShake, 10);
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –±—Ä–æ—Å–∫–∞
    this.createThrowParticles(target.x + target.width/2, target.y + target.height/2);
    
    console.log(`ü§ºüí• Power Grapple –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: ${throwDamage}, –û–≥–ª—É—à–µ–Ω–∏–µ: ${stunDuration} –∫–∞–¥—Ä–æ–≤`);
    
    return 'hit';
}
executeSimpleThrow() {
    if (!this.grappleTarget) return;
    
    const target = this.grappleTarget;
    const characterConfig = CHARACTERS.find(char => char.name === this.name);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ—Å–∫–∞
    const throwDamage = characterConfig ? characterConfig.throwDamage : 45;
    const stunDuration = characterConfig ? characterConfig.stunDuration : 60;
    
    // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
    if (target.takeDamage) {
        target.takeDamage(throwDamage);
    }
    
    // –ú–û–©–ù–´–ô –ë–†–û–°–û–ö –ó–ê –°–ü–ò–ù–£
    const throwDirection = this.facingRight ? -1 : 1;  // –û–ë–†–ê–¢–ù–û–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∑–∞ —Å–ø–∏–Ω—É)
    target.velocityX = throwDirection * 60;             // –°–ò–õ–¨–ù–´–ô –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –±—Ä–æ—Å–æ–∫
    target.velocityY = -15;                             // –°–ò–õ–¨–ù–´–ô –ø–æ–¥–±—Ä–æ—Å –≤–≤–µ—Ä—Ö
    
    // –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –æ–≥–ª—É—à–µ–Ω–∏–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
    target.stunned = stunDuration;
    target.knockback = throwDirection * 25;             // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
    target.screenShake = Math.max(target.screenShake, 15);  // –°–∏–ª—å–Ω–∞—è —Ç—Ä—è—Å–∫–∞
    this.screenShake = Math.max(this.screenShake, 10);      // –¢—Ä—è—Å–∫–∞ –¥–ª—è Burhan
    
    console.log(`ü§ºüí• Power Grapple! –ú–û–©–ù–´–ô –ë–†–û–°–û–ö –ó–ê –°–ü–ò–ù–£! –£—Ä–æ–Ω: ${throwDamage}`);
    
    return 'hit';
}

updateElectricParticles() {
    if (!this.electricParticles) return;
    
    for (let i = this.electricParticles.length - 1; i >= 0; i--) {
        const particle = this.electricParticles[i];
        
        particle.x += particle.velocityX;
        particle.y += particle.velocityY;
        particle.life--;
        
        // –≠—Ñ—Ñ–µ–∫—Ç –º–æ–ª–Ω–∏–∏ - —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–µ—Ä–≥–∏–≤–∞–Ω–∏—è
        particle.x += (Math.random() - 0.5) * 2;
        particle.y += (Math.random() - 0.5) * 2;
        
        if (particle.life <= 0) {
            this.electricParticles.splice(i, 1);
        }
    }
}

createElectricParticles(x, y, count) {
    if (!this.electricParticles) {
        this.electricParticles = [];
    }
    
    for (let i = 0; i < count; i++) {
        const angle = (i / count) * Math.PI * 2;
        const speed = 3 + Math.random() * 5;
        
        const particle = {
            x: x + (Math.random() - 0.5) * 20,
            y: y + (Math.random() - 0.5) * 20,
            velocityX: Math.cos(angle) * speed,
            velocityY: Math.sin(angle) * speed,
            life: 30 + Math.random() * 20,
            maxLife: 50,
            size: 2 + Math.random() * 3
        };
        
        this.electricParticles.push(particle);
    }
}
    createMagnitudeWave(waveIndex) {
        const wave = {
            x: this.x + this.width / 2,
            y: this.y + this.height / 2,
            radius: 20,
            maxRadius: 300 + (waveIndex * 50),
            speed: 8 + (waveIndex * 2),
            damage: 20 + (waveIndex * 5),
            color: `hsl(${200 + waveIndex * 30}, 100%, ${50 + waveIndex * 10}%)`,
            alpha: 1,
            hasHit: false,
            waveIndex: waveIndex
        };
        
        this.magnitudeWaves.push(wave);
    }
    
     updateMagnitudeWaves() {
        if (this.name !== "Lyron" || !this.magnitudeWaves) return;
        
        try {
            for (let i = this.magnitudeWaves.length - 1; i >= 0; i--) {
                const wave = this.magnitudeWaves[i];
                
                if (!wave) {
                    this.magnitudeWaves.splice(i, 1);
                    continue;
                }
                
                wave.radius += wave.speed;
                wave.alpha = 1 - (wave.radius / wave.maxRadius);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
                if (this === player && bot && !wave.hasHit && wave.radius > 50) {
                    try {
                        const distance = Math.sqrt(
                            Math.pow(wave.x - (bot.x + bot.width/2), 2) + 
                            Math.pow(wave.y - (bot.y + bot.height/2), 2)
                        );
                        
                        if (distance <= wave.radius && distance >= wave.radius - wave.speed) {
                            wave.hasHit = true;
                            
                            // –£—Ä–æ–Ω
                            if (bot.takeDamage) {
                                bot.takeDamage(wave.damage);
                            }
                            
                            // –û—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
                            if (typeof this.applyWaveKnockback === 'function') {
                                this.applyWaveKnockback(wave, bot);
                            } else {
                                // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ –±–µ–∑ –º–µ—Ç–æ–¥–∞
                                const simpleKnockback = wave.waveIndex * 8 + 10;
                                bot.knockback += (bot.x < wave.x) ? -simpleKnockback : simpleKnockback;
                                bot.screenShake = Math.max(bot.screenShake, 8);
                            }
                            
                            console.log(`üåä Magnitude Wave ${wave.waveIndex + 1} –ø–æ–ø–∞–ª–∞! –£—Ä–æ–Ω: ${wave.damage}`);
                            
                            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è
                            if (typeof this.createHitEffect === 'function') {
                                this.createHitEffect(bot.x + bot.width/2, bot.y + bot.height/2, wave.color);
                            }
                        }
                    } catch (collisionError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ª–Ω—ã:', collisionError);
                        wave.hasHit = true;
                    }
                }
                
                // –£–¥–∞–ª—è–µ–º –≤–æ–ª–Ω—É –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞
                if (wave.radius >= wave.maxRadius) {
                    this.magnitudeWaves.splice(i, 1);
                }
            }
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ updateMagnitudeWaves:', error);
            this.magnitudeWaves = [];
        }
    }
    
    createHitEffect(x, y, color) {
    // üîß –ü–†–û–í–ï–†–Ø–ï–ú –õ–ò–ú–ò–¢ –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú
    if (this.hitParticles.length >= this.MAX_PARTICLES) {
        console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —á–∞—Å—Ç–∏—Ü: ${this.MAX_PARTICLES}`);
        return; // –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã
    }
    
    for (let i = 0; i < 8; i++) {
        // üîß –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –í –¶–ò–ö–õ–ï
        if (this.hitParticles.length >= this.MAX_PARTICLES) {
            break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
        }
        
        const angle = (i / 8) * Math.PI * 2;
        const particle = {
            x: x,
            y: y,
            velocityX: Math.cos(angle) * (5 + Math.random() * 5),
            velocityY: Math.sin(angle) * (5 + Math.random() * 5),
            life: 30,
            maxLife: 30,
            color: color,
            size: 3 + Math.random() * 3
        };
        
        this.hitParticles.push(particle);
    }
}
     applyWaveKnockback(wave, target) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
    const deltaX = (target.x + target.width/2) - wave.x;
    const deltaY = (target.y + target.height/2) - wave.y;
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    
    if (distance === 0) return; // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    const normalizedX = deltaX / distance;
    const normalizedY = deltaY / distance;
    
    // üöÄ –ú–û–©–ù–û–ï –û–¢–¢–ê–õ–ö–ò–í–ê–ù–ò–ï - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É –≤ 3 —Ä–∞–∑–∞!
    const knockbackForce = (12 + (wave.waveIndex * 4)) * 3;
    
    // üöÄ –°–£–ü–ï–† –°–ò–õ–¨–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –û–¢–¢–ê–õ–ö–ò–í–ê–ù–ò–Ø:
    target.velocityX += normalizedX * knockbackForce * target.knockbackResistance *3;
    target.velocityY += Math.min(normalizedY * knockbackForce * 0.8, -12); // –°–∏–ª—å–Ω—ã–π –ø–æ–¥–±—Ä–æ—Å –≤–≤–µ—Ä—Ö
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
    target.isKnockedBack = true;
    target.knockback += normalizedX * knockbackForce * 0.6; // –î–≤–æ–π–Ω–æ–π knockback
    
    // üöÄ –ú–û–©–ù–´–ï –≠–§–§–ï–ö–¢–´ –≠–ö–†–ê–ù–ê:
    target.screenShake = Math.max(target.screenShake, (6 + wave.waveIndex * 2) * 2);
    
    console.log(`üåäüí• –í–æ–ª–Ω–∞ ${wave.waveIndex + 1} –†–ê–ó–ù–û–°–ò–¢ ${target.name}! –°–∏–ª–∞: ${knockbackForce.toFixed(1)}`);
}
    
    updateHitParticles() {
    // üîß –ë–´–°–¢–†–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –í–ú–ï–°–¢–û SPLICE
    this.hitParticles = this.hitParticles.filter(particle => {
        particle.x += particle.velocityX;
        particle.y += particle.velocityY;
        particle.velocityY += 0.3;
        particle.life--;
        
        return particle.life > 0; // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã
    });
    
    // üîß –õ–û–ì–ò–†–£–ï–ú –ï–°–õ–ò –ú–ù–û–ì–û –ß–ê–°–¢–ò–¶
    if (this.hitParticles.length > 30) {
        console.log(`‚ö†Ô∏è –ú–Ω–æ–≥–æ —á–∞—Å—Ç–∏—Ü: ${this.hitParticles.length}/${this.MAX_PARTICLES}`);
    }
}
    // üçæ –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–£–¢–´–õ–û–ö
    updateBottles() {
        if (this.name !== "vludblet" || !this.bottles) return;
        
        try {
            for (let i = this.bottles.length - 1; i >= 0; i--) {
                const bottle = this.bottles[i];
                
                if (!bottle) {
                    this.bottles.splice(i, 1);
                    continue;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É –±—É—Ç—ã–ª–∫–∏
                bottle.velocityY += bottle.gravity;
                bottle.x += bottle.velocityX;
                bottle.y += bottle.velocityY;
                bottle.rotation += 0.2;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∑–µ–º–ª–µ–π
                if (bottle.y > canvas.height - 50) {
                    bottle.y = canvas.height - 50;
                    
                    if (bottle.bounces < bottle.maxBounces) {
                        bottle.velocityY = -bottle.velocityY * 0.6;
                        bottle.velocityX *= 0.8;
                        bottle.bounces++;
                        console.log(`üçæ –ë—É—Ç—ã–ª–∫–∞ –æ—Ç—Å–∫–æ—á–∏–ª–∞! –û—Ç—Å–∫–æ–∫ ${bottle.bounces}/${bottle.maxBounces}`);
                    } else {
                        // –ë—É—Ç—ã–ª–∫–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è
                        this.createBottleExplosion(bottle.x, bottle.y);
                        this.bottles.splice(i, 1);
                        console.log(`üí• –ë—É—Ç—ã–ª–∫–∞ —Ä–∞–∑–±–∏–ª–∞—Å—å!`);
                        continue;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º
                if (this === player && bot && !bottle.hasHit) {
                    this.checkBottleCollision(bottle, bot, i);
                } else if (this === bot && player && !bottle.hasHit) {
                    this.checkBottleCollision(bottle, player, i);
                }
                
                // –£–¥–∞–ª—è–µ–º –±—É—Ç—ã–ª–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —É–ª–µ—Ç–µ–ª–∞ –∑–∞ —ç–∫—Ä–∞–Ω
                if (bottle.x < -50 || bottle.x > canvas.width + 50) {
                    this.bottles.splice(i, 1);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateBottles:', error);
            this.bottles = [];
        }
    }
    
    // üçæ –ú–ï–¢–û–î –ü–†–û–í–ï–†–ö–ò –°–¢–û–õ–ö–ù–û–í–ï–ù–ò–Ø –ë–£–¢–´–õ–ö–ò
    checkBottleCollision(bottle, target, bottleIndex) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
            if (bottle.x < target.x + target.width &&
                bottle.x + 20 > target.x &&
                bottle.y < target.y + target.height &&
                bottle.y + 20 > target.y) {
                
                bottle.hasHit = true;
                
                // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                if (target.takeDamage) {
                    target.takeDamage(bottle.damage);
                }
                
                // –û—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
                const knockbackForce = 12;
                target.knockback += (bottle.velocityX > 0) ? knockbackForce : -knockbackForce;
                target.velocityY = Math.min(target.velocityY, -8); // –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–≤–µ—Ä—Ö
                target.screenShake = Math.max(target.screenShake, 6);
                
                console.log(`üçæüí• –ë—É—Ç—ã–ª–∫–∞ –ø–æ–ø–∞–ª–∞ –≤ ${target.name}! –£—Ä–æ–Ω: ${bottle.damage}`);
                
                // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
                this.createBottleExplosion(bottle.x, bottle.y);
                
                // –£–¥–∞–ª—è–µ–º –±—É—Ç—ã–ª–∫—É
                this.bottles.splice(bottleIndex, 1);
            }
        } catch (collisionError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –±—É—Ç—ã–ª–∫–∏:', collisionError);
            bottle.hasHit = true;
        }
    }
    
    // üçæ –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø –í–ó–†–´–í–ê –ë–£–¢–´–õ–ö–ò
    createBottleExplosion(x, y) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!this.bottleExplosions) {
            this.bottleExplosions = [];
        }
        if (!this.glassParticles) {
            this.glassParticles = [];
        }
        
        const explosion = {
            x: x,
            y: y,
            radius: 0,
            maxRadius: 40,
            life: 30,
            maxLife: 30
        };
        
        this.bottleExplosions.push(explosion);
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–∫–æ–ª–∫–∏ —Å—Ç–µ–∫–ª–∞
        for (let i = 0; i < 8; i++) {
            const angle = (i / 8) * Math.PI * 2;
            const shard = {
                x: x,
                y: y,
                velocityX: Math.cos(angle) * (3 + Math.random() * 4),
                velocityY: Math.sin(angle) * (3 + Math.random() * 4) - 2,
                life: 40 + Math.random() * 20,
                maxLife: 60,
                size: 2 + Math.random() * 2
            };
            
            this.glassParticles.push(shard);
        }
    }
    
    // üçæ –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–ó–†–´–í–û–í
    updateBottleExplosions() {
        if (!this.bottleExplosions) return;
        
        for (let i = this.bottleExplosions.length - 1; i >= 0; i--) {
            const explosion = this.bottleExplosions[i];
            
            explosion.radius += (explosion.maxRadius - explosion.radius) * 0.3;
            explosion.life--;
            
            if (explosion.life <= 0) {
                this.bottleExplosions.splice(i, 1);
            }
        }
    }
    
    // üçæ –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –û–°–ö–û–õ–ö–û–í –°–¢–ï–ö–õ–ê
    updateGlassParticles() {
        if (!this.glassParticles) return;
        
        for (let i = this.glassParticles.length - 1; i >= 0; i--) {
            const shard = this.glassParticles[i];
            
            shard.x += shard.velocityX;
            shard.y += shard.velocityY;
            shard.velocityY += 0.3; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
            shard.life--;
            
            // –û—Ç—Å–∫–æ–∫ –æ—Ç –∑–µ–º–ª–∏
            if (shard.y > canvas.height - 30) {
                shard.y = canvas.height - 30;
                shard.velocityY = -shard.velocityY * 0.5;
            }
            
            if (shard.life <= 0) {
                this.glassParticles.splice(i, 1);
            }
        }
    }
    drawBottles(ctx) {
    if (this.name !== "vludblet" || !this.bottles) return;
    
    this.bottles.forEach(bottle => {
        ctx.save();
        ctx.translate(bottle.x + 15, bottle.y + 20); // ‚Üê –£–í–ï–õ–ò–ß–ò–õ–ò –¶–ï–ù–¢–†
        ctx.rotate(bottle.rotation);
        
        // –¢–µ–ª–æ –±—É—Ç—ã–ª–∫–∏ (–ë–û–õ–¨–®–û–ï)
        ctx.fillStyle = '#8B4513';
        ctx.fillRect(-15, -20, 30, 40); // ‚Üê –í 2 –†–ê–ó–ê –ë–û–õ–¨–®–ï!
        
        // –ì–æ—Ä–ª—ã—à–∫–æ (–ë–û–õ–¨–®–û–ï)
        ctx.fillStyle = '#654321';
        ctx.fillRect(-6, -30, 12, 16);  // ‚Üê –í 2 –†–ê–ó–ê –ë–û–õ–¨–®–ï!
        
        // –ü—Ä–æ–±–∫–∞ (–ë–û–õ–¨–®–ê–Ø)
        ctx.fillStyle = '#2F4F4F';
        ctx.fillRect(-4, -36, 8, 10);   // ‚Üê –í 2 –†–ê–ó–ê –ë–û–õ–¨–®–ï!
        
        // –ù–û–í–û–ï: –≠—Ç–∏–∫–µ—Ç–∫–∞ –Ω–∞ –±—É—Ç—ã–ª–∫–µ
        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        ctx.fillRect(-10, -5, 20, 8);   // ‚Üê –ë–ï–õ–ê–Ø –≠–¢–ò–ö–ï–¢–ö–ê
        
        // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–µ
        ctx.fillStyle = 'black';
        ctx.font = '8px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('üçæ', 0, 1);       // ‚Üê –≠–ú–û–î–ó–ò –ë–£–¢–´–õ–ö–ò
        
        ctx.restore();
    });
}
// ü§º –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ë–†–û–°–ö–ê BURHAN
updateThrowParticles() {
    if (this.name !== "Burhan") return;
    
    if (this.throwParticles) {
        this.throwParticles = [];
    }
}

createThrowParticles(x, y) {
    if (!this.throwParticles) {
        this.throwParticles = [];
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ—â–Ω—ã–π –≤–∑—Ä—ã–≤ —á–∞—Å—Ç–∏—Ü
    for (let i = 0; i < 20; i++) {
        const angle = (i / 20) * Math.PI * 2;
        const speed = 4 + Math.random() * 8;
        
        const particle = {
            x: x + (Math.random() - 0.5) * 30,
            y: y + (Math.random() - 0.5) * 30,
            velocityX: Math.cos(angle) * speed,
            velocityY: Math.sin(angle) * speed - 3,
            life: 40 + Math.random() * 30,
            maxLife: 70,
            size: 3 + Math.random() * 4
        };
        
        this.throwParticles.push(particle);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫—Ä—ã –¥–ª—è —ç–ø–∏—á–Ω–æ—Å—Ç–∏
    for (let i = 0; i < 10; i++) {
        const particle = {
            x: x,
            y: y,
            velocityX: (Math.random() - 0.5) * 12,
            velocityY: (Math.random() - 0.5) * 12 - 5,
            life: 60 + Math.random() * 40,
            maxLife: 100,
            size: 2 + Math.random() * 3
        };
        
        this.throwParticles.push(particle);
    }
}

// üçæ –ú–ï–¢–û–î –†–ò–°–û–í–ê–ù–ò–Ø –û–°–ö–û–õ–ö–û–í
drawGlassParticles(ctx) {
    if (!this.glassParticles) return;
    
    this.glassParticles.forEach(shard => {
        const alpha = shard.life / shard.maxLife;
        ctx.fillStyle = `rgba(220, 220, 255, ${alpha})`;
        ctx.fillRect(shard.x - shard.size/2, shard.y - shard.size/2, shard.size, shard.size);
    });
}

// üçæ –ú–ï–¢–û–î –†–ò–°–û–í–ê–ù–ò–Ø –í–ó–†–´–í–û–í
drawBottleExplosions(ctx) {
    if (!this.bottleExplosions) return;
    
    this.bottleExplosions.forEach(explosion => {
        const alpha = explosion.life / explosion.maxLife;
        ctx.strokeStyle = `rgba(255, 165, 0, ${alpha})`;
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.arc(explosion.x, explosion.y, explosion.radius, 0, 2 * Math.PI);
        ctx.stroke();
    });
}

// üçæ –ò–ù–î–ò–ö–ê–¢–û–† –ö–£–õ–î–ê–£–ù–ê
drawBottleThrowCooldown(ctx, x, y) {
    if (this.name !== "vludblet" || this.bottleThrowCooldown <= 0) return;
    
    const cooldownPercent = this.bottleThrowCooldown / 300;
    ctx.fillStyle = 'rgba(139, 69, 19, 0.8)';
    ctx.fillRect(x - 30, y - 25, 60 * (1 - cooldownPercent), 6);
}
    
    drawMagnitudeWaves(ctx, drawX, drawY) {
        if (this.name !== "Lyron" || this.magnitudeWaves.length === 0) return;
        
        this.magnitudeWaves.forEach(wave => {
            // üåä –ö–†–ê–°–ò–í–´–ï –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ö–û–õ–¨–¶–ê –í–û–õ–ù–´
            for (let ring = 0; ring < 3; ring++) {
                let ringRadius = wave.radius - (ring * 15);
                if (ringRadius <= 0) continue;
                
                let ringAlpha = wave.alpha * (1 - ring * 0.3);
                let ringWidth = 6 - ring * 2;
                
                // –û—Å–Ω–æ–≤–Ω–æ–µ –∫–æ–ª—å—Ü–æ –≤–æ–ª–Ω—ã
                ctx.strokeStyle = `hsla(${200 + wave.waveIndex * 30}, 100%, ${70 - ring * 10}%, ${ringAlpha})`;
                ctx.lineWidth = ringWidth;
                ctx.setLineDash([]);
                
                ctx.beginPath();
                ctx.arc(wave.x, wave.y, ringRadius, 0, 2 * Math.PI);
                ctx.stroke();
            }
            
            // ‚ú® –í–ù–£–¢–†–ï–ù–ù–ï–ï –°–í–ï–ß–ï–ù–ò–ï –í–û–õ–ù–´
            ctx.strokeStyle = `rgba(255, 255, 255, ${wave.alpha * 0.9})`;
            ctx.lineWidth = 2;
            
            ctx.beginPath();
            ctx.arc(wave.x, wave.y, wave.radius * 0.8, 0, 2 * Math.PI);
            ctx.stroke();
            
            // üåü –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ö–†–´ –ü–û –ö–†–ê–Æ –í–û–õ–ù–´
            const sparkCount = Math.floor(wave.radius / 15);
            for (let i = 0; i < sparkCount; i++) {
                const angle = (i / sparkCount) * Math.PI * 2 + Date.now() * 0.005;
                const sparkRadius = wave.radius + Math.sin(Date.now() * 0.01 + i) * 5;
                const sparkX = wave.x + Math.cos(angle) * sparkRadius;
                const sparkY = wave.y + Math.sin(angle) * sparkRadius;
                
                // –ë–æ–ª—å—à–∏–µ —è—Ä–∫–∏–µ –∏—Å–∫—Ä—ã
                const sparkSize = 2 + Math.sin(Date.now() * 0.02 + i) * 1;
                ctx.fillStyle = `rgba(255, 255, 255, ${wave.alpha})`;
                ctx.beginPath();
                ctx.arc(sparkX, sparkY, sparkSize, 0, 2 * Math.PI);
                ctx.fill();
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –∏—Å–∫—Ä
                ctx.shadowColor = `hsla(${200 + wave.waveIndex * 30}, 100%, 80%, ${wave.alpha})`;
                ctx.shadowBlur = 8;
                ctx.beginPath();
                ctx.arc(sparkX, sparkY, sparkSize * 0.5, 0, 2 * Math.PI);
                ctx.fill();
                ctx.shadowBlur = 0;
            }
            
            // üî• –¶–ï–ù–¢–†–ê–õ–¨–ù–û–ï –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–û–ï –Ø–î–†–û
            if (wave.radius < 120) {
                const centerAlpha = (120 - wave.radius) / 120 * wave.alpha;
                const pulseFactor = 1 + Math.sin(Date.now() * 0.01) * 0.3;
                
                // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ä–∞–¥–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                const gradient = ctx.createRadialGradient(
                    wave.x, wave.y, 0, 
                    wave.x, wave.y, 40 * pulseFactor
                );
                
                gradient.addColorStop(0, `rgba(255, 255, 255, ${centerAlpha})`);
                gradient.addColorStop(0.3, `hsla(${200 + wave.waveIndex * 30}, 100%, 80%, ${centerAlpha * 0.8})`);
                gradient.addColorStop(0.7, `hsla(${200 + wave.waveIndex * 30}, 100%, 60%, ${centerAlpha * 0.4})`);
                gradient.addColorStop(1, `hsla(${200 + wave.waveIndex * 30}, 100%, 40%, 0)`);
                
                ctx.fillStyle = gradient;
                ctx.beginPath();
                ctx.arc(wave.x, wave.y, 40 * pulseFactor, 0, 2 * Math.PI);
                ctx.fill();
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
                ctx.fillStyle = `rgba(255, 255, 255, ${centerAlpha * 0.5})`;
                ctx.beginPath();
                ctx.arc(wave.x, wave.y, 15 * pulseFactor, 0, 2 * Math.PI);
                ctx.fill();
            }
            
            // ‚ö° –≠–õ–ï–ö–¢–†–ò–ß–ï–°–ö–ò–ï –†–ê–ó–†–Ø–î–´ –í–û–ö–†–£–ì –í–û–õ–ù–´
            if (wave.radius > 80 && wave.radius < 250) {
                for (let i = 0; i < 6; i++) {
                    const lightningAngle = (i / 6) * Math.PI * 2 + Date.now() * 0.01;
                    const lightningLength = 20 + Math.random() * 15;
                    
                    const startX = wave.x + Math.cos(lightningAngle) * wave.radius;
                    const startY = wave.y + Math.sin(lightningAngle) * wave.radius;
                    const endX = startX + Math.cos(lightningAngle + Math.random() - 0.5) * lightningLength;
                    const endY = startY + Math.sin(lightningAngle + Math.random() - 0.5) * lightningLength;
                    
                    ctx.strokeStyle = `rgba(255, 255, 255, ${wave.alpha * 0.8})`;
                    ctx.lineWidth = 2;
                    ctx.beginPath();
                    ctx.moveTo(startX, startY);
                    ctx.lineTo(endX, endY);
                    ctx.stroke();
                }
            }
        });
    }

    
    drawHitParticles(ctx) {
        this.hitParticles.forEach(particle => {
            const alpha = particle.life / particle.maxLife;
            ctx.fillStyle = `${particle.color}${Math.floor(alpha * 255).toString(16).padStart(2, '0')}`;
            
            ctx.beginPath();
            ctx.arc(particle.x, particle.y, particle.size * alpha, 0, 2 * Math.PI);
            ctx.fill();
        });
    }
    
      drawAbilityCooldown(ctx, x, y) {
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫—É–ª–¥–∞—É–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω
    return;
}
// ‚ö° –ú–ï–¢–û–î–´ –†–ò–°–û–í–ê–ù–ò–Ø –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò
drawTeleportEffects(ctx, drawX, drawY) {
    if (!this.isTeleporting) return;
    
    const centerX = drawX + this.width/2;
    const centerY = drawY + this.height/2;
    
    switch(this.teleportPhase) {
        case 'disappear':
            // –≠—Ñ—Ñ–µ–∫—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            const disappearProgress = 1 - (this.teleportTimer / 20);
            
            // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ –∫–æ–ª—å—Ü–æ
            ctx.strokeStyle = `rgba(0, 255, 255, ${1 - disappearProgress})`;
            ctx.lineWidth = 4;
            ctx.beginPath();
            ctx.arc(centerX, centerY, 30 + disappearProgress * 50, 0, 2 * Math.PI);
            ctx.stroke();
            
            // –ò—Å–∫–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            ctx.globalAlpha = 1 - disappearProgress;
            break;
            
        case 'appear':
            // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
            const appearProgress = 1 - (this.teleportTimer / 15);
            
            // –í—Å–ø—ã—à–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è
            ctx.fillStyle = `rgba(255, 255, 255, ${1 - appearProgress})`;
            ctx.beginPath();
            ctx.arc(centerX, centerY, 40 * (1 - appearProgress), 0, 2 * Math.PI);
            ctx.fill();
            
            // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–ª—å—Ü–∞
            for (let i = 0; i < 3; i++) {
                const ringRadius = 60 + i * 20;
                ctx.strokeStyle = `rgba(0, 255, 255, ${(1 - appearProgress) * (1 - i * 0.3)})`;
                ctx.lineWidth = 3 - i;
                ctx.beginPath();
                ctx.arc(centerX, centerY, ringRadius * appearProgress, 0, 2 * Math.PI);
                ctx.stroke();
            }
            break;
            
        case 'strike':
            // –≠—Ñ—Ñ–µ–∫—Ç –∞—Ç–∞–∫–∏
            const strikeProgress = 1 - (this.teleportTimer / 10);
            
            // –ú–æ—â–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
            ctx.shadowColor = 'rgba(0, 255, 255, 0.8)';
            ctx.shadowBlur = 20;
            ctx.fillStyle = `rgba(255, 255, 255, ${strikeProgress})`;
            ctx.beginPath();
            ctx.arc(centerX, centerY, 25, 0, 2 * Math.PI);
            ctx.fill();
            ctx.shadowBlur = 0;
            break;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    ctx.globalAlpha = 1;
}

drawElectricParticles(ctx) {
    if (!this.electricParticles || this.name !== "Noxx") return;
    
    this.electricParticles.forEach(particle => {
        const alpha = particle.life / particle.maxLife;
        
        // –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞
        ctx.fillStyle = `rgba(0, 255, 255, ${alpha})`;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);
        ctx.fill();
        
        // –°–≤–µ—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü—ã
        ctx.shadowColor = 'rgba(0, 255, 255, 0.6)';
        ctx.shadowBlur = 10;
        ctx.fillStyle = `rgba(255, 255, 255, ${alpha * 0.5})`;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size * 0.5, 0, 2 * Math.PI);
        ctx.fill();
        ctx.shadowBlur = 0;
    });
}// ü§º –ú–ï–¢–û–î–´ –†–ò–°–û–í–ê–ù–ò–Ø –≠–§–§–ï–ö–¢–û–í –ë–†–û–°–ö–ê –î–õ–Ø BURHAN
drawGrappleEffects(ctx, drawX, drawY) {
    return;
}

drawThrowParticles(ctx) {
    return;
}

drawGrappleCooldown(ctx, x, y) {
    if (this.name !== "Burhan" || this.grappleCooldown <= 0) return;
    
    const cooldownPercent = this.grappleCooldown / 400;
    ctx.fillStyle = 'rgba(255, 140, 0, 0.8)';
    ctx.fillRect(x - 30, y - 35, 60 * (1 - cooldownPercent), 6);
}
// ‚ö° –ú–ï–¢–û–î–´ –†–ò–°–û–í–ê–ù–ò–Ø LIGHTNING CALL –î–õ–Ø HEATHCLIFF
drawLightningWarnings(ctx) {
    if (!this.lightningWarnings || this.name !== "Heathcliff") return;
    
    this.lightningWarnings.forEach(warning => {
        // –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π –∫—Ä—É–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        const alpha = warning.intensity;
        const pulseSize = warning.size + Math.sin(Date.now() * 0.02) * 10;
        
        // –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π –∫—Ä—É–≥
        ctx.strokeStyle = `rgba(255, 0, 0, ${alpha})`;
        ctx.lineWidth = 6;
        ctx.setLineDash([10, 5]);
        ctx.beginPath();
        ctx.arc(warning.targetX, warning.targetY, pulseSize, 0, 2 * Math.PI);
        ctx.stroke();
        ctx.setLineDash([]);
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        ctx.fillStyle = `rgba(255, 255, 0, ${alpha * 0.3})`;
        ctx.beginPath();
        ctx.arc(warning.targetX, warning.targetY, pulseSize * 0.7, 0, 2 * Math.PI);
        ctx.fill();
        
        // –°–∏–º–≤–æ–ª –º–æ–ª–Ω–∏–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
        ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;
        ctx.font = 'bold 24px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('‚ö°', warning.targetX, warning.targetY + 8);
    });
}

drawLightningStrikes(ctx) {
    if (!this.lightningStrikes || this.name !== "Heathcliff") return;
    
    this.lightningStrikes.forEach(lightning => {
        const alpha = lightning.intensity;
        const time = Date.now() * 0.01;
        const pulse = 1 + Math.sin(time * 3) * 0.4;
        
        // üåü –ë–û–ñ–ï–°–¢–í–ï–ù–ù–û–ï –°–í–ï–ß–ï–ù–ò–ï –í–û–ö–†–£–ì –¶–ï–õ–ò
        const glowRadius = 60 * pulse;
        const gradient = ctx.createRadialGradient(
            lightning.targetX, lightning.targetY, 0,
            lightning.targetX, lightning.targetY, glowRadius
        );
        gradient.addColorStop(0, `rgba(255, 255, 255, ${alpha * 0.8})`);
        gradient.addColorStop(0.3, `rgba(100, 200, 255, ${alpha * 0.5})`);
        gradient.addColorStop(0.7, `rgba(255, 255, 0, ${alpha * 0.2})`);
        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
        
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(lightning.targetX, lightning.targetY, glowRadius, 0, 2 * Math.PI);
        ctx.fill();
        
        // ‚ö° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ú–û–õ–ù–ò–ò
        for (let bolt = 0; bolt < 3; bolt++) {
            const offsetX = (bolt - 1) * 20;
            const boltAlpha = alpha * (1 - bolt * 0.3);
            
            ctx.strokeStyle = `rgba(255, 255, 255, ${boltAlpha})`;
            ctx.lineWidth = (8 - bolt * 2) * pulse;
            ctx.shadowColor = `rgba(100, 200, 255, ${boltAlpha})`;
            ctx.shadowBlur = 25;
            
            // –•–∞–æ—Ç–∏—á–Ω–∞—è –º–æ–ª–Ω–∏—è
            ctx.beginPath();
            ctx.moveTo(lightning.targetX + offsetX, 0);
            
            let currentX = lightning.targetX + offsetX;
            for (let segment = 1; segment <= 8; segment++) {
                const segmentY = (canvas.height / 8) * segment;
                const chaos = (Math.random() - 0.5) * 60;
                currentX += chaos * 0.3;
                
                ctx.lineTo(currentX, segmentY);
                
                // –ú–∏–Ω–∏-–≤—Å–ø—ã—à–∫–∏ –ø–æ –ø—É—Ç–∏
                if (Math.random() < 0.4) {
                    ctx.fillStyle = `rgba(255, 255, 255, ${boltAlpha * 0.8})`;
                    ctx.beginPath();
                    ctx.arc(currentX, segmentY, 3 * pulse, 0, 2 * Math.PI);
                    ctx.fill();
                }
            }
            
            ctx.lineTo(lightning.targetX, lightning.targetY);
            ctx.stroke();
        }
        
        // üî• –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ï –ö–û–õ–¨–¶–ê
        for (let ring = 0; ring < 4; ring++) {
            const ringRadius = (20 + ring * 15) * pulse;
            const ringAlpha = alpha * (1 - ring * 0.2);
            
            ctx.strokeStyle = `rgba(255, ${200 - ring * 30}, ${100 + ring * 30}, ${ringAlpha})`;
            ctx.lineWidth = 6 - ring;
            ctx.setLineDash([10, 5]);
            
            ctx.beginPath();
            ctx.arc(lightning.targetX, lightning.targetY, ringRadius, time + ring, time + ring + Math.PI);
            ctx.stroke();
            ctx.setLineDash([]);
        }
        
        // ‚≠ê –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ï –ß–ê–°–¢–ò–¶–´
        for (let particle = 0; particle < 15; particle++) {
            const angle = (particle / 15) * Math.PI * 2 + time;
            const distance = 30 + Math.sin(time + particle) * 20;
            const particleX = lightning.targetX + Math.cos(angle) * distance;
            const particleY = lightning.targetY + Math.sin(angle) * distance;
            
            ctx.fillStyle = `rgba(255, 255, ${Math.floor(Math.random() * 100 + 155)}, ${alpha * 0.9})`;
            ctx.shadowColor = 'rgba(255, 255, 0, 0.8)';
            ctx.shadowBlur = 10;
            
            ctx.beginPath();
            ctx.arc(particleX, particleY, 2 + Math.sin(time + particle) * 1, 0, 2 * Math.PI);
            ctx.fill();
        }
        
        // üí´ –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ê–Ø –°–§–ï–†–ê
        ctx.shadowColor = 'rgba(255, 255, 255, 0.9)';
        ctx.shadowBlur = 30;
        
        // –í–Ω–µ—à–Ω—è—è —Å—Ñ–µ—Ä–∞
        ctx.fillStyle = `rgba(100, 200, 255, ${alpha * 0.6})`;
        ctx.beginPath();
        ctx.arc(lightning.targetX, lightning.targetY, 25 * pulse, 0, 2 * Math.PI);
        ctx.fill();
        
        // –°—Ä–µ–¥–Ω—è—è —Å—Ñ–µ—Ä–∞
        ctx.fillStyle = `rgba(255, 255, 255, ${alpha * 0.8})`;
        ctx.beginPath();
        ctx.arc(lightning.targetX, lightning.targetY, 15 * pulse, 0, 2 * Math.PI);
        ctx.fill();
        
        // –Ø–¥—Ä–æ
        ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;
        ctx.beginPath();
        ctx.arc(lightning.targetX, lightning.targetY, 8 * pulse, 0, 2 * Math.PI);
        ctx.fill();
        
        // üåà –†–ê–î–£–ñ–ù–´–ï –í–°–ü–û–õ–û–•–ò
        const colors = ['255,0,0', '255,165,0', '255,255,0', '0,255,0', '0,0,255', '75,0,130', '238,130,238'];
        for (let i = 0; i < colors.length; i++) {
            const flashAngle = time * 2 + (i / colors.length) * Math.PI * 2;
            const flashX = lightning.targetX + Math.cos(flashAngle) * 40;
            const flashY = lightning.targetY + Math.sin(flashAngle) * 40;
            
            ctx.fillStyle = `rgba(${colors[i]}, ${alpha * 0.4})`;
            ctx.beginPath();
            ctx.arc(flashX, flashY, 4, 0, 2 * Math.PI);
            ctx.fill();
        }
        
        ctx.shadowBlur = 0;
    });
}

drawLightningEffects(ctx) {
    if (!this.lightningEffects) return;
    
    this.lightningEffects.forEach(effect => {
        const alpha = effect.life / effect.maxLife;
        
        if (effect.type === 'spark') {
            // –Ø—Ä–∫–∏–µ –∏—Å–∫—Ä—ã
            ctx.fillStyle = `rgba(255, 255, 0, ${alpha})`;
            ctx.beginPath();
            ctx.arc(effect.x, effect.y, effect.size, 0, 2 * Math.PI);
            ctx.fill();
            
            // –°–≤–µ—á–µ–Ω–∏–µ –∏—Å–∫—Ä
            ctx.shadowColor = 'rgba(255, 255, 0, 0.8)';
            ctx.shadowBlur = 8;
            ctx.fillStyle = `rgba(255, 255, 255, ${alpha * 0.8})`;
            ctx.beginPath();
            ctx.arc(effect.x, effect.y, effect.size * 0.5, 0, 2 * Math.PI);
            ctx.fill();
            ctx.shadowBlur = 0;
        } else {
            // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä—è–¥—ã
            ctx.strokeStyle = `rgba(0, 255, 255, ${alpha})`;
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(effect.x - effect.size, effect.y - effect.size);
            ctx.lineTo(effect.x + effect.size, effect.y + effect.size);
            ctx.moveTo(effect.x + effect.size, effect.y - effect.size);
            ctx.lineTo(effect.x - effect.size, effect.y + effect.size);
            ctx.stroke();
        }
    });
}

drawLightningCooldown(ctx, x, y) {
    if (this.name !== "Heathcliff" || this.lightningCooldown <= 0) return;
    
    const cooldownPercent = this.lightningCooldown / 360;
    ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';
    ctx.fillRect(x - 30, y - 40, 60 * (1 - cooldownPercent), 6);
    
    // –ò–∫–æ–Ω–∫–∞ –º–æ–ª–Ω–∏–∏ —Ä—è–¥–æ–º —Å –ø–æ–ª–æ—Å–∫–æ–π
    if (cooldownPercent > 0.5) {
        ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
        ctx.font = 'bold 12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('‚ö°', x, y - 45);
    }
}
// üî¥ –ú–ï–¢–û–î–´ –†–ò–°–û–í–ê–ù–ò–Ø RED LIGHT GREEN LIGHT –î–õ–Ø !ZAIN
drawRedLightWarnings(ctx) {
    if (!this.redLightWarnings || this.name !== "!ZAIN") return;
    
    this.redLightWarnings.forEach(warning => {
        const alpha = warning.alpha;
        
        // –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        ctx.strokeStyle = `rgba(255, 0, 0, ${alpha})`;
        ctx.lineWidth = 6;
        ctx.setLineDash([5, 5]);
        ctx.beginPath();
        ctx.arc(warning.x, warning.y, warning.size, 0, 2 * Math.PI);
        ctx.stroke();
        ctx.setLineDash([]);
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        ctx.fillStyle = `rgba(255, 0, 0, ${alpha * 0.3})`;
        ctx.beginPath();
        ctx.arc(warning.x, warning.y, warning.size * 0.7, 0, 2 * Math.PI);
        ctx.fill();
        
        // –¢–µ–∫—Å—Ç "–°–¢–û–ô!"
        ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;
        ctx.font = 'bold 16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('DONT MOVE!', warning.x, warning.y + 5);
    });
}

drawRedLightEffect(ctx, drawX, drawY) {
    if (this.name !== "!ZAIN" || !this.redLightActive) return;
    
    const centerX = drawX + this.width/2;
    const centerY = drawY + this.height/2;
    
    // –ö—Ä–∞—Å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ !ZAIN
    const glowRadius = 80 + Math.sin(Date.now() * 0.01) * 20;
    const gradient = ctx.createRadialGradient(
        centerX, centerY, 0,
        centerX, centerY, glowRadius
    );
    gradient.addColorStop(0, 'rgba(255, 0, 0, 0.4)');
    gradient.addColorStop(0.5, 'rgba(255, 0, 0, 0.2)');
    gradient.addColorStop(1, 'rgba(255, 0, 0, 0)');
    
    ctx.fillStyle = gradient;
    ctx.beginPath();
    ctx.arc(centerX, centerY, glowRadius, 0, 2 * Math.PI);
    ctx.fill();
    
    // –°—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π
    if (this.redLightCountdown > 0) {
        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
        ctx.font = 'bold 48px Arial';
        ctx.textAlign = 'center';
        ctx.strokeStyle = 'rgba(255, 0, 0, 0.8)';
        ctx.lineWidth = 4;
        
        const countdownText = this.redLightCountdown.toString();
        ctx.strokeText(countdownText, centerX, centerY - 60);
        ctx.fillText(countdownText, centerX, centerY - 60);
    } else {
        // –¢–µ–∫—Å—Ç "–ù–ï –î–í–ò–ì–ê–ô–°–Ø!"
        ctx.fillStyle = 'rgba(255, 0, 0, 0.9)';
        ctx.font = 'bold 20px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–ù–ï –î–í–ò–ì–ê–ô–°–Ø!', centerX, centerY - 60);
    }
}

drawRedLightCooldown(ctx, x, y) {
    if (this.name !== "!ZAIN" || this.redLightCooldown <= 0) return;
    
    const cooldownPercent = this.redLightCooldown / 480;
    ctx.fillStyle = 'rgba(255, 0, 0, 0.8)';
    ctx.fillRect(x - 30, y - 45, 60 * (1 - cooldownPercent), 6);
    
    // –ò–∫–æ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    if (cooldownPercent > 0.5) {
        ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
        ctx.font = 'bold 12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('üî¥', x, y - 50);
    }
}
sharkDash() {
    if (this.sharkCooldown > 0 || this.name !== "Matt") {
        console.log(`‚ùå Shark Dash –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(this.sharkCooldown / 60)} —Å–µ–∫`);
        return false;
    }
    
    if (!gameRunning || !gameStarted) {
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return false;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å (–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)
    let target;
    if (this === player && bot) {
        target = bot;
    } else if (this === bot && player) {
        target = player;
    } else {
        console.log('‚ùå –¶–µ–ª—å –¥–ª—è Shark Dash –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        return false;
    }
    
    console.log(`ü¶à ${this.name} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ê–ö–£–õ–£ –∏ –ª–µ—Ç–∏—Ç –ø—Ä—è–º–æ!`);

// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
this.sharkStartX = this.x;
this.sharkStartY = this.y;
this.sharkTarget = target;

// –ü–†–Ø–ú–û–ô –ü–û–õ–ï–¢ –í –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ò, –ö–£–î–ê –°–ú–û–¢–†–ò–¢
const characterConfig = CHARACTERS.find(char => char.name === this.name);
const dashDistance = characterConfig ? characterConfig.dashDistance : 400;

this.sharkTargetX = this.x + (this.facingRight ? dashDistance : -dashDistance);
this.sharkTargetY = this.y; // –ù–ê –¢–û–ú –ñ–ï –£–†–û–í–ù–ï
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∞—Ç–∞–∫—É –∞–∫—É–ª—ã
    this.isSharkDashing = true;
    this.sharkPhase = 'transform';
    this.sharkTimer = 15; // 15 –∫–∞–¥—Ä–æ–≤ –Ω–∞ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ
    this.sharkCooldown = 360; // 6 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω
    
    // –°–æ–∑–¥–∞–µ–º –≤–æ–¥—è–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.createWaterParticles(this.x + this.width/2, this.y + this.height/2, 12);
    
    return true;
}
// üí° –ú–ï–¢–û–î –ê–ö–¢–ò–í–ê–¶–ò–ò –£–°–ò–õ–ï–ù–ò–Ø –î–õ–Ø XEALIST
powerBoost() {
    if (this.powerCooldown > 0 || this.name !== "Xealist") {
        console.log(`‚ùå Power Boost –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(this.powerCooldown / 60)} —Å–µ–∫`);
        return false;
    }
    
    if (!gameRunning || !gameStarted) {
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return false;
    }
    
    console.log(`üí° ${this.name} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç POWER BOOST! –£—Ä–æ–Ω x2 –Ω–∞ 5 —Å–µ–∫—É–Ω–¥!`);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const characterConfig = CHARACTERS.find(char => char.name === this.name);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —É—Å–∏–ª–µ–Ω–∏–µ
    this.isPowered = true;
    this.powerDuration = characterConfig ? characterConfig.powerDuration : 300; // 5 —Å–µ–∫—É–Ω–¥
    this.powerCooldown = characterConfig ? characterConfig.abilityCooldown : 420; // 7 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω
    
    console.log(`üí° Power Boost –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${this.powerDuration/60} —Å–µ–∫, –ö—É–ª–¥–∞—É–Ω: ${this.powerCooldown/60} —Å–µ–∫`);
    return true;
}

// ‚ö° –ú–ï–¢–û–î LIGHTNING CALL –î–õ–Ø HEATHCLIFF
lightningCall() {
    if (this.lightningCooldown > 0 || this.name !== "Heathcliff") {
        console.log(`‚ùå Lightning Call –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(this.lightningCooldown / 60)} —Å–µ–∫`);
        return false;
    }
    
    if (!gameRunning || !gameStarted) {
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return false;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å (–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)
    let target;
    if (this === player && bot) {
        target = bot;
    } else if (this === bot && player) {
        target = player;
    } else {
        console.log('‚ùå –¶–µ–ª—å –¥–ª—è Lightning Call –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        return false;
    }
    
    console.log(`‚ö° ${this.name} –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –ú–û–õ–ù–ò–Æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π!`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–ª–Ω–∏—é
    const lightning = {
        x: target.x + target.width/2,
        y: 0, // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–µ—Ä—Ö–∞ —ç–∫—Ä–∞–Ω–∞
        targetX: target.x + target.width/2,
        targetY: target.y + target.height/2,
        life: 20, // 20 –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        maxLife: 20,
        width: 8,
        intensity: 1
    };
    
    if (!this.lightningStrikes) {
        this.lightningStrikes = [];
    }
    
    this.lightningStrikes.push(lightning);
    
    // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Å—Ä–∞–∑—É
    const characterConfig = CHARACTERS.find(char => char.name === this.name);
    const damage = characterConfig ? characterConfig.lightningDamage : 50;
    const stunDuration = characterConfig ? characterConfig.lightningStunDuration : 45;
    
    if (target.takeDamage) {
        target.takeDamage(damage);
    }
    
    target.stunned = stunDuration;
    target.screenShake = Math.max(target.screenShake, 15);
    
    this.lightningCooldown = characterConfig ? characterConfig.abilityCooldown : 360;
    
    console.log(`‚ö°üí• Lightning Call —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π! –£—Ä–æ–Ω: ${damage}`);
    
    return true;
}
// üî¥ –ú–ï–¢–û–î RED LIGHT GREEN LIGHT –î–õ–Ø ZAIN
redLightGreenLight() {
    if (this.redLightCooldown > 0 || this.name !== "!ZAIN") {
        console.log(`‚ùå Red Light Green Light –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ö—É–ª–¥–∞—É–Ω: ${Math.ceil(this.redLightCooldown / 60)} —Å–µ–∫`);
        return false;
    }
    
    if (!gameRunning || !gameStarted) {
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
        return false;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å (–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)
    let target;
    if (this === player && bot) {
        target = bot;
    } else if (this === bot && player) {
        target = player;
    } else {
        console.log('‚ùå –¶–µ–ª—å –¥–ª—è Red Light Green Light –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    const characterConfig = CHARACTERS.find(char => char.name === this.name);
    const detectionRadius = characterConfig ? characterConfig.detectionRadius : 400;
    const distance = Math.abs(this.x - target.x);
    
    if (distance > detectionRadius) {
        console.log(`‚ùå –¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${distance}, —Ä–∞–¥–∏—É—Å: ${detectionRadius}`);
        return false;
    }
    
    console.log(`üî¥ ${this.name} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç RED LIGHT GREEN LIGHT! –ù–µ –¥–≤–∏–≥–∞–π—Å—è –∏–ª–∏ –ø–æ–ª—É—á–∏—à—å —É—Ä–æ–Ω!`);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    this.redLightActive = true;
    this.redLightDuration = characterConfig ? characterConfig.freezeDuration : 180; // 3 —Å–µ–∫—É–Ω–¥—ã
    this.redLightCooldown = characterConfig ? characterConfig.abilityCooldown : 480; // 8 —Å–µ–∫—É–Ω–¥
    this.redLightCountdown = 3; // –°—á–µ—Ç—á–∏–∫ 3-2-1
    this.redLightTarget = target;
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    this.lastPosition.x = target.x;
    this.lastPosition.y = target.y;
    this.movementViolations = 0;
    
    console.log(`üî¥ Red Light Green Light –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${this.redLightDuration/60} —Å–µ–∫—É–Ω–¥! –ù–µ –¥–≤–∏–≥–∞–π—Å—è, ${target.name}!`);
    return true;
}
// ‚ö° –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø –£–î–ê–†–ê –ú–û–õ–ù–ò–ò
createLightningStrike(x, y) {
    const characterConfig = CHARACTERS.find(char => char.name === this.name);
    const damage = characterConfig ? characterConfig.lightningDamage : 50;
    const stunDuration = characterConfig ? characterConfig.lightningStunDuration : 45;
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–ª–Ω–∏—é
    const lightning = {
        x: x,
        y: 0, // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–µ—Ä—Ö–∞ —ç–∫—Ä–∞–Ω–∞
        targetX: x,
        targetY: y,
        life: 30,
        maxLife: 30,
        width: 15 + Math.random() * 10,
        intensity: 1,
        hasHit: false,
        damage: damage,
        stunDuration: stunDuration
    };
    
    if (!this.lightningStrikes) {
        this.lightningStrikes = [];
    }
    
    this.lightningStrikes.push(lightning);
    
    console.log(`‚ö° –ú–æ–ª–Ω–∏—è —É–¥–∞—Ä—è–µ—Ç –≤ —Ç–æ—á–∫—É (${x}, ${y})! –£—Ä–æ–Ω: ${damage}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–ª—å
    this.checkLightningHit(lightning);
}

// ‚ö° –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô –û –ú–û–õ–ù–ò–Ø–•
updateLightningWarnings() {
    if (!this.lightningWarnings || this.name !== "Heathcliff") return;
    
    for (let i = this.lightningWarnings.length - 1; i >= 0; i--) {
        const warning = this.lightningWarnings[i];
        
        warning.life--;
        warning.size = warning.maxSize * (1 - warning.life / warning.maxLife);
        warning.intensity = warning.life / warning.maxLife;
        
        if (warning.life <= 0) {
            this.lightningWarnings.splice(i, 1);
        }
    }
}

// ‚ö° –û–ë–ù–û–í–õ–ï–ù–ò–ï –£–î–ê–†–û–í –ú–û–õ–ù–ò–ô
updateLightningStrikes() {
    if (!this.lightningStrikes || this.name !== "Heathcliff") return;
    
    for (let i = this.lightningStrikes.length - 1; i >= 0; i--) {
        const lightning = this.lightningStrikes[i];
        
        lightning.life--;
        lightning.intensity = lightning.life / lightning.maxLife;
        
        if (lightning.life <= 0) {
            this.lightningStrikes.splice(i, 1);
        }
    }
}

// ‚ö° –ü–†–û–í–ï–†–ö–ê –ü–û–ü–ê–î–ê–ù–ò–Ø –ú–û–õ–ù–ò–ò
checkLightningHit(lightning) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å
    let target;
    if (this === player && bot) {
        target = bot;
    } else if (this === bot && player) {
        target = player;
    } else {
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç—å –º–æ–ª–Ω–∏–∏
    const distance = Math.abs(lightning.targetX - (target.x + target.width/2));
    
    if (distance <= 60 && !lightning.hasHit) { // –†–∞–¥–∏—É—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è 60 –ø–∏–∫—Å–µ–ª–µ–π
        lightning.hasHit = true;
        
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        if (target.takeDamage) {
            target.takeDamage(lightning.damage);
        }
        
        // –û–≥–ª—É—à–∞–µ–º —Ü–µ–ª—å
        target.stunned = lightning.stunDuration;
        
        // –°–∏–ª—å–Ω–æ–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–±—Ä–æ—Å
        target.velocityY = Math.min(target.velocityY, -15); // –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–≤–µ—Ä—Ö
        target.screenShake = Math.max(target.screenShake, 20);
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.createLightningEffects(lightning.targetX, lightning.targetY);
        
        console.log(`‚ö°üí• Lightning Call –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: ${lightning.damage}, –û–≥–ª—É—à–µ–Ω–∏–µ: ${lightning.stunDuration} –∫–∞–¥—Ä–æ–≤`);
        
        return 'hit';
    }
    
    return 'miss';
}

// ‚ö° –°–û–ó–î–ê–ù–ò–ï –≠–§–§–ï–ö–¢–û–í –ú–û–õ–ù–ò–ò
createLightningEffects(x, y) {
    if (!this.lightningEffects) {
        this.lightningEffects = [];
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏—Å–∫—Ä—ã –∏ —Ä–∞–∑—Ä—è–¥—ã
    for (let i = 0; i < 15; i++) {
        const angle = (i / 15) * Math.PI * 2;
        const speed = 5 + Math.random() * 8;
        
        const effect = {
            x: x + (Math.random() - 0.5) * 40,
            y: y + (Math.random() - 0.5) * 40,
            velocityX: Math.cos(angle) * speed,
            velocityY: Math.sin(angle) * speed - 3,
            life: 40 + Math.random() * 30,
            maxLife: 70,
            size: 3 + Math.random() * 5,
            type: Math.random() < 0.5 ? 'spark' : 'bolt'
        };
        
        this.lightningEffects.push(effect);
    }
}

// ‚ö° –û–ë–ù–û–í–õ–ï–ù–ò–ï –≠–§–§–ï–ö–¢–û–í –ú–û–õ–ù–ò–ò
updateLightningEffects() {
    if (!this.lightningEffects) return;
    
    for (let i = this.lightningEffects.length - 1; i >= 0; i--) {
        const effect = this.lightningEffects[i];
        
        effect.x += effect.velocityX;
        effect.y += effect.velocityY;
        effect.velocityY += 0.3; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
        effect.life--;
        
        // –≠—Ñ—Ñ–µ–∫—Ç –º–æ–ª–Ω–∏–∏ - —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–µ—Ä–≥–∏–≤–∞–Ω–∏—è
        if (effect.type === 'bolt') {
            effect.x += (Math.random() - 0.5) * 3;
            effect.y += (Math.random() - 0.5) * 3;
        }
        
        if (effect.life <= 0) {
            this.lightningEffects.splice(i, 1);
        }
    }
}
// üî¥ –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø RED LIGHT GREEN LIGHT –î–õ–Ø ZAIN
updateRedLightCountdown() {
    if (this.name !== "!ZAIN" || !this.redLightActive) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—ã–µ 60 –∫–∞–¥—Ä–æ–≤ (1 —Å–µ–∫—É–Ω–¥–∞)
    const secondsPassed = Math.floor((180 - this.redLightDuration) / 60);
    this.redLightCountdown = Math.max(0, 3 - secondsPassed);
}

checkMovementViolations() {
    if (this.name !== "!ZAIN" || !this.redLightActive || !this.redLightTarget) return;
    
    const target = this.redLightTarget;
    const currentX = target.x;
    const currentY = target.y;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ X –∏ Y –æ—Å—è–º
    const deltaX = Math.abs(currentX - this.lastPosition.x);
    const deltaY = Math.abs(currentY - this.lastPosition.y);
    const totalMovement = deltaX + deltaY;
    
    // –ï—Å–ª–∏ —Ü–µ–ª—å –¥–≤–∏–≥–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 2 –ø–∏–∫—Å–µ–ª—è –∑–∞ –∫–∞–¥—Ä = –Ω–∞—Ä—É—à–µ–Ω–∏–µ
    if (totalMovement > 2) {
        this.movementViolations++;
        
        // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const characterConfig = CHARACTERS.find(char => char.name === this.name);
        const damage = characterConfig ? characterConfig.movementDamage : 15;
        
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
        if (target.takeDamage) {
            target.takeDamage(damage);
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç
        this.createRedLightWarning(target.x + target.width/2, target.y);
        
        console.log(`üî¥üí• ${target.name} –¥–≤–∏–≥–∞–ª—Å—è –≤–æ –≤—Ä–µ–º—è Red Light! –£—Ä–æ–Ω: ${damage} (–ù–∞—Ä—É—à–µ–Ω–∏–µ ${this.movementViolations})`);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–∫–∞–∑–∞–Ω–∏—è
        target.screenShake = Math.max(target.screenShake, 8);
        target.velocityX *= 0.5; // –ó–∞–º–µ–¥–ª—è–µ–º
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
    this.lastPosition.x = currentX;
    this.lastPosition.y = currentY;
}

createRedLightWarning(x, y) {
    if (!this.redLightWarnings) {
        this.redLightWarnings = [];
    }
    
    const warning = {
        x: x,
        y: y,
        life: 30,
        maxLife: 30,
        size: 40,
        alpha: 1
    };
    
    this.redLightWarnings.push(warning);
}

updateRedLightWarnings() {
    if (!this.redLightWarnings) return;
    
    for (let i = this.redLightWarnings.length - 1; i >= 0; i--) {
        const warning = this.redLightWarnings[i];
        
        warning.life--;
        warning.alpha = warning.life / warning.maxLife;
        warning.size += 2; // –†–∞—Å—à–∏—Ä—è–µ—Ç—Å—è
        
        if (warning.life <= 0) {
            this.redLightWarnings.splice(i, 1);
        }
    }
}

// ü¶à –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ê–ö–£–õ–¨–ï–ô –ê–¢–ê–ö–ò
updateSharkDash() {
    if (this.name !== "Matt" || !this.isSharkDashing) return;
    
    this.sharkTimer--;
    
    switch (this.sharkPhase) {
        case 'transform':
            // –§–∞–∑–∞ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
            if (this.sharkTimer <= 0) {
                this.sharkPhase = 'dash';
                this.sharkTimer = 60; // 20 –∫–∞–¥—Ä–æ–≤ –Ω–∞ —Ä—ã–≤–æ–∫
                
                // –°–æ–∑–¥–∞–µ–º –º–æ—â–Ω—ã–µ –≤–æ–¥—è–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
                this.createWaterParticles(this.x + this.width/2, this.y + this.height/2, 20);
                
                console.log(`ü¶à ${this.name} –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –∞–∫—É–ª—É –∏ –º—á–∏—Ç—Å—è –∫ —Ü–µ–ª–∏!`);
            }
            break;
            
        case 'dash':
    // –ü–†–û–°–¢–û–ô –ü–†–Ø–ú–û–ô –ü–û–õ–ï–¢
    const characterConfig = CHARACTERS.find(char => char.name === this.name);
    const sharkSpeed = characterConfig ? characterConfig.sharkSpeed : 25;
    
    // –õ–ï–¢–ò–ú –ü–†–Ø–ú–û –í –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ò, –ö–£–î–ê –°–ú–û–¢–†–ò–ú
    if (this.facingRight) {
        this.x += sharkSpeed;
    } else {
        this.x -= sharkSpeed;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º –í–û –í–†–ï–ú–Ø –ü–û–õ–ï–¢–ê
    if (this.sharkTarget) {
        const deltaX = Math.abs((this.x + this.width/2) - (this.sharkTarget.x + this.sharkTarget.width/2));
        const deltaY = Math.abs((this.y + this.height/2) - (this.sharkTarget.y + this.sharkTarget.height/2));
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        
        if (distance <= 100) {
            // –ü–û–ü–ê–õ–ò –í –ü–†–û–¢–ò–í–ù–ò–ö–ê!
            this.sharkPhase = 'bite';
            this.sharkTimer = 15;
            this.executeSharkBite();
            console.log(`ü¶à ${this.name} –í–†–ï–ó–ê–õ–°–Ø –í –ü–†–û–¢–ò–í–ù–ò–ö–ê!`);
            return;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ —Ç–∞–π–º–µ—Ä
    if (this.x < -50 || this.x > canvas.width + 50 || this.sharkTimer <= 0) {
        this.sharkPhase = 'return';
        this.sharkTimer = 15;
        console.log(`ü¶à ${this.name} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è!`);
    }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥ –∞–∫—É–ª—ã
            this.sharkTrail.push({
                x: this.x + this.width/2,
                y: this.y + this.height/2,
                life: 30,
                size: 15 + Math.random() * 10
            });
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–ª–µ–¥–∞
            if (this.sharkTrail.length > 20) {
                this.sharkTrail.shift();
            }
            
            if (this.sharkTimer <= 0) {
                this.sharkPhase = 'bite';
                this.sharkTimer = 15; // 15 –∫–∞–¥—Ä–æ–≤ –Ω–∞ —É–∫—É—Å
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —É–∫—É—Å
                this.executeSharkBite();
                
                console.log(`ü¶à ${this.name} –ö–£–°–ê–ï–¢ —Ü–µ–ª—å!`);
            }
            break;
            
        case 'bite':
            // –§–∞–∑–∞ —É–∫—É—Å–∞
            if (this.sharkTimer <= 0) {
                this.sharkPhase = 'return';
                this.sharkTimer = 15; // 15 –∫–∞–¥—Ä–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                
                console.log(`ü¶à ${this.name} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É!`);
            }
            break;
            
        case 'return':
            // –§–∞–∑–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è
            const returnProgress = 1 - (this.sharkTimer / 15);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            this.x = this.sharkTargetX + (this.sharkStartX - this.sharkTargetX) * returnProgress;
            this.y = this.sharkTargetY + (this.sharkStartY - this.sharkTargetY) * returnProgress;
            
            if (this.sharkTimer <= 0) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—Ç–∞–∫—É
                this.isSharkDashing = false;
                this.sharkPhase = 'none';
                this.sharkTimer = 0;
                this.sharkTarget = null;
                this.sharkTrail = [];
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                this.x = this.sharkStartX;
                this.y = this.sharkStartY;
                
                console.log(`ü¶à ${this.name} –∑–∞–≤–µ—Ä—à–∞–µ—Ç Shark Dash!`);
            }
            break;
    }
}

// ü¶à –ú–ï–¢–û–î –í–´–ü–û–õ–ù–ï–ù–ò–Ø –£–ö–£–°–ê
executeSharkBite() {
    if (!this.sharkTarget) return;
    
    const target = this.sharkTarget;
    const characterConfig = CHARACTERS.find(char => char.name === this.name);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫—É—Å–∞
    const biteDamage = characterConfig ? characterConfig.sharkDamage : 50;
    const stunDuration = characterConfig ? characterConfig.stunDuration : 60;
    
    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–ü–ê–î–ê–ù–ò–Ø - –ø–æ –æ–±–µ–∏–º –æ—Å—è–º
    const deltaX = Math.abs((this.x + this.width/2) - (target.x + target.width/2));
    const deltaY = Math.abs((this.y + this.height/2) - (target.y + target.height/2));
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    
    console.log(`ü¶à –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫—É—Å–∞: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${distance.toFixed(1)}, –Ω—É–∂–Ω–æ ‚â§150`);
    
    if (distance <= 150) { // –£–í–ï–õ–ò–ß–ò–õ–ò —Ä–∞–¥–∏—É—Å —É–∫—É—Å–∞
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        if (target.takeDamage) {
            target.takeDamage(biteDamage);
        }
        
        // –û–≥–ª—É—à–∞–µ–º —Ü–µ–ª—å
        target.stunned = stunDuration;
        
        // –°–∏–ª—å–Ω–æ–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
        const knockbackForce = 20;
        target.knockback += (target.x > this.x) ? knockbackForce : -knockbackForce;
        target.velocityY = Math.min(target.velocityY, -12); // –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–≤–µ—Ä—Ö
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã —ç–∫—Ä–∞–Ω–∞
        target.screenShake = Math.max(target.screenShake, 15);
        this.screenShake = Math.max(this.screenShake, 10);
        this.biteEffect = 30;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ—â–Ω—ã–µ –≤–æ–¥—è–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.createWaterParticles(target.x + target.width/2, target.y + target.height/2, 30);
        
        console.log(`ü¶àüí• Shark Bite –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: ${biteDamage}, –û–≥–ª—É—à–µ–Ω–∏–µ: ${stunDuration} –∫–∞–¥—Ä–æ–≤`);
        
        return 'hit';
    } else {
        console.log(`ü¶à‚ùå Shark Bite –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${distance}`);
        return 'miss';
    }
}

// ü¶à –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø –í–û–î–Ø–ù–´–• –ß–ê–°–¢–ò–¶
createWaterParticles(x, y, count) {
    if (!this.waterParticles) {
        this.waterParticles = [];
    }
    
    for (let i = 0; i < count; i++) {
        const angle = (i / count) * Math.PI * 2;
        const speed = 3 + Math.random() * 6;
        
        const particle = {
            x: x + (Math.random() - 0.5) * 30,
            y: y + (Math.random() - 0.5) * 30,
            velocityX: Math.cos(angle) * speed,
            velocityY: Math.sin(angle) * speed - 2,
            life: 40 + Math.random() * 30,
            maxLife: 70,
            size: 3 + Math.random() * 5
        };
        
        this.waterParticles.push(particle);
    }
}

// ü¶à –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–û–î–Ø–ù–´–• –ß–ê–°–¢–ò–¶
updateWaterParticles() {
    if (!this.waterParticles) return;
    
    for (let i = this.waterParticles.length - 1; i >= 0; i--) {
        const particle = this.waterParticles[i];
        
        particle.x += particle.velocityX;
        particle.y += particle.velocityY;
        particle.velocityY += 0.2; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
        particle.life--;
        
        // –≠—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω—ã - —á–∞—Å—Ç–∏—Ü—ã –¥–≤–∏–≥–∞—é—Ç—Å—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ
        particle.x += Math.sin(particle.life * 0.1) * 0.5;
        
        if (particle.life <= 0) {
            this.waterParticles.splice(i, 1);
        }
    }
}
    }
    
    

// ====== –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–ï–†–°–û–ù–ê–ñ–ï–ô ======




// ====== –ò–ò –°–ò–°–¢–ï–ú–ê ======

class BotAI {
    constructor(bot, target) {
        this.bot = bot;
        this.target = target;
        this.state = 'APPROACH';
        this.stateTimer = 0;
        this.aggressiveness = 0.4;
        this.reactionTime = 30; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        this.status = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...';
        this.actionDelay = 0;
        
        // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ò–ò
        this.lastPlayerPosition = { x: target.x, y: target.y };
        this.playerMovementPattern = [];
        this.consecutiveAttacks = 0;
        this.lastStateChange = 0;
        this.comboCooldown = 0;
        this.dodgeTimer = 0;
        this.aggressionBoost = 0;
        this.defensiveTimer = 0;
        
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        this.decisionCounter = 0;
        this.actionCounter = 0;
        this.forceActionTimer = 0;
           // üîß –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –î–õ–Ø –ó–ê–©–ò–¢–´ –û–¢ –ó–ê–¶–ò–ö–õ–ò–í–ê–ù–ò–Ø
    this.lastActionTime = 0;
    this.operationCount = 0;
    this.emergencyStop = false;
    }
    
    update() {
    let operationsThisFrame = 0;
    const MAX_OPERATIONS_PER_FRAME = 5;
    
    this.stateTimer++;
    this.decisionCounter++;
    this.actionCounter++;
    this.forceActionTimer++;
    operationsThisFrame++;
    
    if (this.forceActionTimer >= 20 && operationsThisFrame < MAX_OPERATIONS_PER_FRAME) {
        this.forceAction();
        this.forceActionTimer = 0;
        operationsThisFrame++;
    }
    
    if (this.actionDelay > 0) {
        this.actionDelay--;
        return;
    }
    
    if (this.decisionCounter >= Math.max(20, this.reactionTime) && operationsThisFrame < MAX_OPERATIONS_PER_FRAME) {
        try {
            this.makeDecision();
            this.decisionCounter = 0;
            operationsThisFrame++;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ makeDecision:', error);
            this.decisionCounter = 0;
        }
    }
    
    if (this.actionCounter >= Math.max(15, this.reactionTime / 2) && operationsThisFrame < MAX_OPERATIONS_PER_FRAME) {
        try {
            this.executeState();
            this.actionCounter = 0;
            operationsThisFrame++;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ executeState:', error);
            this.actionCounter = 0;
        }
    }
    
    if (operationsThisFrame >= MAX_OPERATIONS_PER_FRAME) {
        console.log(`‚ö†Ô∏è –ò–ò –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operationsThisFrame}/${MAX_OPERATIONS_PER_FRAME}`);
        return;
    }
    
    this.updateTimers();
    this.analyzePlayerMovement();
    this.updateAggressiveness();
}
    
    forceAction() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –±–æ—Ç —Å–ª–∏—à–∫–æ–º –ø–∞—Å—Å–∏–≤–µ–Ω
        const distance = Math.abs(this.bot.x - this.target.x);
        
        if (this.state === 'APPROACH' && distance > 200) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
            if (this.bot.x < this.target.x) {
                this.bot.moveRight();
            } else {
                this.bot.moveLeft();
            }
            
            // –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
            if (Math.random() < 0.1 && this.bot.onGround) {
                this.bot.jump();
            }
        }
        
        if (this.state === 'ATTACK' && distance < 100 && this.bot.lightAttackCooldown === 0) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞
            this.performAttack();
        }
    }
    
    updateTimers() {
        if (this.comboCooldown > 0) this.comboCooldown--;
        if (this.dodgeTimer > 0) this.dodgeTimer--;
        if (this.defensiveTimer > 0) this.defensiveTimer--;
        if (this.aggressionBoost > 0) this.aggressionBoost--;
    }
    
    analyzePlayerMovement() {
        const currentPos = { x: this.target.x, y: this.target.y };
        const movement = {
            dx: currentPos.x - this.lastPlayerPosition.x,
            dy: currentPos.y - this.lastPlayerPosition.y,
            timestamp: Date.now()
        };
        
        this.playerMovementPattern.push(movement);
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–≤–∏–∂–µ–Ω–∏–π
        if (this.playerMovementPattern.length > 10) {
            this.playerMovementPattern.shift();
        }
        
        this.lastPlayerPosition = currentPos;
    }
    
    updateAggressiveness() {
        let baseAggression = this.aggressiveness;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏—é –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
        if (this.target.health < 40) {
            baseAggression += 0.3;
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏—é –ø—Ä–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º —Ö–æ—Ä–æ—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        if (this.bot.health > 70) {
            baseAggression += 0.2;
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Å—Ç –∞–≥—Ä–µ—Å—Å–∏–∏
        if (this.aggressionBoost > 0) {
            baseAggression += 0.4;
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏—é –ø—Ä–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ
        if (this.bot.health < 30) {
            baseAggression -= 0.2;
        }
        
        this.currentAggressiveness = Math.max(0.1, Math.min(1.0, baseAggression));
    }
    
    makeDecision() {
        const playerVelocity = Math.abs(this.target.velocityX);
        const predictedPlayerX = this.target.x + (this.target.velocityX * 15);
        const distance = Math.abs(this.bot.x - predictedPlayerX);
        const actualDistance = Math.abs(this.bot.x - this.target.x);
        const botHealth = this.bot.health / this.bot.maxHealth;
        const targetHealth = this.target.health / this.target.maxHealth;
        const botBalance = this.bot.balance / this.bot.maxBalance;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç–∞–∫—É –∏–≥—Ä–æ–∫–∞ —Å —É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        if (this.target.isAttacking && actualDistance < 150) {
            if (Math.random() < 0.7) {
                this.setState('DEFEND');
                return;
            }
        }
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        if ((botHealth < 0.3 || this.bot.stunned > 0 || botBalance < 0.3) && actualDistance < 200) {
            this.setState('RETREAT');
            this.aggressionBoost = 60; // –ë—É—Å—Ç –∞–≥—Ä–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è
            return;
        }
        
        // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
        if (this.bot.canCounter > 0 && actualDistance < 120) {
            this.setState('COUNTER');
            return;
        }
        
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
        if (actualDistance < 100 && this.bot.lightAttackCooldown < 5 && this.bot.stunned === 0) {
            let shouldAttack = Math.random() < this.currentAggressiveness;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞—Ç–∞–∫–∏
            if (targetHealth < 0.4) shouldAttack = true; // –î–æ–±–∏–≤–∞–µ–º —Å–ª–∞–±–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            if (this.bot.combo > 0) shouldAttack = true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–º–±–æ
            if (this.target.isBlocking && Math.random() < 0.3) shouldAttack = true; // –ê—Ç–∞–∫—É–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ
            
            if (shouldAttack) {
                this.setState('ATTACK');
                return;
            }
        }
        
        // –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∞—Ç–∞–∫–∞
        if (actualDistance < 150 && actualDistance > 60) {
            if (Math.random() < this.currentAggressiveness * 0.8) {
                this.setState('APPROACH');
            } else {
                this.setState('DEFEND');
            }
            return;
        }
        
        // –î–∞–ª—å–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è - –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        if (actualDistance > 150) {
            this.setState('APPROACH');
            return;
        }
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        this.setState('APPROACH');
    }
    
    setState(newState) {
        if (this.state !== newState) {
            this.state = newState;
            this.stateTimer = 0;
            this.lastStateChange = Date.now();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è UI
            switch(newState) {
                case 'APPROACH':
                    this.status = '–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è üèÉ‚Äç‚ôÇÔ∏è';
                    break;
                case 'ATTACK':
                    this.status = '–ê—Ç–∞–∫—É–µ—Ç! ‚ö°';
                    break;
                case 'DEFEND':
                    this.status = '–ó–∞—â–∏—â–∞–µ—Ç—Å—è üõ°Ô∏è';
                    break;
                case 'RETREAT':
                    this.status = '–û—Ç—Å—Ç—É–ø–∞–µ—Ç üèÉ‚Äç‚ôÇÔ∏èüí®';
                    break;
                case 'COUNTER':
                    this.status = '–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞! üí•';
                    break;
            }
        }
    }
    
    executeState() {
        const distance = Math.abs(this.bot.x - this.target.x);
        const targetDirection = this.bot.x < this.target.x ? 1 : -1;
        
        switch(this.state) {
            case 'APPROACH':
                this.executeApproach(distance, targetDirection);
                break;
                
            case 'ATTACK':
                this.executeAttack(distance);
                break;
                
            case 'DEFEND':
                this.executeDefend(distance);
                break;
                
            case 'RETREAT':
                this.executeRetreat(distance, targetDirection);
                break;
                
            case 'COUNTER':
                this.executeCounter(distance);
                break;
        }
    }
    
    executeApproach(distance, targetDirection) {
        this.bot.stopBlock();
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
        const predictedX = this.target.x + (this.target.velocityX * 10);
        
        if (this.bot.x < predictedX - 20) {
            this.bot.moveRight();
        } else if (this.bot.x > predictedX + 20) {
            this.bot.moveLeft();
        }
        
        // –ü—Ä—ã–∂–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏ –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è –∞—Ç–∞–∫
        if (this.bot.onGround) {
            let jumpChance = 0.03;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø—Ä—ã–∂–∫–∞ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
            if (this.target.isAttacking && distance < 120) {
                jumpChance = 0.4;
            }
            
            // –ü—Ä—ã–∂–æ–∫ –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
            if (distance > 100 && Math.abs(this.bot.velocityX) < 2) {
                jumpChance = 0.2;
            }
            
            if (Math.random() < jumpChance) {
                this.bot.jump();
            }
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞—Ç–∞–∫–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏
        if (distance < 90 && this.bot.lightAttackCooldown < 10) {
            this.setState('ATTACK');
        }
    }
    
    executeAttack(distance) {
    this.bot.stopBlock();
    
    // ‚ö° –°–ü–û–°–û–ë–ù–û–°–¢–ò –í–°–ï–• –ü–ï–†–°–û–ù–ê–ñ–ï–ô —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    
    // 1. –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–Ø –¥–ª—è Noxx
    if (this.bot.name === "Noxx" && this.bot.teleportCooldown === 0 && distance > 120) {
        let teleportChance = this.abilityChance || 0.4; // –ë–µ—Ä–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        
        if (Math.random() < teleportChance) {
            console.log(`ü§ñ‚ö° ${this.bot.name} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏! (–®–∞–Ω—Å: ${Math.round(teleportChance * 100)}%)`);
            if (this.bot.electricTeleport()) {
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∞—Ç–∞–∫–∏
            }
        }
    }
    
    // 2. –ó–ï–õ–ï–ù–ê–Ø –ñ–ò–ñ–ê –¥–ª—è Tom.J
    if (this.bot.name === "Tom.J" && this.bot.slimeThrowCooldown === 0 && distance > 80) {
        let slimeChance = this.abilityChance || 0.3;
        
        if (Math.random() < slimeChance) {
            if (this.bot.throwSlime()) {
                console.log(`ü§ñüü¢ ${this.bot.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–µ–ª–µ–Ω—É—é –∂–∏–∂—É! (–®–∞–Ω—Å: ${Math.round(slimeChance * 100)}%)`);
                return;
            }
        }
    }
    
    // 3. –ë–£–¢–´–õ–ö–ò –¥–ª—è vludblet
    if (this.bot.name === "vludblet" && this.bot.bottleThrowCooldown === 0 && distance > 80) {
        let bottleChance = this.abilityChance || 0.3;
        
        if (Math.random() < bottleChance) {
            if (this.bot.throwBottle()) {
                console.log(`ü§ñüçæ ${this.bot.name} –±—Ä–æ—Å–∞–µ—Ç –±—É—Ç—ã–ª–∫—É! (–®–∞–Ω—Å: ${Math.round(bottleChance * 100)}%)`);
                return;
            }
        }
    }
    
    // 4. MAGNITUDE WAVE –¥–ª—è Lyron
    if (this.bot.name === "Lyron" && this.bot.abilityCooldown === 0 && distance > 100) {
        let waveChance = this.abilityChance || 0.3;
        
        if (Math.random() < waveChance) {
            if (this.bot.useMagnitudeWave()) {
                console.log(`ü§ñüåä ${this.bot.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Magnitude Wave! (–®–∞–Ω—Å: ${Math.round(waveChance * 100)}%)`);
                return;
            }
        }
    }
    
    // ü§º –ù–û–í–û–ï: POWER GRAPPLE –¥–ª—è Burhan
    if (this.bot.name === "Burhan" && this.bot.grappleCooldown === 0 && distance <= 100) {
        let grappleChance = this.abilityChance || 0.4;
        
        if (Math.random() < grappleChance) {
            if (this.bot.powerGrapple()) {
                console.log(`ü§ñü§º ${this.bot.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Power Grapple! (–®–∞–Ω—Å: ${Math.round(grappleChance * 100)}%)`);
                return;
            }
        }
    }
    // ü¶à –ù–û–í–û–ï: SHARK DASH –¥–ª—è Matt
    if (this.bot.name === "Matt" && this.bot.sharkCooldown === 0 && distance <= 200) {
        let sharkChance = this.abilityChance || 0.4;
        
        if (Math.random() < sharkChance) {
            if (this.bot.sharkDash()) {
                console.log(`ü§ñü¶à ${this.bot.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Shark Dash! (–®–∞–Ω—Å: ${Math.round(sharkChance * 100)}%)`);
                return;
            }
        }
    }
    
    // üí° –ù–û–í–û–ï: POWER BOOST –¥–ª—è Xealist
    if (this.bot.name === "Xealist" && this.bot.powerCooldown === 0 && !this.bot.isPowered) {
        let boostChance = this.abilityChance || 0.5; // –ß—É—Ç—å –≤—ã—à–µ —à–∞–Ω—Å —Ç.–∫. —ç—Ç–æ —É—Å–∏–ª–µ–Ω–∏–µ
        
        if (Math.random() < boostChance) {
            if (this.bot.powerBoost()) {
                console.log(`ü§ñüí° ${this.bot.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Power Boost! (–®–∞–Ω—Å: ${Math.round(boostChance * 100)}%)`);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞—Ç–∞–∫—É, –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —É—Å–∏–ª–µ–Ω–∏–µ
            }
        }
    }
    
    // 5. –ö–û–ù–¢–†–ê–¢–ê–ö–ê (—Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    
    // 5. –ö–û–ù–¢–†–ê–¢–ê–ö–ê (—Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    
    // ‚ö° –ù–û–í–û–ï: LIGHTNING CALL –¥–ª—è Heathcliff
if (this.bot.name === "Heathcliff" && this.bot.lightningCooldown === 0 && distance > 80) {
    let lightningChance = this.abilityChance || 0.4;
    
    if (Math.random() < lightningChance) {
        if (this.bot.lightningCall()) {
            console.log(`ü§ñ‚ö° ${this.bot.name} –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –º–æ–ª–Ω–∏—é! (–®–∞–Ω—Å: ${Math.round(lightningChance * 100)}%)`);
            return;
        }
    }
}

// üî¥ –ù–û–í–û–ï: RED LIGHT GREEN LIGHT –¥–ª—è !ZAIN
if (this.bot.name === "!ZAIN" && this.bot.redLightCooldown === 0 && distance <= 400) {
    let redLightChance = this.abilityChance || 0.4;
    
    if (Math.random() < redLightChance) {
        if (this.bot.redLightGreenLight()) {
            console.log(`ü§ñüî¥ ${this.bot.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Red Light Green Light! (–®–∞–Ω—Å: ${Math.round(redLightChance * 100)}%)`);
            return;
        }
    }
}
    // üî¥ –ù–û–í–û–ï: RED LIGHT GREEN LIGHT –¥–ª—è !ZAIN
if (this.bot.name === "!ZAIN" && this.bot.redLightCooldown === 0 && distance <= 400) {
    let redLightChance = this.abilityChance || 0.4;
    
    if (Math.random() < redLightChance) {
        if (this.bot.redLightGreenLight()) {
            console.log(`ü§ñüî¥ ${this.bot.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Red Light Green Light! (–®–∞–Ω—Å: ${Math.round(redLightChance * 100)}%)`);
            return;
        }
    }
}

    // 5. –ö–û–ù–¢–†–ê–¢–ê–ö–ê (—Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    if (this.bot.canCounter > 0 && distance < 100) {
        let counterChance = this.counterMaster ? 0.9 : 0.6; // –ú–∞—Å—Ç–µ—Ä –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ—Ç
        
        if (Math.random() < counterChance) {
            if (this.bot.counterAttack(this.target)) {
                console.log(`ü§ñüí• ${this.bot.name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ö–û–ù–¢–†–ê–¢–ê–ö–£! (–®–∞–Ω—Å: ${Math.round(counterChance * 100)}%)`);
                this.consecutiveAttacks++;
                return;
            }
        }
    }
    
    // 6. –û–ë–´–ß–ù–´–ï –ê–¢–ê–ö–ò
    this.performAttack();
    
    // 7. –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –ü–û–ó–ò–¶–ò–ò
    if (distance > 80) {
        if (this.bot.x < this.target.x) {
            this.bot.moveRight();
        } else {
            this.bot.moveLeft();
        }
    }
    
    // 8. –ö–û–ú–ë–û-–ê–¢–ê–ö–ò (—Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–π –∏ –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    if (!this.defensiveMode && this.bot.combo > 0 && this.comboCooldown === 0 && Math.random() < 0.7) {
        this.comboCooldown = 20;
        setTimeout(() => this.performAttack(), 300);
    }
}
    
    performAttack() {
    const distance = Math.abs(this.bot.x - this.target.x);
    
    if (distance > 100) return;
    
    // üü¢ –õ–ï–ì–ö–ò–ô –†–ï–ñ–ò–ú - –æ—á–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏
    if (this.defensiveMode && Math.random() > this.attackChance) {
        console.log('üü¢ –ò–ò —Ä–µ—à–∏–ª –Ω–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å (–ø–∞—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)');
        return; // –ß–∞—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∞—Ç–∞–∫–∏
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–º–±–æ
    if (this.consecutiveAttacks >= this.comboLimit) {
        console.log(`‚è∏Ô∏è –ò–ò –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∫–æ–º–±–æ (${this.comboLimit}), –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞—â–∏—Ç–µ`);
        this.setState('DEFEND');
        this.defensiveTimer = 60; // –î–ª–∏–Ω–Ω–∞—è –∑–∞—â–∏—Ç–Ω–∞—è –ø–∞—É–∑–∞
        this.consecutiveAttacks = 0;
        return;
    }
    
    let attackSuccess = false;
    
    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    let heavyAttackChance = 0.3; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (this.defensiveMode) {
        heavyAttackChance = 0.1; // –õ–µ–≥–∫–∏–π —Ä–µ–∂–∏–º - —Ä–µ–¥–∫–æ —Ç—è–∂–µ–ª—ã–µ –∞—Ç–∞–∫–∏
    } else if (this.aggressiveness > 0.7) {
        heavyAttackChance = 0.5; // –°–ª–æ–∂–Ω—ã–π —Ä–µ–∂–∏–º - —á–∞—Å—Ç–æ —Ç—è–∂–µ–ª—ã–µ –∞—Ç–∞–∫–∏
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
    if (Math.random() < heavyAttackChance && this.bot.heavyAttackCooldown === 0) {
        // –¢—è–∂–µ–ª–∞—è –∞—Ç–∞–∫–∞
        attackSuccess = this.bot.heavyAttack(this.target);
        if (attackSuccess) {
            console.log(`ü§ñ ${this.bot.name} –Ω–∞–Ω–æ—Å–∏—Ç –¢–Ø–ñ–ï–õ–´–ô —É–¥–∞—Ä! –£—Ä–æ–Ω: 25, –ö–æ–º–±–æ: ${this.bot.combo}`);
            this.consecutiveAttacks++;
        }
    } else if (this.bot.lightAttackCooldown === 0) {
        // –ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞
        attackSuccess = this.bot.lightAttack(this.target);
        if (attackSuccess) {
            console.log(`ü§ñ ${this.bot.name} –Ω–∞–Ω–æ—Å–∏—Ç –±—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä! –£—Ä–æ–Ω: 15, –ö–æ–º–±–æ: ${this.bot.combo}`);
            this.consecutiveAttacks++;
        }
    }
    
    // –ó–∞—â–∏—Ç–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∞—Ç–∞–∫ (–±–æ–ª—å—à–µ –Ω–∞ –ª–µ–≥–∫–æ–º —É—Ä–æ–≤–Ω–µ)
    if (this.consecutiveAttacks >= this.comboLimit) {
        this.setState('DEFEND');
        this.defensiveTimer = this.defensiveMode ? 80 : 30; // –î–æ–ª—å—à–µ –Ω–∞ –ª–µ–≥–∫–æ–º
        this.consecutiveAttacks = 0;
    }
}
    
    executeDefend(distance) {
        this.bot.block();
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –∑–∞—â–∏—Ç—ã
        let defendTime = this.target.isAttacking ? 40 : 20;
        
        if (this.defensiveTimer > 0) {
            defendTime = this.defensiveTimer;
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞—Ç–∞–∫–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—â–∏—Ç—ã
        if (this.stateTimer > defendTime) {
            if (distance < 100 && Math.random() < 0.8) {
                this.setState('ATTACK');
            } else {
                this.setState('APPROACH');
            }
        }
        
        // –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –ø–æ—Å–ª–µ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.bot.canCounter > 0) {
            this.setState('COUNTER');
        }
    }
    
    executeRetreat(distance, targetDirection) {
        this.bot.stopBlock();
        
        // –û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
        if (targetDirection > 0) {
            this.bot.moveLeft();
        } else {
            this.bot.moveRight();
        }
        
        // –ü—Ä—ã–∂–∫–∏ –ø—Ä–∏ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–∏
        if (Math.random() < 0.08 && this.bot.onGround) {
            this.bot.jump();
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞—â–∏—Ç–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        if (distance > 150) {
            this.setState('DEFEND');
        }
        
        // –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if (this.bot.canCounter > 0 && distance < 120) {
            this.setState('COUNTER');
        }
    }
    
    executeCounter(distance) {
        if (this.bot.canCounter > 0 && distance < 100) {
            if (this.bot.counterAttack(this.target)) {
                console.log(`ü§ñ ${this.bot.name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ú–û–©–ù–£–Æ –ö–û–ù–¢–†–ê–¢–ê–ö–£! –£—Ä–æ–Ω: 35!`);
                this.setState('ATTACK'); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
            }
        } else {
            this.setState('ATTACK');
        }
    }
    
    getStatus() {
        return this.status;
    }
}

// ====== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ======
let canvas = null;
let ctx = null;

let player, bot, botAI;
let gameRunning = false;
let gameStarted = false;

// üéÆ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ò–ì–†–´
function initializeGame() {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞—Ä–µ–Ω—É
    selectRandomArena();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—Ä–µ–Ω—ã
    loadBackground();
    
    const selectedCharacter = CHARACTERS[selectedCharIndex];
    
    player = new Fighter(
        100, 300, 
        selectedCharacter.color,
        selectedCharacter.name,
        null,
        true
    );
    
    // –°–õ–£–ß–ê–ô–ù–´–ô –í–´–ë–û–† –ü–ï–†–°–û–ù–ê–ñ–ê –î–õ–Ø –ë–û–¢–ê
    let botCharacterIndex;
    if (Math.random() < 0.5) {
        // 50% —à–∞–Ω—Å - –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        botCharacterIndex = selectedCharIndex === 0 ? 1 : 0;
    } else {
        // 50% —à–∞–Ω—Å - —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
        botCharacterIndex = Math.floor(Math.random() * CHARACTERS.length);
    }
    
    const botCharacter = CHARACTERS[botCharacterIndex];
    
    bot = new Fighter(
        650, 300,
        botCharacter.color,
        botCharacter.name,
        null,
        true
    );
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –±–æ—Ç–∞
    preloadBotImages(botCharacterIndex);
    
    botAI = new BotAI(bot, player);
    gameRunning = true;
    gameStarted = true;
    
    console.log(`üéÆ ${selectedCharacter.name} VS ${botCharacter.name}`);
    console.log(`üèüÔ∏è –ê—Ä–µ–Ω–∞: ${currentArenaName}`);
}


function startGame(difficulty) {
    console.log(`üöÄ === –ù–ê–ß–ê–õ–û –≠–ü–ò–ß–ï–°–ö–û–ì–û –ë–û–Ø === üöÄ`);
    console.log(`‚öîÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${difficulty.toUpperCase()}`);
    
    document.getElementById('difficultyMenu').style.display = 'none';
    document.getElementById('gameArea').style.display = 'block';
    
    initializeGame();
    changeDifficulty(difficulty);
    gameLoop();
    
    console.log('üéÆ === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–ò–ù–û–ú === üéÆ');
    console.log('   üèÉ‚Äç‚ôÇÔ∏è A/D - –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ');
    console.log('   ü¶ò W - –º–æ—â–Ω—ã–π –ø—Ä—ã–∂–æ–∫, S - –∑–∞—â–∏—Ç–Ω–∞—è —Å—Ç–æ–π–∫–∞');
    console.log('   ‚ö° –õ–ö–ú - –±—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä (15 —É—Ä–æ–Ω–∞)');
    console.log('   üí• –ü–ö–ú - —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä (25 —É—Ä–æ–Ω–∞)');
    console.log('üèÜ –°–¢–ê–ù–¨–¢–ï –ß–ï–ú–ü–ò–û–ù–û–ú –ê–†–ï–ù–´!');
    
    document.body.setAttribute('tabindex', '0');
    document.body.focus();
}

function backToMenu() {
    gameRunning = false;
    gameStarted = false;
    document.getElementById('characterMenu').style.display = 'block';
    document.getElementById('difficultyMenu').style.display = 'none';
    document.getElementById('gameArea').style.display = 'none';
    console.log('üìã === –í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ –í–´–ë–û–†–ê –ü–ï–†–°–û–ù–ê–ñ–ê === üìã');
    console.log('üèüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –≤–æ–∏–Ω–∞...');
}
// ====== –£–ü–†–ê–í–õ–ï–ù–ò–ï ======

document.addEventListener('keydown', function(e) {
    const keyCode = e.keyCode || e.which;
    
    if (!gameRunning || !gameStarted || !player) {
        return;
    }
    
    switch (keyCode) {
        case 65: // A ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ
            player.moveLeft();
            showKeyPress('A');
            break;

        case 68: // D ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
            player.moveRight();
            showKeyPress('D');
            break;

        case 87: // W ‚Äî –ø—Ä—ã–∂–æ–∫
            player.jump();
            showKeyPress('W');
            break;

        case 83: // S ‚Äî –±–ª–æ–∫
            player.block();
            showKeyPress('S');
            break;

        case 81: // Q ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            if (player.name === "Lyron") {
                const used = player.useMagnitudeWave();
                if (used) {
                    showKeyPress('Q - MAGNITUDE WAVE! üåä');
                    console.log('üåä Lyron –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª Magnitude Wave!');
                } else {
                    showKeyPress('Q - –ù–ê –ö–£–õ–î–ê–£–ù–ï');
                    console.log('‚ùå Magnitude Wave –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ');
                }
            } else if (player.name === "Tom.J") {
                const thrown = player.throwSlime();
                if (thrown) {
                    showKeyPress('Q - –ó–ï–õ–ï–ù–ê–Ø –ñ–ò–ñ–ê! üü¢üí•');
                    console.log('üü¢ Tom.J –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –∑–µ–ª–µ–Ω–æ–π –∂–∏–∂–æ–π!');
                } else {
                    showKeyPress('Q - –°–õ–ê–ô–ú –ù–ê –ö–£–õ–î–ê–£–ù–ï');
                    console.log('‚ùå –í—ã—Å—Ç—Ä–µ–ª —Å–ª–∞–π–º–æ–º –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ');
                }
            } else if (player.name === "vludblet") {
                const thrown = player.throwBottle();
                if (thrown) {
        showKeyPress('Q - –ë–£–¢–´–õ–ö–ê –ë–†–û–®–ï–ù–ê! üçæüí•');
        console.log('üçæ vludblet –±—Ä–æ—Å–∏–ª –±—É—Ç—ã–ª–∫—É!');
    } else {
        showKeyPress('Q - –ë–£–¢–´–õ–ö–ê –ù–ê –ö–£–õ–î–ê–£–ù–ï');
        console.log('‚ùå –ë—Ä–æ—Å–æ–∫ –±—É—Ç—ã–ª–∫–∏ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ');
    }
} else if (player.name === "Noxx") {
    // ‚ö° –î–û–ë–ê–í–¨–¢–ï –≠–¢–û:
    const teleported = player.electricTeleport();
    if (teleported) {
        showKeyPress('Q - ELECTRIC TELEPORT! ‚ö°üí•');
        console.log('‚ö° Noxx –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª Electric Teleport Strike!');
    } else {
        showKeyPress('Q - –¢–ï–õ–ï–ü–û–†–¢ –ù–ê –ö–£–õ–î–ê–£–ù–ï');
        console.log('‚ùå Electric Teleport –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ');
    }
} else if (player.name === "Burhan") {
    // ü§º –ù–û–í–û–ï –î–õ–Ø BURHAN:
    const grappled = player.powerGrapple();
    if (grappled) {
        showKeyPress('Q - POWER GRAPPLE! ü§ºüí•');
        console.log('ü§º Burhan –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª Power Grapple!');
    } else {
        showKeyPress('Q - –ë–†–û–°–û–ö –ù–ê –ö–£–õ–î–ê–£–ù–ï');
        console.log('‚ùå Power Grapple –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ');
    }
} else if (player.name === "Matt") {
    const dashed = player.sharkDash();
    if (dashed) {
        showKeyPress('Q - SHARK DASH! ü¶àüí•');
        console.log('ü¶à Matt –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª Shark Dash!');
    } else {
        showKeyPress('Q - –ê–ö–£–õ–ê –ù–ê –ö–£–õ–î–ê–£–ù–ï');
        console.log('‚ùå Shark Dash –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ');
    }
} else if (player.name === "Xealist") {
    // üí° –ù–û–í–û–ï –î–õ–Ø XEALIST:
    const boosted = player.powerBoost();
    if (boosted) {
        showKeyPress('Q - POWER BOOST! üí°‚ö°');
        console.log('üí° Xealist –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª Power Boost!');
    } else {
        showKeyPress('Q - –£–°–ò–õ–ï–ù–ò–ï –ù–ê –ö–£–õ–î–ê–£–ù–ï');
        console.log('‚ùå Power Boost –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ');
    }
} else if (player.name === "Heathcliff") {
    // ‚ö° –ù–û–í–û–ï –î–õ–Ø HEATHCLIFF:
    const lightningUsed = player.lightningCall();
    if (lightningUsed) {
        showKeyPress('Q - LIGHTNING CALL! ‚ö°üí•');
        console.log('‚ö° Heathcliff –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –º–æ–ª–Ω–∏—é —Å –Ω–µ–±–µ—Å!');
    } else {
        showKeyPress('Q - –ú–û–õ–ù–ò–Ø –ù–ê –ö–£–õ–î–ê–£–ù–ï');
        console.log('‚ùå Lightning Call –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ');
    }
} else if (player.name === "!ZAIN") {
    // üî¥ –ù–û–í–û–ï –î–õ–Ø !ZAIN:
    const redLightUsed = player.redLightGreenLight();
    if (redLightUsed) {
        showKeyPress('Q - RED LIGHT GREEN LIGHT! üî¥üí•');
        console.log('üî¥ !ZAIN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª Red Light Green Light!');
    } else {
        showKeyPress('Q - RED LIGHT –ù–ê –ö–£–õ–î–ê–£–ù–ï');
        console.log('‚ùå Red Light Green Light –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ');
    }
} else {
    showKeyPress('Q - –ù–ï–¢ –°–ü–û–°–û–ë–ù–û–°–¢–ò');
    console.log(`‚ùå –£ ${player.name} –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏`);
}
            break;

        default:
            // –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏—à–∏
            break;
    }

    e.preventDefault();
});




document.addEventListener('keyup', function(e) {
    const keyCode = e.keyCode || e.which;
    
    if (!gameRunning || !gameStarted || !player) {
        return;
    }
    
    switch(keyCode) {
        case 83: // S
            if (player && player.stopBlock) {
                player.stopBlock();
            }
            break;
    }
});

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–´–®–¨–Æ
canvas.addEventListener('mousedown', function(e) {
    if (!gameRunning || !gameStarted || !player || !bot) {
        showKeyPress('–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
        return;
    }
    
    e.preventDefault();
    e.stopPropagation();
    
    if (e.button === 0) { 
        let hitResult;
        
        if (player.canCounter > 0) {
            hitResult = player.counterAttack(bot);
            if (hitResult === 'hit') {
                showKeyPress('–õ–ö–ú - –ö–û–ù–¢–†–ê–¢–ê–ö–ê –ü–û–ü–ê–õ–ê! 35 –£–†–û–ù–ê!');
                console.log(`üí• –ö–û–ù–¢–†–ê–¢–ê–ö–ê! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: 35, –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${bot.health}`);
                
                canvas.classList.add('counter-attack-effect');
                setTimeout(() => {
                    canvas.classList.remove('counter-attack-effect');
                }, 500);
            }
        } else {
            hitResult = player.lightAttack(bot);
            if (hitResult === 'hit') {
                showKeyPress('–õ–ö–ú - –ë–´–°–¢–†–´–ô –£–î–ê–† –ü–û–ü–ê–õ!');
                console.log(`‚ö° –ë—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: 15, –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${bot.health}`);
            } else if (hitResult === 'parried') {
                showKeyPress('–õ–ö–ú - –ü–ê–†–ò–†–û–í–ê–ù!');
                console.log(`üõ°Ô∏è –£–¥–∞—Ä –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω! –ë–æ—Ç –º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å!`);
            } else if (hitResult === 'blocked') {
                showKeyPress('–õ–ö–ú - –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù');
                console.log(`üõ°Ô∏è –£–¥–∞—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –£—Ä–æ–Ω: 5`);
            } else {
                showKeyPress('–õ–ö–ú - –ú–ò–ú–û');
                console.log(`‚ùå –ë—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä –Ω–µ –ø–æ–ø–∞–ª`);
            }
            
            if (hitResult === 'hit' || hitResult === 'blocked') {
                canvas.classList.add('light-attack-effect');
                setTimeout(() => {
                    canvas.classList.remove('light-attack-effect');
                }, 150);
            } else if (hitResult === 'parried') {
                canvas.classList.add('parry-effect');
                setTimeout(() => {
                    canvas.classList.remove('parry-effect');
                }, 300);
            }
        }
        
    } else if (e.button === 2) { 
        const hitResult = player.heavyAttack(bot);
        
        if (hitResult === 'hit') {
            showKeyPress('–ü–ö–ú - –¢–Ø–ñ–ï–õ–´–ô –£–î–ê–† –ü–û–ü–ê–õ!');
            console.log(`üí• –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: 25, –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${bot.health}`);
        } else if (hitResult === 'parried') {
            showKeyPress('–ü–ö–ú - –ü–ê–†–ò–†–û–í–ê–ù!');
            console.log(`üõ°Ô∏è –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω! –ë–æ—Ç –º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å!`);
        } else if (hitResult === 'blocked') {
            showKeyPress('–ü–ö–ú - –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù');
            console.log(`üõ°Ô∏è –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –£—Ä–æ–Ω: 8`);
        } else {
            showKeyPress('–ü–ö–ú - –ú–ò–ú–û');
            console.log(`‚ùå –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä –Ω–µ –ø–æ–ø–∞–ª`);
        }
        
        if (hitResult === 'hit' || hitResult === 'blocked') {
            canvas.classList.add('heavy-attack-effect');
            setTimeout(() => {
                canvas.classList.remove('heavy-attack-effect');
            }, 400);
        } else if (hitResult === 'parried') {
            canvas.classList.add('parry-effect');
            setTimeout(() => {
                canvas.classList.remove('parry-effect');
            }, 300);
        }
    }
    
    return false;
});

document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    return false;
});

canvas.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    return false;
});

canvas.addEventListener('mouseenter', function() {
    canvas.style.cursor = 'crosshair';
});

canvas.addEventListener('mouseleave', function() {
    canvas.style.cursor = 'default';
});

function showKeyPress(key) {
    const keyDisplay = document.getElementById('keyDisplay');
    if (keyDisplay) {
        let bgColor = '#FFD700';
        let textColor = '#000';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if (key.includes('–ö–û–ù–¢–†–ê–¢–ê–ö–ê')) {
            bgColor = 'linear-gradient(45deg, #FF00FF, #9932CC)';
            textColor = '#FFF';
        } else if (key.includes('–ü–ê–†–ò–†–û–í–ê–ù')) {
            bgColor = 'linear-gradient(45deg, #00FFFF, #00BFFF)';
            textColor = '#000';
        } else if (key.includes('–ü–û–ü–ê–õ')) {
            bgColor = 'linear-gradient(45deg, #00FF00, #32CD32)';
            textColor = '#000';
        } else if (key.includes('–ú–ò–ú–û')) {
            bgColor = 'linear-gradient(45deg, #FF6B6B, #FF4444)';
            textColor = '#FFF';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        keyDisplay.innerHTML = `<span style="font-weight: 700;">${key}</span>`;
        keyDisplay.style.background = bgColor;
        keyDisplay.style.color = textColor;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤–∏–¥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ë–ï–ó –ò–ù–°–¢–†–£–ö–¶–ò–ô
        setTimeout(() => {
            keyDisplay.style.background = 'linear-gradient(145deg, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.6))';
            keyDisplay.style.color = '#fff';
            keyDisplay.innerHTML = '<span style="font-weight: 600;">–ì–æ—Ç–æ–≤ –∫ –±–æ—é!</span>';
        }, 1000);
    }
}

// ====== –ò–ì–†–û–í–û–ô –¶–ò–ö–õ ======

function updateUI() {
    const playerHealthEl = document.getElementById('playerHealth');
    const botHealthEl = document.getElementById('botHealth');
    const playerHealthText = document.getElementById('playerHealthText');
    const botHealthText = document.getElementById('botHealthText');
    const playerComboEl = document.getElementById('playerCombo');
    const botComboEl = document.getElementById('botCombo');
    const botStatusEl = document.getElementById('botStatus');
    
    if (playerHealthEl && player) {
        const healthPercent = Math.max(0, Math.floor(player.health / player.maxHealth * 100));
        playerHealthEl.style.width = healthPercent + '%';
        
        if (playerHealthText) {
            playerHealthText.textContent = healthPercent + '%';
            if (healthPercent > 60) {
                playerHealthText.style.color = '#00FF00';
            } else if (healthPercent > 30) {
                playerHealthText.style.color = '#FFD700';
            } else {
                playerHealthText.style.color = '#FF4444';
                playerHealthText.style.animation = 'criticalHealth 1s ease-in-out infinite';
            }
        }
    }
    
    if (botHealthEl && bot) {
        const healthPercent = Math.max(0, Math.floor(bot.health / bot.maxHealth * 100));
        botHealthEl.style.width = healthPercent + '%';
        
        if (botHealthText) {
            botHealthText.textContent = healthPercent + '%';
            if (healthPercent > 60) {
                botHealthText.style.color = '#00FF00';
            } else if (healthPercent > 30) {
                botHealthText.style.color = '#FFD700';
            } else {
                botHealthText.style.color = '#FF4444';
                botHealthText.style.animation = 'criticalHealth 1s ease-in-out infinite';
            }
        }
    }
    
    if (playerComboEl && player) {
        if (player.combo > 1) {
            playerComboEl.innerHTML = `
                <div style="font-size: 1.4rem; margin-bottom: 5px;">üî• –ö–û–ú–ë–û: ${player.combo} üî•</div>
                <div style="font-size: 0.9rem; opacity: 0.8;">–ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –∞–∫—Ç–∏–≤–µ–Ω!</div>
            `;
            playerComboEl.style.animation = 'comboGlow 0.5s ease-in-out infinite';
        } else {
            playerComboEl.innerHTML = '';
            playerComboEl.style.animation = 'none';
        }
    }
    
    if (botComboEl && bot) {
        if (bot.combo > 1) {
            botComboEl.innerHTML = `
                <div style="font-size: 1.4rem; margin-bottom: 5px;">ü§ñ –ö–û–ú–ë–û: ${bot.combo} ü§ñ</div>
                <div style="font-size: 0.9rem; opacity: 0.8;">–ò–ò –∞—Ç–∞–∫—É–µ—Ç —Å–µ—Ä–∏–µ–π!</div>
            `;
            botComboEl.style.animation = 'comboGlow 0.5s ease-in-out infinite';
        } else {
            botComboEl.innerHTML = '';
            botComboEl.style.animation = 'none';
        }
    }
    
    if (botStatusEl && botAI) {
        const status = botAI.getStatus();
        let statusIcon = 'ü§î';
        let statusColor = '#FFD700';
        
        switch(botAI.state) {
            case 'APPROACH':
                statusIcon = 'üèÉ‚Äç‚ôÇÔ∏è';
                statusColor = '#00BFFF';
                break;
            case 'ATTACK':
                statusIcon = '‚ö°';
                statusColor = '#FF4444';
                break;
            case 'DEFEND':
                statusIcon = 'üõ°Ô∏è';
                statusColor = '#00FF7F';
                break;
            case 'RETREAT':
                statusIcon = 'üèÉ‚Äç‚ôÇÔ∏èüí®';
                statusColor = '#FFA500';
                break;
        }
        
        botStatusEl.innerHTML = `${statusIcon} ${status}`;
        botStatusEl.style.color = statusColor;
        
        if (botAI.state === 'ATTACK') {
            botStatusEl.style.animation = 'attackPulse 0.5s ease-in-out infinite';
        } else if (botAI.state === 'DEFEND') {
            botStatusEl.style.animation = 'defendGlow 1s ease-in-out infinite';
        } else {
            botStatusEl.style.animation = 'statusFloat 2s ease-in-out infinite';
        }
    }
}

function gameLoop() {
    if (!gameRunning || !gameStarted) {
        return;
    }
    
    if (!player || !bot || !botAI) {
        return;
    }
    
    // ‚ú® –ó–ê–ú–ï–ù–Ø–ï–ú ctx.clearRect –ù–ê:
    drawBackground(ctx);
    
    player.update();
    bot.update();
    botAI.update();
    
    player.draw(ctx);
    bot.draw(ctx);
    
    updateUI();
    
    if (player.health <= 0) {
        gameRunning = false;
        showGameEnd(`${bot.name} WINS!`, 'defeat');
        return;
    }
    
    if (bot.health <= 0) {
        gameRunning = false;
        showGameEnd(`${player.name} WINS!`, 'victory');
        return;
    }
    
    requestAnimationFrame(gameLoop);
}

function showGameEnd(message, type) {
    // üßπ –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –î–í–ï –°–¢–†–û–ö–ò –í –ù–ê–ß–ê–õ–û:
    gameRunning = false;
    cleanupGameTimers();
    
    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    let color, shadowColor, emoji;
    if (type === 'victory') {
        color = 'linear-gradient(45deg, #FFD700, #FFA500)';
        shadowColor = 'rgba(255, 215, 0, 0.8)';
        emoji = 'üèÜ';
    } else {
        color = 'linear-gradient(45deg, #FF6B6B, #FF4444)';
        shadowColor = 'rgba(255, 107, 107, 0.8)';
        emoji = 'üíÄ';
    }
    
    const endScreen = document.createElement('div');
    endScreen.innerHTML = `
        <div style="
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            animation: fadeIn 0.5s ease-out;
        ">
            <div style="
                font-family: 'Orbitron', sans-serif;
                font-size: 4rem;
                font-weight: 900;
                background: ${color};
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
                text-align: center;
                margin-bottom: 20px;
                animation: victoryPulse 2s ease-in-out infinite;
                text-shadow: 0 0 50px ${shadowColor};
            ">
                ${emoji} ${message} ${emoji}
            </div>
            <div style="
                font-family: 'Rajdhani', sans-serif;
                font-size: 1.5rem;
                color: #FFD700;
                margin-bottom: 30px;
                animation: fadeInUp 1s ease-out 0.5s both;
            ">
                PRESS RESTART FOR A NEW GAME
            </div>
            <button onclick="this.parentElement.parentElement.remove(); restartGame();" style="
                background: linear-gradient(145deg, #4CAF50, #45A049);
                color: white;
                border: none;
                padding: 15px 30px;
                border-radius: 15px;
                font-family: 'Orbitron', sans-serif;
                font-size: 1.2rem;
                font-weight: 700;
                cursor: pointer;
                animation: buttonFloat 3s ease-in-out infinite;
                box-shadow: 0 10px 25px rgba(76, 175, 80, 0.5);
                transition: all 0.3s ease;
            " onmouseover="this.style.transform='scale(1.1) translateY(-5px)'" onmouseout="this.style.transform='scale(1) translateY(0)'">
                üîÑ –ò–ì–†–ê–¢–¨ –°–ù–û–í–ê
            </button>
        </div>
    `;
    
    document.body.appendChild(endScreen);
}

// ====== –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê ======

function restartGame() {
    console.log('üîÑ === –ù–û–í–´–ô –ë–û–ô –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø === üîÑ');
    
    // üßπ –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£:
    cleanupGameTimers();
    
    console.log('‚öîÔ∏è –í–æ–∏–Ω—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ —Å—Ö–≤–∞—Ç–∫–µ...');
    if (gameStarted) {
        const currentDifficulty = getCurrentDifficulty();
        initializeGame();
        changeDifficulty(currentDifficulty);
        gameLoop();
        console.log('üèüÔ∏è –ê—Ä–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞! –î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –±–∏—Ç–≤–∞!');
    }
}

function getCurrentDifficulty() {
    if (!botAI) return 'medium';
    
    if (botAI.aggressiveness <= 0.4) return 'easy';
    if (botAI.aggressiveness <= 0.7) return 'medium';
    return 'hard';
}

function changeDifficulty(level) {
    if (!botAI) return;
    
    switch(level) {
        case 'easy':
            // üü¢ –û–ß–ï–ù–¨ –õ–ï–ì–ö–ò–ô –ò–ò - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Å—Å–∏–≤–Ω—ã–π
            botAI.aggressiveness = 0.15;           // –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏—è
            botAI.reactionTime = 80;               // –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
            botAI.currentAggressiveness = 0.15;    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
            botAI.defensiveMode = true;            // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∑–∞—â–∏—Ç—É
            botAI.attackChance = 0.2;              // –¢–æ–ª—å–∫–æ 20% —à–∞–Ω—Å –∞—Ç–∞–∫–æ–≤–∞—Ç—å
            botAI.comboLimit = 1;                  // –ú–∞–∫—Å–∏–º—É–º 1 –∞—Ç–∞–∫–∞ –ø–æ–¥—Ä—è–¥
            botAI.abilityChance = 0.1;             // –û—á–µ–Ω—å —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            
            console.log('üü¢ –†–µ–∂–∏–º –ù–û–í–ò–ß–û–ö: –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—á–µ–Ω—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –∏ —Å–ª–∞–±—ã–π');
            console.log('   - –ê–≥—Ä–µ—Å—Å–∏—è: 15% | –†–µ–∞–∫—Ü–∏—è: –º–µ–¥–ª–µ–Ω–Ω–∞—è');
            console.log('   - –†–µ–¥–∫–æ –∞—Ç–∞–∫—É–µ—Ç, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∑–∞—â–∏—Ç—É');
            break;
            
        case 'medium':
            // üü° –°–†–ï–î–ù–ò–ô –ò–ò - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–µ—Ü
            botAI.aggressiveness = 0.45;           // –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏—è
            botAI.reactionTime = 35;               // –°—Ä–µ–¥–Ω—è—è —Ä–µ–∞–∫—Ü–∏—è
            botAI.currentAggressiveness = 0.45;
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            botAI.defensiveMode = false;
            botAI.attackChance = 0.6;              // 60% —à–∞–Ω—Å –∞—Ç–∞–∫–æ–≤–∞—Ç—å
            botAI.comboLimit = 2;                  // –î–æ 2 –∞—Ç–∞–∫ –ø–æ–¥—Ä—è–¥
            botAI.abilityChance = 0.3;             // –ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            
            console.log('üü° –†–µ–∂–∏–º –í–û–ò–ù: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫');
            console.log('   - –ê–≥—Ä–µ—Å—Å–∏—è: 45% | –†–µ–∞–∫—Ü–∏—è: —Å—Ä–µ–¥–Ω—è—è');
            console.log('   - –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –∞—Ç–∞–∫—É –∏ –∑–∞—â–∏—Ç—É');
            break;
            
        case 'hard':
            // üî¥ –û–ß–ï–ù–¨ –°–õ–û–ñ–ù–´–ô –ò–ò - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –º–∞—à–∏–Ω–∞
            botAI.aggressiveness = 0.85;           // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏—è
            botAI.reactionTime = 12;               // –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
            botAI.currentAggressiveness = 0.85;
            
            // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            botAI.defensiveMode = false;
            botAI.attackChance = 0.9;              // 90% —à–∞–Ω—Å –∞—Ç–∞–∫–æ–≤–∞—Ç—å
            botAI.comboLimit = 4;                  // –î–æ 4 –∞—Ç–∞–∫ –ø–æ–¥—Ä—è–¥
            botAI.abilityChance = 0.6;             // –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            botAI.counterMaster = true;            // –ú–∞—Å—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫
            
            console.log('üî¥ –†–µ–∂–∏–º –ú–ê–°–¢–ï–†: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∏ —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫!');
            console.log('   - –ê–≥—Ä–µ—Å—Å–∏—è: 85% | –†–µ–∞–∫—Ü–∏—è: –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è');
            console.log('   - –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∞—Ç–∞–∫—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏');
            break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const difficultyEl = document.getElementById('botDifficulty');
    if (difficultyEl) {
        const icons = { easy: 'üü¢', medium: 'üü°', hard: 'üî¥' };
        const names = { easy: '–ù–æ–≤–∏—á–æ–∫', medium: '–í–æ–∏–Ω', hard: '–ú–∞—Å—Ç–µ—Ä' };
        difficultyEl.textContent = `${icons[level]} –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${names[level]}`;
    }
}

function testMove(direction) {
    if (!player || !bot) {
        console.log('‚ùå –ò–≥—Ä–æ–∫ –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        return;
    }
    
    switch(direction) {
        case 'left':
            player.moveLeft();
            break;
        case 'right':
            player.moveRight();
            break;
        case 'jump':
            player.jump();

            break;
        case 'lightAttack':
            if (player.canCounter > 0) {
                const counterResult = player.counterAttack(bot);
            } else {
                const lightResult = player.lightAttack(bot);
            }
            break;
        case 'heavyAttack':
            const heavyResult = player.heavyAttack(bot);
            break;
    }
}



document.body.setAttribute('tabindex', '0');
function cleanupGameTimers() {
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤—ã —á–∞—Å—Ç–∏—Ü
    if (player) {
        player.magnitudeWaves = [];
        player.hitParticles = [];
    }
    
    if (bot) {
        bot.magnitudeWaves = [];
        bot.hitParticles = [];
    }
}

document.body.setAttribute('tabindex', '0');
document.body.focus();
